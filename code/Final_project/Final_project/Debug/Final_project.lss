
Final_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000020cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000572  00800060  000020cc  00002160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003c  008005d2  008005d2  000026d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000026d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002704  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a0  00000000  00000000  00002740  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005361  00000000  00000000  00002ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000111e  00000000  00000000  00007e41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000262a  00000000  00000000  00008f5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000794  00000000  00000000  0000b58c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a23  00000000  00000000  0000bd20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002a1f  00000000  00000000  0000c743  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e0  00000000  00000000  0000f162  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
       4:	0c 94 d8 08 	jmp	0x11b0	; 0x11b0 <__vector_1>
       8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
       c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      2c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      54:	71 02       	muls	r23, r17
      56:	8f 02       	muls	r24, r31
      58:	73 02       	muls	r23, r19
      5a:	75 02       	muls	r23, r21
      5c:	77 02       	muls	r23, r23
      5e:	79 02       	muls	r23, r25
      60:	7b 02       	muls	r23, r27
      62:	7d 02       	muls	r23, r29
      64:	7f 02       	muls	r23, r31
      66:	81 02       	muls	r24, r17
      68:	83 02       	muls	r24, r19
      6a:	85 02       	muls	r24, r21
      6c:	87 02       	muls	r24, r23
      6e:	89 02       	muls	r24, r25
      70:	8b 02       	muls	r24, r27
      72:	8d 02       	muls	r24, r29

00000074 <__ctors_end>:
      74:	11 24       	eor	r1, r1
      76:	1f be       	out	0x3f, r1	; 63
      78:	cf e5       	ldi	r28, 0x5F	; 95
      7a:	d8 e0       	ldi	r29, 0x08	; 8
      7c:	de bf       	out	0x3e, r29	; 62
      7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
      80:	15 e0       	ldi	r17, 0x05	; 5
      82:	a0 e6       	ldi	r26, 0x60	; 96
      84:	b0 e0       	ldi	r27, 0x00	; 0
      86:	ec ec       	ldi	r30, 0xCC	; 204
      88:	f0 e2       	ldi	r31, 0x20	; 32
      8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
      8c:	05 90       	lpm	r0, Z+
      8e:	0d 92       	st	X+, r0
      90:	a2 3d       	cpi	r26, 0xD2	; 210
      92:	b1 07       	cpc	r27, r17
      94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
      96:	26 e0       	ldi	r18, 0x06	; 6
      98:	a2 ed       	ldi	r26, 0xD2	; 210
      9a:	b5 e0       	ldi	r27, 0x05	; 5
      9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
      9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
      a0:	ae 30       	cpi	r26, 0x0E	; 14
      a2:	b2 07       	cpc	r27, r18
      a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
      a6:	0e 94 c7 0b 	call	0x178e	; 0x178e <main>
      aa:	0c 94 64 10 	jmp	0x20c8	; 0x20c8 <_exit>

000000ae <__bad_interrupt>:
      ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <ADC_init>:
	/* ADMUX Register Bits Description:
	 * REFS1:0 = 00 to choose to connect external reference voltage by input this voltage through AREF pin
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX = 0;
      b2:	17 b8       	out	0x07, r1	; 7
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 0 Disable ADC Interrupt
	 * ADATE   = 0 Disable Auto Trigger
	 * ADPS2:0 = 011 to choose ADC_Clock = F_CPU/8 = 1Mhz/8 = 125Khz --> ADC must operate in range 50-200Khz
	 */
	ADCSRA = (1<<ADEN) | (1<<ADPS1) | (1<<ADPS0);
      b4:	83 e8       	ldi	r24, 0x83	; 131
      b6:	86 b9       	out	0x06, r24	; 6
      b8:	08 95       	ret

000000ba <ADC_readChannel>:
}

uint16_t ADC_readChannel(uint8_t channel_num)
{
	channel_num &= 0x07; /* Input channel number must be from 0 --> 7 */
      ba:	87 70       	andi	r24, 0x07	; 7
	ADMUX &= 0xE0; /* Clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
      bc:	97 b1       	in	r25, 0x07	; 7
      be:	90 7e       	andi	r25, 0xE0	; 224
      c0:	97 b9       	out	0x07, r25	; 7
	ADMUX = ADMUX | channel_num; /* Choose the correct channel by setting the channel number in MUX4:0 bits */
      c2:	97 b1       	in	r25, 0x07	; 7
      c4:	89 2b       	or	r24, r25
      c6:	87 b9       	out	0x07, r24	; 7
	SET_BIT(ADCSRA,ADSC); /* Start conversion write '1' to ADSC */
      c8:	86 b1       	in	r24, 0x06	; 6
      ca:	80 64       	ori	r24, 0x40	; 64
      cc:	86 b9       	out	0x06, r24	; 6
	while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* Wait for conversion to complete, ADIF becomes '1' */
      ce:	34 9b       	sbis	0x06, 4	; 6
      d0:	fe cf       	rjmp	.-4      	; 0xce <ADC_readChannel+0x14>
	SET_BIT(ADCSRA,ADIF); /* Clear ADIF by write '1' to it :) */
      d2:	86 b1       	in	r24, 0x06	; 6
      d4:	80 61       	ori	r24, 0x10	; 16
      d6:	86 b9       	out	0x06, r24	; 6
	return ADC; /* Read the digital value from the data register */
      d8:	84 b1       	in	r24, 0x04	; 4
      da:	95 b1       	in	r25, 0x05	; 5
}
      dc:	08 95       	ret

000000de <DcMotor_Init>:

void DcMotor_Init(void){
	/*
	 * setup the direction for the two motor pins through the GPIO driver
	 */
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID,DC_MOTOR_PIN1_ID,PIN_OUTPUT);
      de:	41 e0       	ldi	r20, 0x01	; 1
      e0:	66 e0       	ldi	r22, 0x06	; 6
      e2:	83 e0       	ldi	r24, 0x03	; 3
      e4:	0e 94 3a 01 	call	0x274	; 0x274 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID,DC_MOTOR_PIN2_ID,PIN_OUTPUT);
      e8:	41 e0       	ldi	r20, 0x01	; 1
      ea:	67 e0       	ldi	r22, 0x07	; 7
      ec:	83 e0       	ldi	r24, 0x03	; 3
      ee:	0e 94 3a 01 	call	0x274	; 0x274 <GPIO_setupPinDirection>

	/*
	 * Stop at the DC-Motor at the beginning through the GPIO driver
	 */
	GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PIN1_ID,LOGIC_LOW);
      f2:	40 e0       	ldi	r20, 0x00	; 0
      f4:	66 e0       	ldi	r22, 0x06	; 6
      f6:	83 e0       	ldi	r24, 0x03	; 3
      f8:	0e 94 ad 01 	call	0x35a	; 0x35a <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PIN2_ID,LOGIC_LOW);
      fc:	40 e0       	ldi	r20, 0x00	; 0
      fe:	67 e0       	ldi	r22, 0x07	; 7
     100:	83 e0       	ldi	r24, 0x03	; 3
     102:	0e 94 ad 01 	call	0x35a	; 0x35a <GPIO_writePin>
     106:	08 95       	ret

00000108 <DcMotor_Rotate>:
}

void DcMotor_Rotate(DcMotor_State state,uint8_t speed){
     108:	cf 93       	push	r28
     10a:	c6 2f       	mov	r28, r22
	if(state==Stop){
     10c:	81 11       	cpse	r24, r1
     10e:	0b c0       	rjmp	.+22     	; 0x126 <DcMotor_Rotate+0x1e>
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PIN1_ID,LOGIC_LOW);
     110:	40 e0       	ldi	r20, 0x00	; 0
     112:	66 e0       	ldi	r22, 0x06	; 6
     114:	83 e0       	ldi	r24, 0x03	; 3
     116:	0e 94 ad 01 	call	0x35a	; 0x35a <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PIN2_ID,LOGIC_LOW);
     11a:	40 e0       	ldi	r20, 0x00	; 0
     11c:	67 e0       	ldi	r22, 0x07	; 7
     11e:	83 e0       	ldi	r24, 0x03	; 3
     120:	0e 94 ad 01 	call	0x35a	; 0x35a <GPIO_writePin>
     124:	19 c0       	rjmp	.+50     	; 0x158 <DcMotor_Rotate+0x50>
	}
	else if(state== CW){
     126:	81 30       	cpi	r24, 0x01	; 1
     128:	59 f4       	brne	.+22     	; 0x140 <DcMotor_Rotate+0x38>
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PIN1_ID,LOGIC_LOW);
     12a:	40 e0       	ldi	r20, 0x00	; 0
     12c:	66 e0       	ldi	r22, 0x06	; 6
     12e:	83 e0       	ldi	r24, 0x03	; 3
     130:	0e 94 ad 01 	call	0x35a	; 0x35a <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PIN2_ID,LOGIC_HIGH);
     134:	41 e0       	ldi	r20, 0x01	; 1
     136:	67 e0       	ldi	r22, 0x07	; 7
     138:	83 e0       	ldi	r24, 0x03	; 3
     13a:	0e 94 ad 01 	call	0x35a	; 0x35a <GPIO_writePin>
     13e:	0c c0       	rjmp	.+24     	; 0x158 <DcMotor_Rotate+0x50>
	}
	else if(state== A_CW){
     140:	82 30       	cpi	r24, 0x02	; 2
     142:	51 f4       	brne	.+20     	; 0x158 <DcMotor_Rotate+0x50>
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PIN1_ID,LOGIC_HIGH);
     144:	41 e0       	ldi	r20, 0x01	; 1
     146:	66 e0       	ldi	r22, 0x06	; 6
     148:	83 e0       	ldi	r24, 0x03	; 3
     14a:	0e 94 ad 01 	call	0x35a	; 0x35a <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID,DC_MOTOR_PIN2_ID,LOGIC_LOW);
     14e:	40 e0       	ldi	r20, 0x00	; 0
     150:	67 e0       	ldi	r22, 0x07	; 7
     152:	83 e0       	ldi	r24, 0x03	; 3
     154:	0e 94 ad 01 	call	0x35a	; 0x35a <GPIO_writePin>
	}

	TIMER0_INIT(speed);
     158:	8c 2f       	mov	r24, r28
     15a:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <TIMER0_INIT>
}
     15e:	cf 91       	pop	r28
     160:	08 95       	ret

00000162 <EEPROM_writeByte>:
#include "twi.h"
#include <stdlib.h>
#include <stdint.h>

uint8_t EEPROM_writeByte(uint16_t u16addr, uint8_t u8data)
{
     162:	1f 93       	push	r17
     164:	cf 93       	push	r28
     166:	df 93       	push	r29
     168:	ec 01       	movw	r28, r24
     16a:	16 2f       	mov	r17, r22
	/* Send the Start Bit */
    TWI_start();
     16c:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     170:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <TWI_getStatus>
     174:	88 30       	cpi	r24, 0x08	; 8
     176:	09 f5       	brne	.+66     	; 0x1ba <EEPROM_writeByte+0x58>
        return ERROR;

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8_t)(0xA0 | ((u16addr & 0x0700)>>7)));
     178:	ce 01       	movw	r24, r28
     17a:	88 27       	eor	r24, r24
     17c:	97 70       	andi	r25, 0x07	; 7
     17e:	88 0f       	add	r24, r24
     180:	89 2f       	mov	r24, r25
     182:	88 1f       	adc	r24, r24
     184:	99 0b       	sbc	r25, r25
     186:	91 95       	neg	r25
     188:	80 6a       	ori	r24, 0xA0	; 160
     18a:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     18e:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <TWI_getStatus>
     192:	88 31       	cpi	r24, 0x18	; 24
     194:	a1 f4       	brne	.+40     	; 0x1be <EEPROM_writeByte+0x5c>
        return ERROR; 
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8_t)(u16addr));
     196:	8c 2f       	mov	r24, r28
     198:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     19c:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <TWI_getStatus>
     1a0:	88 32       	cpi	r24, 0x28	; 40
     1a2:	79 f4       	brne	.+30     	; 0x1c2 <EEPROM_writeByte+0x60>
        return ERROR;
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
     1a4:	81 2f       	mov	r24, r17
     1a6:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     1aa:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <TWI_getStatus>
     1ae:	88 32       	cpi	r24, 0x28	; 40
     1b0:	51 f4       	brne	.+20     	; 0x1c6 <EEPROM_writeByte+0x64>
        return ERROR;

    /* Send the Stop Bit */
    TWI_stop();
     1b2:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <TWI_stop>
	
    return SUCCESS;
     1b6:	81 e0       	ldi	r24, 0x01	; 1
     1b8:	07 c0       	rjmp	.+14     	; 0x1c8 <EEPROM_writeByte+0x66>
uint8_t EEPROM_writeByte(uint16_t u16addr, uint8_t u8data)
{
	/* Send the Start Bit */
    TWI_start();
    if (TWI_getStatus() != TWI_START)
        return ERROR;
     1ba:	80 e0       	ldi	r24, 0x00	; 0
     1bc:	05 c0       	rjmp	.+10     	; 0x1c8 <EEPROM_writeByte+0x66>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8_t)(0xA0 | ((u16addr & 0x0700)>>7)));
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
        return ERROR; 
     1be:	80 e0       	ldi	r24, 0x00	; 0
     1c0:	03 c0       	rjmp	.+6      	; 0x1c8 <EEPROM_writeByte+0x66>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8_t)(u16addr));
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
        return ERROR;
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	01 c0       	rjmp	.+2      	; 0x1c8 <EEPROM_writeByte+0x66>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
        return ERROR;
     1c6:	80 e0       	ldi	r24, 0x00	; 0

    /* Send the Stop Bit */
    TWI_stop();
	
    return SUCCESS;
}
     1c8:	df 91       	pop	r29
     1ca:	cf 91       	pop	r28
     1cc:	1f 91       	pop	r17
     1ce:	08 95       	ret

000001d0 <EEPROM_readByte>:

uint8_t EEPROM_readByte(uint16_t u16addr, uint8_t *u8data)
{
     1d0:	ef 92       	push	r14
     1d2:	ff 92       	push	r15
     1d4:	0f 93       	push	r16
     1d6:	1f 93       	push	r17
     1d8:	cf 93       	push	r28
     1da:	df 93       	push	r29
     1dc:	ec 01       	movw	r28, r24
     1de:	8b 01       	movw	r16, r22
	/* Send the Start Bit */
    TWI_start();
     1e0:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     1e4:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <TWI_getStatus>
     1e8:	88 30       	cpi	r24, 0x08	; 8
     1ea:	91 f5       	brne	.+100    	; 0x250 <EEPROM_readByte+0x80>
        return ERROR;
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8_t)((0xA0) | ((u16addr & 0x0700)>>7)));
     1ec:	7e 01       	movw	r14, r28
     1ee:	ee 24       	eor	r14, r14
     1f0:	87 e0       	ldi	r24, 0x07	; 7
     1f2:	f8 22       	and	r15, r24
     1f4:	ee 0c       	add	r14, r14
     1f6:	ef 2c       	mov	r14, r15
     1f8:	ee 1c       	adc	r14, r14
     1fa:	ff 08       	sbc	r15, r15
     1fc:	f1 94       	neg	r15
     1fe:	8e 2d       	mov	r24, r14
     200:	80 6a       	ori	r24, 0xA0	; 160
     202:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     206:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <TWI_getStatus>
     20a:	88 31       	cpi	r24, 0x18	; 24
     20c:	19 f5       	brne	.+70     	; 0x254 <EEPROM_readByte+0x84>
        return ERROR;
		
    /* Send the required memory location address */
    TWI_writeByte((uint8_t)(u16addr));
     20e:	8c 2f       	mov	r24, r28
     210:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     214:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <TWI_getStatus>
     218:	88 32       	cpi	r24, 0x28	; 40
     21a:	f1 f4       	brne	.+60     	; 0x258 <EEPROM_readByte+0x88>
        return ERROR;
		
    /* Send the Repeated Start Bit */
    TWI_start();
     21c:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
     220:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <TWI_getStatus>
     224:	80 31       	cpi	r24, 0x10	; 16
     226:	d1 f4       	brne	.+52     	; 0x25c <EEPROM_readByte+0x8c>
        return ERROR;
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8_t)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     228:	8e 2d       	mov	r24, r14
     22a:	81 6a       	ori	r24, 0xA1	; 161
     22c:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
     230:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <TWI_getStatus>
     234:	80 34       	cpi	r24, 0x40	; 64
     236:	a1 f4       	brne	.+40     	; 0x260 <EEPROM_readByte+0x90>
        return ERROR;

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
     238:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <TWI_readByteWithNACK>
     23c:	f8 01       	movw	r30, r16
     23e:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
     240:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <TWI_getStatus>
     244:	88 35       	cpi	r24, 0x58	; 88
     246:	71 f4       	brne	.+28     	; 0x264 <EEPROM_readByte+0x94>
        return ERROR;

    /* Send the Stop Bit */
    TWI_stop();
     248:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <TWI_stop>

    return SUCCESS;
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	0b c0       	rjmp	.+22     	; 0x266 <EEPROM_readByte+0x96>
uint8_t EEPROM_readByte(uint16_t u16addr, uint8_t *u8data)
{
	/* Send the Start Bit */
    TWI_start();
    if (TWI_getStatus() != TWI_START)
        return ERROR;
     250:	80 e0       	ldi	r24, 0x00	; 0
     252:	09 c0       	rjmp	.+18     	; 0x266 <EEPROM_readByte+0x96>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8_t)((0xA0) | ((u16addr & 0x0700)>>7)));
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
        return ERROR;
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	07 c0       	rjmp	.+14     	; 0x266 <EEPROM_readByte+0x96>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8_t)(u16addr));
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
        return ERROR;
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	05 c0       	rjmp	.+10     	; 0x266 <EEPROM_readByte+0x96>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    if (TWI_getStatus() != TWI_REP_START)
        return ERROR;
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	03 c0       	rjmp	.+6      	; 0x266 <EEPROM_readByte+0x96>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8_t)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
        return ERROR;
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	01 c0       	rjmp	.+2      	; 0x266 <EEPROM_readByte+0x96>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
        return ERROR;
     264:	80 e0       	ldi	r24, 0x00	; 0

    /* Send the Stop Bit */
    TWI_stop();

    return SUCCESS;
}
     266:	df 91       	pop	r29
     268:	cf 91       	pop	r28
     26a:	1f 91       	pop	r17
     26c:	0f 91       	pop	r16
     26e:	ff 90       	pop	r15
     270:	ef 90       	pop	r14
     272:	08 95       	ret

00000274 <GPIO_setupPinDirection>:
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     274:	68 30       	cpi	r22, 0x08	; 8
     276:	08 f0       	brcs	.+2      	; 0x27a <GPIO_setupPinDirection+0x6>
     278:	6f c0       	rjmp	.+222    	; 0x358 <GPIO_setupPinDirection+0xe4>
     27a:	84 30       	cpi	r24, 0x04	; 4
     27c:	08 f0       	brcs	.+2      	; 0x280 <GPIO_setupPinDirection+0xc>
     27e:	6c c0       	rjmp	.+216    	; 0x358 <GPIO_setupPinDirection+0xe4>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     280:	81 30       	cpi	r24, 0x01	; 1
     282:	01 f1       	breq	.+64     	; 0x2c4 <GPIO_setupPinDirection+0x50>
     284:	30 f0       	brcs	.+12     	; 0x292 <GPIO_setupPinDirection+0x1e>
     286:	82 30       	cpi	r24, 0x02	; 2
     288:	b1 f1       	breq	.+108    	; 0x2f6 <GPIO_setupPinDirection+0x82>
     28a:	83 30       	cpi	r24, 0x03	; 3
     28c:	09 f4       	brne	.+2      	; 0x290 <GPIO_setupPinDirection+0x1c>
     28e:	4c c0       	rjmp	.+152    	; 0x328 <GPIO_setupPinDirection+0xb4>
     290:	08 95       	ret
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     292:	41 30       	cpi	r20, 0x01	; 1
     294:	59 f4       	brne	.+22     	; 0x2ac <GPIO_setupPinDirection+0x38>
			{
				SET_BIT(DDRA,pin_num);
     296:	2a b3       	in	r18, 0x1a	; 26
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	02 c0       	rjmp	.+4      	; 0x2a2 <GPIO_setupPinDirection+0x2e>
     29e:	88 0f       	add	r24, r24
     2a0:	99 1f       	adc	r25, r25
     2a2:	6a 95       	dec	r22
     2a4:	e2 f7       	brpl	.-8      	; 0x29e <GPIO_setupPinDirection+0x2a>
     2a6:	82 2b       	or	r24, r18
     2a8:	8a bb       	out	0x1a, r24	; 26
     2aa:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     2ac:	2a b3       	in	r18, 0x1a	; 26
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <GPIO_setupPinDirection+0x44>
     2b4:	88 0f       	add	r24, r24
     2b6:	99 1f       	adc	r25, r25
     2b8:	6a 95       	dec	r22
     2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <GPIO_setupPinDirection+0x40>
     2bc:	80 95       	com	r24
     2be:	82 23       	and	r24, r18
     2c0:	8a bb       	out	0x1a, r24	; 26
     2c2:	08 95       	ret
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     2c4:	41 30       	cpi	r20, 0x01	; 1
     2c6:	59 f4       	brne	.+22     	; 0x2de <GPIO_setupPinDirection+0x6a>
			{
				SET_BIT(DDRB,pin_num);
     2c8:	27 b3       	in	r18, 0x17	; 23
     2ca:	81 e0       	ldi	r24, 0x01	; 1
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <GPIO_setupPinDirection+0x60>
     2d0:	88 0f       	add	r24, r24
     2d2:	99 1f       	adc	r25, r25
     2d4:	6a 95       	dec	r22
     2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <GPIO_setupPinDirection+0x5c>
     2d8:	82 2b       	or	r24, r18
     2da:	87 bb       	out	0x17, r24	; 23
     2dc:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     2de:	27 b3       	in	r18, 0x17	; 23
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	02 c0       	rjmp	.+4      	; 0x2ea <GPIO_setupPinDirection+0x76>
     2e6:	88 0f       	add	r24, r24
     2e8:	99 1f       	adc	r25, r25
     2ea:	6a 95       	dec	r22
     2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <GPIO_setupPinDirection+0x72>
     2ee:	80 95       	com	r24
     2f0:	82 23       	and	r24, r18
     2f2:	87 bb       	out	0x17, r24	; 23
     2f4:	08 95       	ret
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     2f6:	41 30       	cpi	r20, 0x01	; 1
     2f8:	59 f4       	brne	.+22     	; 0x310 <GPIO_setupPinDirection+0x9c>
			{
				SET_BIT(DDRC,pin_num);
     2fa:	24 b3       	in	r18, 0x14	; 20
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	02 c0       	rjmp	.+4      	; 0x306 <GPIO_setupPinDirection+0x92>
     302:	88 0f       	add	r24, r24
     304:	99 1f       	adc	r25, r25
     306:	6a 95       	dec	r22
     308:	e2 f7       	brpl	.-8      	; 0x302 <GPIO_setupPinDirection+0x8e>
     30a:	82 2b       	or	r24, r18
     30c:	84 bb       	out	0x14, r24	; 20
     30e:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     310:	24 b3       	in	r18, 0x14	; 20
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	02 c0       	rjmp	.+4      	; 0x31c <GPIO_setupPinDirection+0xa8>
     318:	88 0f       	add	r24, r24
     31a:	99 1f       	adc	r25, r25
     31c:	6a 95       	dec	r22
     31e:	e2 f7       	brpl	.-8      	; 0x318 <GPIO_setupPinDirection+0xa4>
     320:	80 95       	com	r24
     322:	82 23       	and	r24, r18
     324:	84 bb       	out	0x14, r24	; 20
     326:	08 95       	ret
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     328:	41 30       	cpi	r20, 0x01	; 1
     32a:	59 f4       	brne	.+22     	; 0x342 <GPIO_setupPinDirection+0xce>
			{
				SET_BIT(DDRD,pin_num);
     32c:	21 b3       	in	r18, 0x11	; 17
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	02 c0       	rjmp	.+4      	; 0x338 <GPIO_setupPinDirection+0xc4>
     334:	88 0f       	add	r24, r24
     336:	99 1f       	adc	r25, r25
     338:	6a 95       	dec	r22
     33a:	e2 f7       	brpl	.-8      	; 0x334 <GPIO_setupPinDirection+0xc0>
     33c:	82 2b       	or	r24, r18
     33e:	81 bb       	out	0x11, r24	; 17
     340:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     342:	21 b3       	in	r18, 0x11	; 17
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	02 c0       	rjmp	.+4      	; 0x34e <GPIO_setupPinDirection+0xda>
     34a:	88 0f       	add	r24, r24
     34c:	99 1f       	adc	r25, r25
     34e:	6a 95       	dec	r22
     350:	e2 f7       	brpl	.-8      	; 0x34a <GPIO_setupPinDirection+0xd6>
     352:	80 95       	com	r24
     354:	82 23       	and	r24, r18
     356:	81 bb       	out	0x11, r24	; 17
     358:	08 95       	ret

0000035a <GPIO_writePin>:
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     35a:	68 30       	cpi	r22, 0x08	; 8
     35c:	08 f0       	brcs	.+2      	; 0x360 <GPIO_writePin+0x6>
     35e:	6f c0       	rjmp	.+222    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     360:	84 30       	cpi	r24, 0x04	; 4
     362:	08 f0       	brcs	.+2      	; 0x366 <GPIO_writePin+0xc>
     364:	6c c0       	rjmp	.+216    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     366:	81 30       	cpi	r24, 0x01	; 1
     368:	01 f1       	breq	.+64     	; 0x3aa <GPIO_writePin+0x50>
     36a:	30 f0       	brcs	.+12     	; 0x378 <GPIO_writePin+0x1e>
     36c:	82 30       	cpi	r24, 0x02	; 2
     36e:	b1 f1       	breq	.+108    	; 0x3dc <GPIO_writePin+0x82>
     370:	83 30       	cpi	r24, 0x03	; 3
     372:	09 f4       	brne	.+2      	; 0x376 <GPIO_writePin+0x1c>
     374:	4c c0       	rjmp	.+152    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     376:	08 95       	ret
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     378:	41 30       	cpi	r20, 0x01	; 1
     37a:	59 f4       	brne	.+22     	; 0x392 <GPIO_writePin+0x38>
			{
				SET_BIT(PORTA,pin_num);
     37c:	2b b3       	in	r18, 0x1b	; 27
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	02 c0       	rjmp	.+4      	; 0x388 <GPIO_writePin+0x2e>
     384:	88 0f       	add	r24, r24
     386:	99 1f       	adc	r25, r25
     388:	6a 95       	dec	r22
     38a:	e2 f7       	brpl	.-8      	; 0x384 <GPIO_writePin+0x2a>
     38c:	82 2b       	or	r24, r18
     38e:	8b bb       	out	0x1b, r24	; 27
     390:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     392:	2b b3       	in	r18, 0x1b	; 27
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	02 c0       	rjmp	.+4      	; 0x39e <GPIO_writePin+0x44>
     39a:	88 0f       	add	r24, r24
     39c:	99 1f       	adc	r25, r25
     39e:	6a 95       	dec	r22
     3a0:	e2 f7       	brpl	.-8      	; 0x39a <GPIO_writePin+0x40>
     3a2:	80 95       	com	r24
     3a4:	82 23       	and	r24, r18
     3a6:	8b bb       	out	0x1b, r24	; 27
     3a8:	08 95       	ret
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     3aa:	41 30       	cpi	r20, 0x01	; 1
     3ac:	59 f4       	brne	.+22     	; 0x3c4 <GPIO_writePin+0x6a>
			{
				SET_BIT(PORTB,pin_num);
     3ae:	28 b3       	in	r18, 0x18	; 24
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	02 c0       	rjmp	.+4      	; 0x3ba <GPIO_writePin+0x60>
     3b6:	88 0f       	add	r24, r24
     3b8:	99 1f       	adc	r25, r25
     3ba:	6a 95       	dec	r22
     3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <GPIO_writePin+0x5c>
     3be:	82 2b       	or	r24, r18
     3c0:	88 bb       	out	0x18, r24	; 24
     3c2:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     3c4:	28 b3       	in	r18, 0x18	; 24
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <GPIO_writePin+0x76>
     3cc:	88 0f       	add	r24, r24
     3ce:	99 1f       	adc	r25, r25
     3d0:	6a 95       	dec	r22
     3d2:	e2 f7       	brpl	.-8      	; 0x3cc <GPIO_writePin+0x72>
     3d4:	80 95       	com	r24
     3d6:	82 23       	and	r24, r18
     3d8:	88 bb       	out	0x18, r24	; 24
     3da:	08 95       	ret
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     3dc:	41 30       	cpi	r20, 0x01	; 1
     3de:	59 f4       	brne	.+22     	; 0x3f6 <GPIO_writePin+0x9c>
			{
				SET_BIT(PORTC,pin_num);
     3e0:	25 b3       	in	r18, 0x15	; 21
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	02 c0       	rjmp	.+4      	; 0x3ec <GPIO_writePin+0x92>
     3e8:	88 0f       	add	r24, r24
     3ea:	99 1f       	adc	r25, r25
     3ec:	6a 95       	dec	r22
     3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <GPIO_writePin+0x8e>
     3f0:	82 2b       	or	r24, r18
     3f2:	85 bb       	out	0x15, r24	; 21
     3f4:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     3f6:	25 b3       	in	r18, 0x15	; 21
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	02 c0       	rjmp	.+4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3fe:	88 0f       	add	r24, r24
     400:	99 1f       	adc	r25, r25
     402:	6a 95       	dec	r22
     404:	e2 f7       	brpl	.-8      	; 0x3fe <GPIO_writePin+0xa4>
     406:	80 95       	com	r24
     408:	82 23       	and	r24, r18
     40a:	85 bb       	out	0x15, r24	; 21
     40c:	08 95       	ret
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     40e:	41 30       	cpi	r20, 0x01	; 1
     410:	59 f4       	brne	.+22     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
			{
				SET_BIT(PORTD,pin_num);
     412:	22 b3       	in	r18, 0x12	; 18
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	02 c0       	rjmp	.+4      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     41a:	88 0f       	add	r24, r24
     41c:	99 1f       	adc	r25, r25
     41e:	6a 95       	dec	r22
     420:	e2 f7       	brpl	.-8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     422:	82 2b       	or	r24, r18
     424:	82 bb       	out	0x12, r24	; 18
     426:	08 95       	ret
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     428:	22 b3       	in	r18, 0x12	; 18
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	02 c0       	rjmp	.+4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     430:	88 0f       	add	r24, r24
     432:	99 1f       	adc	r25, r25
     434:	6a 95       	dec	r22
     436:	e2 f7       	brpl	.-8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     438:	80 95       	com	r24
     43a:	82 23       	and	r24, r18
     43c:	82 bb       	out	0x12, r24	; 18
     43e:	08 95       	ret

00000440 <GPIO_readPin>:
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     440:	68 30       	cpi	r22, 0x08	; 8
     442:	b0 f5       	brcc	.+108    	; 0x4b0 <GPIO_readPin+0x70>
     444:	84 30       	cpi	r24, 0x04	; 4
     446:	b0 f5       	brcc	.+108    	; 0x4b4 <GPIO_readPin+0x74>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     448:	81 30       	cpi	r24, 0x01	; 1
     44a:	89 f0       	breq	.+34     	; 0x46e <GPIO_readPin+0x2e>
     44c:	28 f0       	brcs	.+10     	; 0x458 <GPIO_readPin+0x18>
     44e:	82 30       	cpi	r24, 0x02	; 2
     450:	c9 f0       	breq	.+50     	; 0x484 <GPIO_readPin+0x44>
     452:	83 30       	cpi	r24, 0x03	; 3
     454:	11 f1       	breq	.+68     	; 0x49a <GPIO_readPin+0x5a>
     456:	30 c0       	rjmp	.+96     	; 0x4b8 <GPIO_readPin+0x78>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     458:	89 b3       	in	r24, 0x19	; 25
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	02 c0       	rjmp	.+4      	; 0x462 <GPIO_readPin+0x22>
     45e:	95 95       	asr	r25
     460:	87 95       	ror	r24
     462:	6a 95       	dec	r22
     464:	e2 f7       	brpl	.-8      	; 0x45e <GPIO_readPin+0x1e>
     466:	80 ff       	sbrs	r24, 0
     468:	29 c0       	rjmp	.+82     	; 0x4bc <GPIO_readPin+0x7c>
			{
				pin_value = LOGIC_HIGH;
     46a:	81 e0       	ldi	r24, 0x01	; 1
     46c:	08 95       	ret
			{
				pin_value = LOGIC_LOW;
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     46e:	86 b3       	in	r24, 0x16	; 22
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	02 c0       	rjmp	.+4      	; 0x478 <GPIO_readPin+0x38>
     474:	95 95       	asr	r25
     476:	87 95       	ror	r24
     478:	6a 95       	dec	r22
     47a:	e2 f7       	brpl	.-8      	; 0x474 <GPIO_readPin+0x34>
     47c:	80 ff       	sbrs	r24, 0
     47e:	20 c0       	rjmp	.+64     	; 0x4c0 <GPIO_readPin+0x80>
			{
				pin_value = LOGIC_HIGH;
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	08 95       	ret
			{
				pin_value = LOGIC_LOW;
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     484:	83 b3       	in	r24, 0x13	; 19
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	02 c0       	rjmp	.+4      	; 0x48e <GPIO_readPin+0x4e>
     48a:	95 95       	asr	r25
     48c:	87 95       	ror	r24
     48e:	6a 95       	dec	r22
     490:	e2 f7       	brpl	.-8      	; 0x48a <GPIO_readPin+0x4a>
     492:	80 ff       	sbrs	r24, 0
     494:	17 c0       	rjmp	.+46     	; 0x4c4 <GPIO_readPin+0x84>
			{
				pin_value = LOGIC_HIGH;
     496:	81 e0       	ldi	r24, 0x01	; 1
     498:	08 95       	ret
			{
				pin_value = LOGIC_LOW;
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     49a:	80 b3       	in	r24, 0x10	; 16
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	02 c0       	rjmp	.+4      	; 0x4a4 <GPIO_readPin+0x64>
     4a0:	95 95       	asr	r25
     4a2:	87 95       	ror	r24
     4a4:	6a 95       	dec	r22
     4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <GPIO_readPin+0x60>
     4a8:	80 ff       	sbrs	r24, 0
     4aa:	0e c0       	rjmp	.+28     	; 0x4c8 <GPIO_readPin+0x88>
			{
				pin_value = LOGIC_HIGH;
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	08 95       	ret
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8_t GPIO_readPin(uint8_t port_num, uint8_t pin_num)
{
	uint8_t pin_value = LOGIC_LOW;
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	08 95       	ret
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	08 95       	ret
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	08 95       	ret
			{
				pin_value = LOGIC_HIGH;
			}
			else
			{
				pin_value = LOGIC_LOW;
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	08 95       	ret
			{
				pin_value = LOGIC_HIGH;
			}
			else
			{
				pin_value = LOGIC_LOW;
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	08 95       	ret
			{
				pin_value = LOGIC_HIGH;
			}
			else
			{
				pin_value = LOGIC_LOW;
     4c4:	80 e0       	ldi	r24, 0x00	; 0
     4c6:	08 95       	ret
			{
				pin_value = LOGIC_HIGH;
			}
			else
			{
				pin_value = LOGIC_LOW;
     4c8:	80 e0       	ldi	r24, 0x00	; 0
			break;
		}
	}

	return pin_value;
}
     4ca:	08 95       	ret

000004cc <KEYPAD_4x4_adjustKeyNumber>:
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8_t KEYPAD_4x4_adjustKeyNumber(uint8_t button_number)
{
	uint8_t keypad_button = 0;
	switch(button_number)
     4cc:	48 2f       	mov	r20, r24
     4ce:	50 e0       	ldi	r21, 0x00	; 0
     4d0:	fa 01       	movw	r30, r20
     4d2:	31 97       	sbiw	r30, 0x01	; 1
     4d4:	e0 31       	cpi	r30, 0x10	; 16
     4d6:	f1 05       	cpc	r31, r1
     4d8:	18 f5       	brcc	.+70     	; 0x520 <KEYPAD_4x4_adjustKeyNumber+0x54>
     4da:	e6 5d       	subi	r30, 0xD6	; 214
     4dc:	ff 4f       	sbci	r31, 0xFF	; 255
     4de:	0c 94 4f 10 	jmp	0x209e	; 0x209e <__tablejump2__>
	{
		case 1: keypad_button = '7';
     4e2:	87 e3       	ldi	r24, 0x37	; 55
     4e4:	08 95       	ret
				break;
		case 2: keypad_button = '8';
				break;
		case 3: keypad_button = '9';
     4e6:	89 e3       	ldi	r24, 0x39	; 57
				break;
     4e8:	08 95       	ret
		case 4: keypad_button = '%'; // ASCII Code of %
     4ea:	85 e2       	ldi	r24, 0x25	; 37
				break;
     4ec:	08 95       	ret
		case 5: keypad_button = '4';
     4ee:	84 e3       	ldi	r24, 0x34	; 52
				break;
     4f0:	08 95       	ret
		case 6: keypad_button = '5';
     4f2:	85 e3       	ldi	r24, 0x35	; 53
				break;
     4f4:	08 95       	ret
		case 7: keypad_button = '6';
     4f6:	86 e3       	ldi	r24, 0x36	; 54
				break;
     4f8:	08 95       	ret
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
     4fa:	8a e2       	ldi	r24, 0x2A	; 42
				break;		
     4fc:	08 95       	ret
		case 9: keypad_button = '1';
     4fe:	81 e3       	ldi	r24, 0x31	; 49
				break;
     500:	08 95       	ret
		case 10: keypad_button = '2';
     502:	82 e3       	ldi	r24, 0x32	; 50
				break;
     504:	08 95       	ret
		case 11: keypad_button = '3';
     506:	83 e3       	ldi	r24, 0x33	; 51
				break;
     508:	08 95       	ret
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
     50a:	8d e2       	ldi	r24, 0x2D	; 45
				break;
     50c:	08 95       	ret
		case 13: keypad_button = '13';  /* ASCII of Enter */
     50e:	83 e3       	ldi	r24, 0x33	; 51
				break;			
     510:	08 95       	ret
		case 14: keypad_button = '0';
     512:	80 e3       	ldi	r24, 0x30	; 48
				break;
     514:	08 95       	ret
		case 15: keypad_button = '='; /* ASCII Code of '=' */
     516:	8d e3       	ldi	r24, 0x3D	; 61
				break;
     518:	08 95       	ret
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
     51a:	8b e2       	ldi	r24, 0x2B	; 43
				break;
     51c:	08 95       	ret
	uint8_t keypad_button = 0;
	switch(button_number)
	{
		case 1: keypad_button = '7';
				break;
		case 2: keypad_button = '8';
     51e:	88 e3       	ldi	r24, 0x38	; 56
				break;
		default: keypad_button = button_number;
				break;
	}
	return keypad_button;
} 
     520:	08 95       	ret

00000522 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8_t KEYPAD_getPressedKey(void)
{
     522:	1f 93       	push	r17
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
	uint8_t col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
     528:	40 e0       	ldi	r20, 0x00	; 0
     52a:	62 e0       	ldi	r22, 0x02	; 2
     52c:	82 e0       	ldi	r24, 0x02	; 2
     52e:	0e 94 3a 01 	call	0x274	; 0x274 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
     532:	40 e0       	ldi	r20, 0x00	; 0
     534:	63 e0       	ldi	r22, 0x03	; 3
     536:	82 e0       	ldi	r24, 0x02	; 2
     538:	0e 94 3a 01 	call	0x274	; 0x274 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
     53c:	40 e0       	ldi	r20, 0x00	; 0
     53e:	64 e0       	ldi	r22, 0x04	; 4
     540:	82 e0       	ldi	r24, 0x02	; 2
     542:	0e 94 3a 01 	call	0x274	; 0x274 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
     546:	40 e0       	ldi	r20, 0x00	; 0
     548:	65 e0       	ldi	r22, 0x05	; 5
     54a:	82 e0       	ldi	r24, 0x02	; 2
     54c:	0e 94 3a 01 	call	0x274	; 0x274 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
     550:	40 e0       	ldi	r20, 0x00	; 0
     552:	64 e0       	ldi	r22, 0x04	; 4
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	0e 94 3a 01 	call	0x274	; 0x274 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
     55a:	40 e0       	ldi	r20, 0x00	; 0
     55c:	65 e0       	ldi	r22, 0x05	; 5
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	0e 94 3a 01 	call	0x274	; 0x274 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
     564:	40 e0       	ldi	r20, 0x00	; 0
     566:	66 e0       	ldi	r22, 0x06	; 6
     568:	80 e0       	ldi	r24, 0x00	; 0
     56a:	0e 94 3a 01 	call	0x274	; 0x274 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
     56e:	40 e0       	ldi	r20, 0x00	; 0
     570:	67 e0       	ldi	r22, 0x07	; 7
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	0e 94 3a 01 	call	0x274	; 0x274 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
     578:	d0 e0       	ldi	r29, 0x00	; 0
     57a:	26 c0       	rjmp	.+76     	; 0x5c8 <KEYPAD_getPressedKey+0xa6>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
     57c:	12 e0       	ldi	r17, 0x02	; 2
     57e:	1d 0f       	add	r17, r29
     580:	41 e0       	ldi	r20, 0x01	; 1
     582:	61 2f       	mov	r22, r17
     584:	82 e0       	ldi	r24, 0x02	; 2
     586:	0e 94 3a 01 	call	0x274	; 0x274 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
     58a:	40 e0       	ldi	r20, 0x00	; 0
     58c:	61 2f       	mov	r22, r17
     58e:	82 e0       	ldi	r24, 0x02	; 2
     590:	0e 94 ad 01 	call	0x35a	; 0x35a <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
     594:	c0 e0       	ldi	r28, 0x00	; 0
     596:	10 c0       	rjmp	.+32     	; 0x5b8 <KEYPAD_getPressedKey+0x96>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
     598:	64 e0       	ldi	r22, 0x04	; 4
     59a:	6c 0f       	add	r22, r28
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	0e 94 20 02 	call	0x440	; 0x440 <GPIO_readPin>
     5a2:	81 11       	cpse	r24, r1
     5a4:	08 c0       	rjmp	.+16     	; 0x5b6 <KEYPAD_getPressedKey+0x94>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
     5a6:	8d 2f       	mov	r24, r29
     5a8:	88 0f       	add	r24, r24
     5aa:	88 0f       	add	r24, r24
     5ac:	8c 0f       	add	r24, r28
     5ae:	8f 5f       	subi	r24, 0xFF	; 255
     5b0:	0e 94 66 02 	call	0x4cc	; 0x4cc <KEYPAD_4x4_adjustKeyNumber>
     5b4:	0c c0       	rjmp	.+24     	; 0x5ce <KEYPAD_getPressedKey+0xac>
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
     5b6:	cf 5f       	subi	r28, 0xFF	; 255
     5b8:	c4 30       	cpi	r28, 0x04	; 4
     5ba:	70 f3       	brcs	.-36     	; 0x598 <KEYPAD_getPressedKey+0x76>
						#endif
					#endif
				}
			}

			            GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
     5bc:	40 e0       	ldi	r20, 0x00	; 0
     5be:	61 2f       	mov	r22, r17
     5c0:	82 e0       	ldi	r24, 0x02	; 2
     5c2:	0e 94 3a 01 	call	0x274	; 0x274 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
     5c6:	df 5f       	subi	r29, 0xFF	; 255
     5c8:	d4 30       	cpi	r29, 0x04	; 4
     5ca:	c0 f2       	brcs	.-80     	; 0x57c <KEYPAD_getPressedKey+0x5a>
     5cc:	d5 cf       	rjmp	.-86     	; 0x578 <KEYPAD_getPressedKey+0x56>
			}

			            GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}	
}
     5ce:	df 91       	pop	r29
     5d0:	cf 91       	pop	r28
     5d2:	1f 91       	pop	r17
     5d4:	08 95       	ret

000005d6 <LCD_sendCommand>:
 */
}
void LCD_displayStringRowColumn(uint8_t row,uint8_t col, char*word){
LCD_moveCursor(row, col);
LCD_displayString(word);
}
     5d6:	cf 93       	push	r28
     5d8:	c8 2f       	mov	r28, r24
     5da:	40 e0       	ldi	r20, 0x00	; 0
     5dc:	62 e0       	ldi	r22, 0x02	; 2
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	0e 94 ad 01 	call	0x35a	; 0x35a <GPIO_writePin>
     5e4:	89 ef       	ldi	r24, 0xF9	; 249
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	01 97       	sbiw	r24, 0x01	; 1
     5ea:	f1 f7       	brne	.-4      	; 0x5e8 <LCD_sendCommand+0x12>
     5ec:	00 c0       	rjmp	.+0      	; 0x5ee <LCD_sendCommand+0x18>
     5ee:	00 00       	nop
     5f0:	40 e0       	ldi	r20, 0x00	; 0
     5f2:	61 e0       	ldi	r22, 0x01	; 1
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	0e 94 ad 01 	call	0x35a	; 0x35a <GPIO_writePin>
     5fa:	89 ef       	ldi	r24, 0xF9	; 249
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	01 97       	sbiw	r24, 0x01	; 1
     600:	f1 f7       	brne	.-4      	; 0x5fe <LCD_sendCommand+0x28>
     602:	00 c0       	rjmp	.+0      	; 0x604 <LCD_sendCommand+0x2e>
     604:	00 00       	nop
     606:	41 e0       	ldi	r20, 0x01	; 1
     608:	61 e0       	ldi	r22, 0x01	; 1
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	0e 94 ad 01 	call	0x35a	; 0x35a <GPIO_writePin>
     610:	89 ef       	ldi	r24, 0xF9	; 249
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	01 97       	sbiw	r24, 0x01	; 1
     616:	f1 f7       	brne	.-4      	; 0x614 <LCD_sendCommand+0x3e>
     618:	00 c0       	rjmp	.+0      	; 0x61a <LCD_sendCommand+0x44>
     61a:	00 00       	nop
     61c:	4c 2f       	mov	r20, r28
     61e:	40 71       	andi	r20, 0x10	; 16
     620:	50 e0       	ldi	r21, 0x00	; 0
     622:	55 95       	asr	r21
     624:	47 95       	ror	r20
     626:	55 95       	asr	r21
     628:	47 95       	ror	r20
     62a:	55 95       	asr	r21
     62c:	47 95       	ror	r20
     62e:	55 95       	asr	r21
     630:	47 95       	ror	r20
     632:	64 e0       	ldi	r22, 0x04	; 4
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	0e 94 ad 01 	call	0x35a	; 0x35a <GPIO_writePin>
     63a:	4c 2f       	mov	r20, r28
     63c:	40 72       	andi	r20, 0x20	; 32
     63e:	50 e0       	ldi	r21, 0x00	; 0
     640:	55 95       	asr	r21
     642:	47 95       	ror	r20
     644:	55 95       	asr	r21
     646:	47 95       	ror	r20
     648:	55 95       	asr	r21
     64a:	47 95       	ror	r20
     64c:	55 95       	asr	r21
     64e:	47 95       	ror	r20
     650:	55 95       	asr	r21
     652:	47 95       	ror	r20
     654:	65 e0       	ldi	r22, 0x05	; 5
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	0e 94 ad 01 	call	0x35a	; 0x35a <GPIO_writePin>
     65c:	4c 2f       	mov	r20, r28
     65e:	40 74       	andi	r20, 0x40	; 64
     660:	50 e0       	ldi	r21, 0x00	; 0
     662:	04 2e       	mov	r0, r20
     664:	45 2f       	mov	r20, r21
     666:	00 0c       	add	r0, r0
     668:	44 1f       	adc	r20, r20
     66a:	55 0b       	sbc	r21, r21
     66c:	00 0c       	add	r0, r0
     66e:	44 1f       	adc	r20, r20
     670:	55 1f       	adc	r21, r21
     672:	66 e0       	ldi	r22, 0x06	; 6
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	0e 94 ad 01 	call	0x35a	; 0x35a <GPIO_writePin>
     67a:	4c 2f       	mov	r20, r28
     67c:	44 1f       	adc	r20, r20
     67e:	44 27       	eor	r20, r20
     680:	44 1f       	adc	r20, r20
     682:	67 e0       	ldi	r22, 0x07	; 7
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	0e 94 ad 01 	call	0x35a	; 0x35a <GPIO_writePin>
     68a:	89 ef       	ldi	r24, 0xF9	; 249
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	01 97       	sbiw	r24, 0x01	; 1
     690:	f1 f7       	brne	.-4      	; 0x68e <LCD_sendCommand+0xb8>
     692:	00 c0       	rjmp	.+0      	; 0x694 <LCD_sendCommand+0xbe>
     694:	00 00       	nop
     696:	40 e0       	ldi	r20, 0x00	; 0
     698:	61 e0       	ldi	r22, 0x01	; 1
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	0e 94 ad 01 	call	0x35a	; 0x35a <GPIO_writePin>
     6a0:	89 ef       	ldi	r24, 0xF9	; 249
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	01 97       	sbiw	r24, 0x01	; 1
     6a6:	f1 f7       	brne	.-4      	; 0x6a4 <LCD_sendCommand+0xce>
     6a8:	00 c0       	rjmp	.+0      	; 0x6aa <LCD_sendCommand+0xd4>
     6aa:	00 00       	nop
     6ac:	41 e0       	ldi	r20, 0x01	; 1
     6ae:	61 e0       	ldi	r22, 0x01	; 1
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	0e 94 ad 01 	call	0x35a	; 0x35a <GPIO_writePin>
     6b6:	89 ef       	ldi	r24, 0xF9	; 249
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	01 97       	sbiw	r24, 0x01	; 1
     6bc:	f1 f7       	brne	.-4      	; 0x6ba <LCD_sendCommand+0xe4>
     6be:	00 c0       	rjmp	.+0      	; 0x6c0 <LCD_sendCommand+0xea>
     6c0:	00 00       	nop
     6c2:	4c 2f       	mov	r20, r28
     6c4:	41 70       	andi	r20, 0x01	; 1
     6c6:	64 e0       	ldi	r22, 0x04	; 4
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	0e 94 ad 01 	call	0x35a	; 0x35a <GPIO_writePin>
     6ce:	4c 2f       	mov	r20, r28
     6d0:	42 70       	andi	r20, 0x02	; 2
     6d2:	50 e0       	ldi	r21, 0x00	; 0
     6d4:	55 95       	asr	r21
     6d6:	47 95       	ror	r20
     6d8:	65 e0       	ldi	r22, 0x05	; 5
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	0e 94 ad 01 	call	0x35a	; 0x35a <GPIO_writePin>
     6e0:	4c 2f       	mov	r20, r28
     6e2:	44 70       	andi	r20, 0x04	; 4
     6e4:	50 e0       	ldi	r21, 0x00	; 0
     6e6:	55 95       	asr	r21
     6e8:	47 95       	ror	r20
     6ea:	55 95       	asr	r21
     6ec:	47 95       	ror	r20
     6ee:	66 e0       	ldi	r22, 0x06	; 6
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	0e 94 ad 01 	call	0x35a	; 0x35a <GPIO_writePin>
     6f6:	c8 70       	andi	r28, 0x08	; 8
     6f8:	4c 2f       	mov	r20, r28
     6fa:	50 e0       	ldi	r21, 0x00	; 0
     6fc:	55 95       	asr	r21
     6fe:	47 95       	ror	r20
     700:	55 95       	asr	r21
     702:	47 95       	ror	r20
     704:	55 95       	asr	r21
     706:	47 95       	ror	r20
     708:	67 e0       	ldi	r22, 0x07	; 7
     70a:	81 e0       	ldi	r24, 0x01	; 1
     70c:	0e 94 ad 01 	call	0x35a	; 0x35a <GPIO_writePin>
     710:	89 ef       	ldi	r24, 0xF9	; 249
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	01 97       	sbiw	r24, 0x01	; 1
     716:	f1 f7       	brne	.-4      	; 0x714 <LCD_sendCommand+0x13e>
     718:	00 c0       	rjmp	.+0      	; 0x71a <LCD_sendCommand+0x144>
     71a:	00 00       	nop
     71c:	40 e0       	ldi	r20, 0x00	; 0
     71e:	61 e0       	ldi	r22, 0x01	; 1
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	0e 94 ad 01 	call	0x35a	; 0x35a <GPIO_writePin>
     726:	89 ef       	ldi	r24, 0xF9	; 249
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	01 97       	sbiw	r24, 0x01	; 1
     72c:	f1 f7       	brne	.-4      	; 0x72a <LCD_sendCommand+0x154>
     72e:	00 c0       	rjmp	.+0      	; 0x730 <LCD_sendCommand+0x15a>
     730:	00 00       	nop
     732:	41 e0       	ldi	r20, 0x01	; 1
     734:	61 e0       	ldi	r22, 0x01	; 1
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	0e 94 ad 01 	call	0x35a	; 0x35a <GPIO_writePin>
     73c:	89 ef       	ldi	r24, 0xF9	; 249
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	01 97       	sbiw	r24, 0x01	; 1
     742:	f1 f7       	brne	.-4      	; 0x740 <LCD_sendCommand+0x16a>
     744:	00 c0       	rjmp	.+0      	; 0x746 <LCD_sendCommand+0x170>
     746:	00 00       	nop
     748:	cf 91       	pop	r28
     74a:	08 95       	ret

0000074c <LCD_init>:
     74c:	41 e0       	ldi	r20, 0x01	; 1
     74e:	61 e0       	ldi	r22, 0x01	; 1
     750:	80 e0       	ldi	r24, 0x00	; 0
     752:	0e 94 3a 01 	call	0x274	; 0x274 <GPIO_setupPinDirection>
     756:	41 e0       	ldi	r20, 0x01	; 1
     758:	61 e0       	ldi	r22, 0x01	; 1
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	0e 94 3a 01 	call	0x274	; 0x274 <GPIO_setupPinDirection>
     760:	41 e0       	ldi	r20, 0x01	; 1
     762:	62 e0       	ldi	r22, 0x02	; 2
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	0e 94 3a 01 	call	0x274	; 0x274 <GPIO_setupPinDirection>
     76a:	87 e8       	ldi	r24, 0x87	; 135
     76c:	93 e1       	ldi	r25, 0x13	; 19
     76e:	01 97       	sbiw	r24, 0x01	; 1
     770:	f1 f7       	brne	.-4      	; 0x76e <LCD_init+0x22>
     772:	00 c0       	rjmp	.+0      	; 0x774 <LCD_init+0x28>
     774:	00 00       	nop
     776:	41 e0       	ldi	r20, 0x01	; 1
     778:	64 e0       	ldi	r22, 0x04	; 4
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	0e 94 3a 01 	call	0x274	; 0x274 <GPIO_setupPinDirection>
     780:	41 e0       	ldi	r20, 0x01	; 1
     782:	65 e0       	ldi	r22, 0x05	; 5
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	0e 94 3a 01 	call	0x274	; 0x274 <GPIO_setupPinDirection>
     78a:	41 e0       	ldi	r20, 0x01	; 1
     78c:	66 e0       	ldi	r22, 0x06	; 6
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	0e 94 3a 01 	call	0x274	; 0x274 <GPIO_setupPinDirection>
     794:	41 e0       	ldi	r20, 0x01	; 1
     796:	67 e0       	ldi	r22, 0x07	; 7
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	0e 94 3a 01 	call	0x274	; 0x274 <GPIO_setupPinDirection>
     79e:	83 e3       	ldi	r24, 0x33	; 51
     7a0:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <LCD_sendCommand>
     7a4:	82 e3       	ldi	r24, 0x32	; 50
     7a6:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <LCD_sendCommand>
     7aa:	88 e2       	ldi	r24, 0x28	; 40
     7ac:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <LCD_sendCommand>
     7b0:	8c e0       	ldi	r24, 0x0C	; 12
     7b2:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <LCD_sendCommand>
     7b6:	81 e0       	ldi	r24, 0x01	; 1
     7b8:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <LCD_sendCommand>
     7bc:	08 95       	ret

000007be <LCD_displayCharacter>:
     7be:	cf 93       	push	r28
     7c0:	c8 2f       	mov	r28, r24
     7c2:	41 e0       	ldi	r20, 0x01	; 1
     7c4:	61 e0       	ldi	r22, 0x01	; 1
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	0e 94 ad 01 	call	0x35a	; 0x35a <GPIO_writePin>
     7cc:	89 ef       	ldi	r24, 0xF9	; 249
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	01 97       	sbiw	r24, 0x01	; 1
     7d2:	f1 f7       	brne	.-4      	; 0x7d0 <LCD_displayCharacter+0x12>
     7d4:	00 c0       	rjmp	.+0      	; 0x7d6 <LCD_displayCharacter+0x18>
     7d6:	00 00       	nop
     7d8:	41 e0       	ldi	r20, 0x01	; 1
     7da:	61 e0       	ldi	r22, 0x01	; 1
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	0e 94 ad 01 	call	0x35a	; 0x35a <GPIO_writePin>
     7e2:	89 ef       	ldi	r24, 0xF9	; 249
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	01 97       	sbiw	r24, 0x01	; 1
     7e8:	f1 f7       	brne	.-4      	; 0x7e6 <LCD_displayCharacter+0x28>
     7ea:	00 c0       	rjmp	.+0      	; 0x7ec <LCD_displayCharacter+0x2e>
     7ec:	00 00       	nop
     7ee:	4c 2f       	mov	r20, r28
     7f0:	40 71       	andi	r20, 0x10	; 16
     7f2:	50 e0       	ldi	r21, 0x00	; 0
     7f4:	55 95       	asr	r21
     7f6:	47 95       	ror	r20
     7f8:	55 95       	asr	r21
     7fa:	47 95       	ror	r20
     7fc:	55 95       	asr	r21
     7fe:	47 95       	ror	r20
     800:	55 95       	asr	r21
     802:	47 95       	ror	r20
     804:	64 e0       	ldi	r22, 0x04	; 4
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	0e 94 ad 01 	call	0x35a	; 0x35a <GPIO_writePin>
     80c:	4c 2f       	mov	r20, r28
     80e:	40 72       	andi	r20, 0x20	; 32
     810:	50 e0       	ldi	r21, 0x00	; 0
     812:	55 95       	asr	r21
     814:	47 95       	ror	r20
     816:	55 95       	asr	r21
     818:	47 95       	ror	r20
     81a:	55 95       	asr	r21
     81c:	47 95       	ror	r20
     81e:	55 95       	asr	r21
     820:	47 95       	ror	r20
     822:	55 95       	asr	r21
     824:	47 95       	ror	r20
     826:	65 e0       	ldi	r22, 0x05	; 5
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	0e 94 ad 01 	call	0x35a	; 0x35a <GPIO_writePin>
     82e:	4c 2f       	mov	r20, r28
     830:	40 74       	andi	r20, 0x40	; 64
     832:	50 e0       	ldi	r21, 0x00	; 0
     834:	04 2e       	mov	r0, r20
     836:	45 2f       	mov	r20, r21
     838:	00 0c       	add	r0, r0
     83a:	44 1f       	adc	r20, r20
     83c:	55 0b       	sbc	r21, r21
     83e:	00 0c       	add	r0, r0
     840:	44 1f       	adc	r20, r20
     842:	55 1f       	adc	r21, r21
     844:	66 e0       	ldi	r22, 0x06	; 6
     846:	81 e0       	ldi	r24, 0x01	; 1
     848:	0e 94 ad 01 	call	0x35a	; 0x35a <GPIO_writePin>
     84c:	4c 2f       	mov	r20, r28
     84e:	44 1f       	adc	r20, r20
     850:	44 27       	eor	r20, r20
     852:	44 1f       	adc	r20, r20
     854:	67 e0       	ldi	r22, 0x07	; 7
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	0e 94 ad 01 	call	0x35a	; 0x35a <GPIO_writePin>
     85c:	89 ef       	ldi	r24, 0xF9	; 249
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	01 97       	sbiw	r24, 0x01	; 1
     862:	f1 f7       	brne	.-4      	; 0x860 <__stack+0x1>
     864:	00 c0       	rjmp	.+0      	; 0x866 <__stack+0x7>
     866:	00 00       	nop
     868:	40 e0       	ldi	r20, 0x00	; 0
     86a:	61 e0       	ldi	r22, 0x01	; 1
     86c:	81 e0       	ldi	r24, 0x01	; 1
     86e:	0e 94 ad 01 	call	0x35a	; 0x35a <GPIO_writePin>
     872:	89 ef       	ldi	r24, 0xF9	; 249
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	01 97       	sbiw	r24, 0x01	; 1
     878:	f1 f7       	brne	.-4      	; 0x876 <__stack+0x17>
     87a:	00 c0       	rjmp	.+0      	; 0x87c <__stack+0x1d>
     87c:	00 00       	nop
     87e:	41 e0       	ldi	r20, 0x01	; 1
     880:	61 e0       	ldi	r22, 0x01	; 1
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	0e 94 ad 01 	call	0x35a	; 0x35a <GPIO_writePin>
     888:	89 ef       	ldi	r24, 0xF9	; 249
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	01 97       	sbiw	r24, 0x01	; 1
     88e:	f1 f7       	brne	.-4      	; 0x88c <__stack+0x2d>
     890:	00 c0       	rjmp	.+0      	; 0x892 <__stack+0x33>
     892:	00 00       	nop
     894:	4c 2f       	mov	r20, r28
     896:	41 70       	andi	r20, 0x01	; 1
     898:	64 e0       	ldi	r22, 0x04	; 4
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	0e 94 ad 01 	call	0x35a	; 0x35a <GPIO_writePin>
     8a0:	4c 2f       	mov	r20, r28
     8a2:	42 70       	andi	r20, 0x02	; 2
     8a4:	50 e0       	ldi	r21, 0x00	; 0
     8a6:	55 95       	asr	r21
     8a8:	47 95       	ror	r20
     8aa:	65 e0       	ldi	r22, 0x05	; 5
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	0e 94 ad 01 	call	0x35a	; 0x35a <GPIO_writePin>
     8b2:	4c 2f       	mov	r20, r28
     8b4:	44 70       	andi	r20, 0x04	; 4
     8b6:	50 e0       	ldi	r21, 0x00	; 0
     8b8:	55 95       	asr	r21
     8ba:	47 95       	ror	r20
     8bc:	55 95       	asr	r21
     8be:	47 95       	ror	r20
     8c0:	66 e0       	ldi	r22, 0x06	; 6
     8c2:	81 e0       	ldi	r24, 0x01	; 1
     8c4:	0e 94 ad 01 	call	0x35a	; 0x35a <GPIO_writePin>
     8c8:	c8 70       	andi	r28, 0x08	; 8
     8ca:	4c 2f       	mov	r20, r28
     8cc:	50 e0       	ldi	r21, 0x00	; 0
     8ce:	55 95       	asr	r21
     8d0:	47 95       	ror	r20
     8d2:	55 95       	asr	r21
     8d4:	47 95       	ror	r20
     8d6:	55 95       	asr	r21
     8d8:	47 95       	ror	r20
     8da:	67 e0       	ldi	r22, 0x07	; 7
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	0e 94 ad 01 	call	0x35a	; 0x35a <GPIO_writePin>
     8e2:	89 ef       	ldi	r24, 0xF9	; 249
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	01 97       	sbiw	r24, 0x01	; 1
     8e8:	f1 f7       	brne	.-4      	; 0x8e6 <__stack+0x87>
     8ea:	00 c0       	rjmp	.+0      	; 0x8ec <__stack+0x8d>
     8ec:	00 00       	nop
     8ee:	40 e0       	ldi	r20, 0x00	; 0
     8f0:	61 e0       	ldi	r22, 0x01	; 1
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	0e 94 ad 01 	call	0x35a	; 0x35a <GPIO_writePin>
     8f8:	89 ef       	ldi	r24, 0xF9	; 249
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	01 97       	sbiw	r24, 0x01	; 1
     8fe:	f1 f7       	brne	.-4      	; 0x8fc <__stack+0x9d>
     900:	00 c0       	rjmp	.+0      	; 0x902 <__stack+0xa3>
     902:	00 00       	nop
     904:	41 e0       	ldi	r20, 0x01	; 1
     906:	61 e0       	ldi	r22, 0x01	; 1
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	0e 94 ad 01 	call	0x35a	; 0x35a <GPIO_writePin>
     90e:	89 ef       	ldi	r24, 0xF9	; 249
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	f1 f7       	brne	.-4      	; 0x912 <__stack+0xb3>
     916:	00 c0       	rjmp	.+0      	; 0x918 <__stack+0xb9>
     918:	00 00       	nop
     91a:	cf 91       	pop	r28
     91c:	08 95       	ret

0000091e <LCD_displayString>:
     91e:	cf 93       	push	r28
     920:	df 93       	push	r29
     922:	ec 01       	movw	r28, r24
     924:	03 c0       	rjmp	.+6      	; 0x92c <LCD_displayString+0xe>
     926:	0e 94 df 03 	call	0x7be	; 0x7be <LCD_displayCharacter>
     92a:	21 96       	adiw	r28, 0x01	; 1
     92c:	88 81       	ld	r24, Y
     92e:	81 11       	cpse	r24, r1
     930:	fa cf       	rjmp	.-12     	; 0x926 <LCD_displayString+0x8>
     932:	df 91       	pop	r29
     934:	cf 91       	pop	r28
     936:	08 95       	ret

00000938 <LCD_moveCursor>:
     938:	81 30       	cpi	r24, 0x01	; 1
     93a:	31 f0       	breq	.+12     	; 0x948 <LCD_moveCursor+0x10>
     93c:	70 f0       	brcs	.+28     	; 0x95a <LCD_moveCursor+0x22>
     93e:	82 30       	cpi	r24, 0x02	; 2
     940:	31 f0       	breq	.+12     	; 0x94e <LCD_moveCursor+0x16>
     942:	83 30       	cpi	r24, 0x03	; 3
     944:	39 f0       	breq	.+14     	; 0x954 <LCD_moveCursor+0x1c>
     946:	0a c0       	rjmp	.+20     	; 0x95c <LCD_moveCursor+0x24>
     948:	90 e4       	ldi	r25, 0x40	; 64
     94a:	96 0f       	add	r25, r22
     94c:	07 c0       	rjmp	.+14     	; 0x95c <LCD_moveCursor+0x24>
     94e:	90 e1       	ldi	r25, 0x10	; 16
     950:	96 0f       	add	r25, r22
     952:	04 c0       	rjmp	.+8      	; 0x95c <LCD_moveCursor+0x24>
     954:	90 e5       	ldi	r25, 0x50	; 80
     956:	96 0f       	add	r25, r22
     958:	01 c0       	rjmp	.+2      	; 0x95c <LCD_moveCursor+0x24>
     95a:	96 2f       	mov	r25, r22
     95c:	89 2f       	mov	r24, r25
     95e:	80 68       	ori	r24, 0x80	; 128
     960:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <LCD_sendCommand>
     964:	08 95       	ret

00000966 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void){
	LCD_sendCommand(LCD_CLEAR_SCREEN);
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <LCD_sendCommand>
     96c:	08 95       	ret

0000096e <LED_init>:
void LED_init(void) {
	/*
	 * Setting up PINs direction for the Car and Pedestrian's Three LEDs
	 * as OUTPUT pins
	 */
	GPIO_setupPinDirection(PORTA_ID, 2, PIN_OUTPUT);
     96e:	41 e0       	ldi	r20, 0x01	; 1
     970:	62 e0       	ldi	r22, 0x02	; 2
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	0e 94 3a 01 	call	0x274	; 0x274 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID, 6, PIN_OUTPUT);
     978:	41 e0       	ldi	r20, 0x01	; 1
     97a:	66 e0       	ldi	r22, 0x06	; 6
     97c:	82 e0       	ldi	r24, 0x02	; 2
     97e:	0e 94 3a 01 	call	0x274	; 0x274 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID, 7, PIN_OUTPUT);
     982:	41 e0       	ldi	r20, 0x01	; 1
     984:	67 e0       	ldi	r22, 0x07	; 7
     986:	82 e0       	ldi	r24, 0x02	; 2
     988:	0e 94 3a 01 	call	0x274	; 0x274 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTD_ID, 3, PIN_OUTPUT);
     98c:	41 e0       	ldi	r20, 0x01	; 1
     98e:	63 e0       	ldi	r22, 0x03	; 3
     990:	83 e0       	ldi	r24, 0x03	; 3
     992:	0e 94 3a 01 	call	0x274	; 0x274 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTD_ID, 4, PIN_OUTPUT);
     996:	41 e0       	ldi	r20, 0x01	; 1
     998:	64 e0       	ldi	r22, 0x04	; 4
     99a:	83 e0       	ldi	r24, 0x03	; 3
     99c:	0e 94 3a 01 	call	0x274	; 0x274 <GPIO_setupPinDirection>
     9a0:	08 95       	ret

000009a2 <LED_OFF>:
void LED_OFF(uint8_t PortID, uint8_t PinID) {
	/*
	 * Writing LOGIC LOW(0) on the LED specified by the called
	 * function
	 */
	GPIO_writePin(PortID, PinID, LOGIC_LOW);
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	0e 94 ad 01 	call	0x35a	; 0x35a <GPIO_writePin>
     9a8:	08 95       	ret

000009aa <LED_ON>:
void LED_ON(uint8_t PortID, uint8_t PinID) {
	/*
	 * Writing LOGIC High(1) on the LED specified by the called
	 * function
	 */
	GPIO_writePin(PortID, PinID, LOGIC_HIGH);
     9aa:	41 e0       	ldi	r20, 0x01	; 1
     9ac:	0e 94 ad 01 	call	0x35a	; 0x35a <GPIO_writePin>
     9b0:	08 95       	ret

000009b2 <LM35_getTemperature>:
	uint8_t temp_value = 0;

	uint16_t adc_value = 0;

	/* Read ADC channel where the temperature sensor is connected */
	adc_value = ADC_readChannel(SENSOR_CHANNEL_ID);
     9b2:	83 e0       	ldi	r24, 0x03	; 3
     9b4:	0e 94 5d 00 	call	0xba	; 0xba <ADC_readChannel>

	/* Calculate the temperature from the ADC value*/
	temp_value = (uint8_t)(((uint32_t)adc_value*SENSOR_MAX_TEMPERATURE*ADC_REF_VOLT_VALUE)/(ADC_MAXIMUM_VALUE*SENSOR_MAX_VOLT_VALUE));
     9b8:	9c 01       	movw	r18, r24
     9ba:	ae ee       	ldi	r26, 0xEE	; 238
     9bc:	b2 e0       	ldi	r27, 0x02	; 2
     9be:	0e 94 55 10 	call	0x20aa	; 0x20aa <__umulhisi3>
     9c2:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <__floatunsisf>
     9c6:	20 e0       	ldi	r18, 0x00	; 0
     9c8:	30 ed       	ldi	r19, 0xD0	; 208
     9ca:	4f eb       	ldi	r20, 0xBF	; 191
     9cc:	54 e4       	ldi	r21, 0x44	; 68
     9ce:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__divsf3>
     9d2:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <__fixunssfsi>
     9d6:	86 2f       	mov	r24, r22

	return temp_value;
}
     9d8:	08 95       	ret

000009da <program_init>:
}

uint8_t program_init(void)
{
	uint8_t user_type;
	UART_sendString("welcome...!\r");
     9da:	81 e6       	ldi	r24, 0x61	; 97
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9e2:	2f e3       	ldi	r18, 0x3F	; 63
     9e4:	8d e0       	ldi	r24, 0x0D	; 13
     9e6:	93 e0       	ldi	r25, 0x03	; 3
     9e8:	21 50       	subi	r18, 0x01	; 1
     9ea:	80 40       	sbci	r24, 0x00	; 0
     9ec:	90 40       	sbci	r25, 0x00	; 0
     9ee:	e1 f7       	brne	.-8      	; 0x9e8 <program_init+0xe>
     9f0:	00 c0       	rjmp	.+0      	; 0x9f2 <program_init+0x18>
     9f2:	00 00       	nop
	_delay_ms(1000);
	UART_sendString("************************************* \r");
     9f4:	8e e6       	ldi	r24, 0x6E	; 110
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString("who are you? \r");
     9fc:	86 e9       	ldi	r24, 0x96	; 150
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString("1:admin \r");
     a04:	85 ea       	ldi	r24, 0xA5	; 165
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString("2:user \r");
     a0c:	8f ea       	ldi	r24, 0xAF	; 175
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	user_type = UART_recieveByte();
     a14:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <UART_recieveByte>
	type = user_type;
     a18:	80 93 d9 05 	sts	0x05D9, r24	; 0x8005d9 <type>
	return user_type;
}
     a1c:	08 95       	ret

00000a1e <admin_prog_init>:

void admin_prog_init(void)
{
     a1e:	cf 93       	push	r28
	uint8_t i=0,j=0;
     a20:	c0 e0       	ldi	r28, 0x00	; 0
	while (i<4)
     a22:	0e c0       	rjmp	.+28     	; 0xa40 <admin_prog_init+0x22>
	{
		while(!EEPROM_writeByte(admin_name_address+i,'1'));
     a24:	61 e3       	ldi	r22, 0x31	; 49
     a26:	8c 2f       	mov	r24, r28
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	0e 94 b1 00 	call	0x162	; 0x162 <EEPROM_writeByte>
     a2e:	88 23       	and	r24, r24
     a30:	c9 f3       	breq	.-14     	; 0xa24 <admin_prog_init+0x6>
		i++;
     a32:	cf 5f       	subi	r28, 0xFF	; 255
     a34:	83 ec       	ldi	r24, 0xC3	; 195
     a36:	99 e0       	ldi	r25, 0x09	; 9
     a38:	01 97       	sbiw	r24, 0x01	; 1
     a3a:	f1 f7       	brne	.-4      	; 0xa38 <admin_prog_init+0x1a>
     a3c:	00 c0       	rjmp	.+0      	; 0xa3e <admin_prog_init+0x20>
     a3e:	00 00       	nop
}

void admin_prog_init(void)
{
	uint8_t i=0,j=0;
	while (i<4)
     a40:	c4 30       	cpi	r28, 0x04	; 4
     a42:	80 f3       	brcs	.-32     	; 0xa24 <admin_prog_init+0x6>
     a44:	c0 e0       	ldi	r28, 0x00	; 0
     a46:	0f c0       	rjmp	.+30     	; 0xa66 <admin_prog_init+0x48>
		i++;
		_delay_ms(10);
	}
	while (j<4)
	{
		while(!EEPROM_writeByte(admin_pass_address+j,'0'));
     a48:	8c 2f       	mov	r24, r28
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	60 e3       	ldi	r22, 0x30	; 48
     a4e:	40 96       	adiw	r24, 0x10	; 16
     a50:	0e 94 b1 00 	call	0x162	; 0x162 <EEPROM_writeByte>
     a54:	88 23       	and	r24, r24
     a56:	c1 f3       	breq	.-16     	; 0xa48 <admin_prog_init+0x2a>
		j++;
     a58:	cf 5f       	subi	r28, 0xFF	; 255
     a5a:	83 ec       	ldi	r24, 0xC3	; 195
     a5c:	99 e0       	ldi	r25, 0x09	; 9
     a5e:	01 97       	sbiw	r24, 0x01	; 1
     a60:	f1 f7       	brne	.-4      	; 0xa5e <admin_prog_init+0x40>
     a62:	00 c0       	rjmp	.+0      	; 0xa64 <admin_prog_init+0x46>
     a64:	00 00       	nop
	{
		while(!EEPROM_writeByte(admin_name_address+i,'1'));
		i++;
		_delay_ms(10);
	}
	while (j<4)
     a66:	c4 30       	cpi	r28, 0x04	; 4
     a68:	78 f3       	brcs	.-34     	; 0xa48 <admin_prog_init+0x2a>
	{
		while(!EEPROM_writeByte(admin_pass_address+j,'0'));
		j++;
		_delay_ms(10);
	}
	UART_sendString("you have 3 trials \r");
     a6a:	88 eb       	ldi	r24, 0xB8	; 184
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
}
     a72:	cf 91       	pop	r28
     a74:	08 95       	ret

00000a76 <admin_info>:

void admin_info(void)
{
     a76:	0f 93       	push	r16
     a78:	1f 93       	push	r17
     a7a:	cf 93       	push	r28
	uint8_t i=0,j=0;
	UART_sendString("enter admin name \r");
     a7c:	8c ec       	ldi	r24, 0xCC	; 204
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString("admin name: ");
     a84:	8f ed       	ldi	r24, 0xDF	; 223
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString("you have 3 trials \r");
}

void admin_info(void)
{
	uint8_t i=0,j=0;
     a8c:	c0 e0       	ldi	r28, 0x00	; 0
	UART_sendString("enter admin name \r");
	UART_sendString("admin name: ");
	while (i<4)
     a8e:	0b c0       	rjmp	.+22     	; 0xaa6 <admin_info+0x30>
	{
		admin_name[i]=UART_recieveByte();
     a90:	0c 2f       	mov	r16, r28
     a92:	10 e0       	ldi	r17, 0x00	; 0
     a94:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <UART_recieveByte>
     a98:	f8 01       	movw	r30, r16
     a9a:	e6 50       	subi	r30, 0x06	; 6
     a9c:	fa 4f       	sbci	r31, 0xFA	; 250
     a9e:	80 83       	st	Z, r24
		UART_sendByte(admin_name[i]);
     aa0:	0e 94 76 0e 	call	0x1cec	; 0x1cec <UART_sendByte>
		i++;
     aa4:	cf 5f       	subi	r28, 0xFF	; 255
void admin_info(void)
{
	uint8_t i=0,j=0;
	UART_sendString("enter admin name \r");
	UART_sendString("admin name: ");
	while (i<4)
     aa6:	c4 30       	cpi	r28, 0x04	; 4
     aa8:	98 f3       	brcs	.-26     	; 0xa90 <admin_info+0x1a>
	{
		admin_name[i]=UART_recieveByte();
		UART_sendByte(admin_name[i]);
		i++;
	}
	UART_sendString("\r");
     aaa:	82 e5       	ldi	r24, 0x52	; 82
     aac:	95 e0       	ldi	r25, 0x05	; 5
     aae:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString("enter admin password \r");
     ab2:	8c ee       	ldi	r24, 0xEC	; 236
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString("password: ");
     aba:	80 ea       	ldi	r24, 0xA0	; 160
     abc:	91 e0       	ldi	r25, 0x01	; 1
     abe:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString("you have 3 trials \r");
}

void admin_info(void)
{
	uint8_t i=0,j=0;
     ac2:	c0 e0       	ldi	r28, 0x00	; 0
		i++;
	}
	UART_sendString("\r");
	UART_sendString("enter admin password \r");
	UART_sendString("password: ");
	while (j<4)
     ac4:	0b c0       	rjmp	.+22     	; 0xadc <admin_info+0x66>
	{
		admin_pass[j]=UART_recieveByte();
     ac6:	0c 2f       	mov	r16, r28
     ac8:	10 e0       	ldi	r17, 0x00	; 0
     aca:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <UART_recieveByte>
     ace:	f8 01       	movw	r30, r16
     ad0:	e2 50       	subi	r30, 0x02	; 2
     ad2:	fa 4f       	sbci	r31, 0xFA	; 250
     ad4:	80 83       	st	Z, r24
		UART_sendByte(admin_pass[j]);
     ad6:	0e 94 76 0e 	call	0x1cec	; 0x1cec <UART_sendByte>
		j++;
     ada:	cf 5f       	subi	r28, 0xFF	; 255
		i++;
	}
	UART_sendString("\r");
	UART_sendString("enter admin password \r");
	UART_sendString("password: ");
	while (j<4)
     adc:	c4 30       	cpi	r28, 0x04	; 4
     ade:	98 f3       	brcs	.-26     	; 0xac6 <admin_info+0x50>
	{
		admin_pass[j]=UART_recieveByte();
		UART_sendByte(admin_pass[j]);
		j++;
	}
	UART_sendString("\r");
     ae0:	82 e5       	ldi	r24, 0x52	; 82
     ae2:	95 e0       	ldi	r25, 0x05	; 5
     ae4:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
}
     ae8:	cf 91       	pop	r28
     aea:	1f 91       	pop	r17
     aec:	0f 91       	pop	r16
     aee:	08 95       	ret

00000af0 <compare_info>:

uint8_t compare_info(void)
{
     af0:	cf 93       	push	r28
	uint8_t i=0,j=0,k=0;
     af2:	c0 e0       	ldi	r28, 0x00	; 0
	while(j<4)
     af4:	10 c0       	rjmp	.+32     	; 0xb16 <compare_info+0x26>
	{
		while(!EEPROM_readByte(admin_name_address+j,receved_name+j));
     af6:	8c 2f       	mov	r24, r28
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	bc 01       	movw	r22, r24
     afc:	6e 5f       	subi	r22, 0xFE	; 254
     afe:	79 4f       	sbci	r23, 0xF9	; 249
     b00:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <EEPROM_readByte>
     b04:	88 23       	and	r24, r24
     b06:	b9 f3       	breq	.-18     	; 0xaf6 <compare_info+0x6>
		j++;
     b08:	cf 5f       	subi	r28, 0xFF	; 255
     b0a:	83 ec       	ldi	r24, 0xC3	; 195
     b0c:	99 e0       	ldi	r25, 0x09	; 9
     b0e:	01 97       	sbiw	r24, 0x01	; 1
     b10:	f1 f7       	brne	.-4      	; 0xb0e <compare_info+0x1e>
     b12:	00 c0       	rjmp	.+0      	; 0xb14 <compare_info+0x24>
     b14:	00 00       	nop
}

uint8_t compare_info(void)
{
	uint8_t i=0,j=0,k=0;
	while(j<4)
     b16:	c4 30       	cpi	r28, 0x04	; 4
     b18:	70 f3       	brcs	.-36     	; 0xaf6 <compare_info+0x6>
     b1a:	c0 e0       	ldi	r28, 0x00	; 0
     b1c:	11 c0       	rjmp	.+34     	; 0xb40 <compare_info+0x50>
		j++;
		_delay_ms(10);
	}
	while (k<4)
	{
		while(!EEPROM_readByte(admin_pass_address+k,receved_pass+k));
     b1e:	8c 2f       	mov	r24, r28
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	bc 01       	movw	r22, r24
     b24:	66 5f       	subi	r22, 0xF6	; 246
     b26:	79 4f       	sbci	r23, 0xF9	; 249
     b28:	40 96       	adiw	r24, 0x10	; 16
     b2a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <EEPROM_readByte>
     b2e:	88 23       	and	r24, r24
     b30:	b1 f3       	breq	.-20     	; 0xb1e <compare_info+0x2e>
		k++;
     b32:	cf 5f       	subi	r28, 0xFF	; 255
     b34:	83 ec       	ldi	r24, 0xC3	; 195
     b36:	99 e0       	ldi	r25, 0x09	; 9
     b38:	01 97       	sbiw	r24, 0x01	; 1
     b3a:	f1 f7       	brne	.-4      	; 0xb38 <compare_info+0x48>
     b3c:	00 c0       	rjmp	.+0      	; 0xb3e <compare_info+0x4e>
     b3e:	00 00       	nop
	{
		while(!EEPROM_readByte(admin_name_address+j,receved_name+j));
		j++;
		_delay_ms(10);
	}
	while (k<4)
     b40:	c4 30       	cpi	r28, 0x04	; 4
     b42:	68 f3       	brcs	.-38     	; 0xb1e <compare_info+0x2e>
		k++;
		_delay_ms(10);
	}
	while(i<4)
	{
		if ((receved_name[i]==admin_name[i])&&(receved_pass[i]==admin_pass[i]))
     b44:	90 91 02 06 	lds	r25, 0x0602	; 0x800602 <receved_name>
     b48:	80 91 fa 05 	lds	r24, 0x05FA	; 0x8005fa <admin_name>
     b4c:	98 13       	cpse	r25, r24
     b4e:	08 c0       	rjmp	.+16     	; 0xb60 <compare_info+0x70>
     b50:	90 91 0a 06 	lds	r25, 0x060A	; 0x80060a <receved_pass>
     b54:	80 91 fe 05 	lds	r24, 0x05FE	; 0x8005fe <admin_pass>
     b58:	98 17       	cp	r25, r24
     b5a:	21 f0       	breq	.+8      	; 0xb64 <compare_info+0x74>
		{
			return 1;
		}
		else
		{
			return 0;
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	03 c0       	rjmp	.+6      	; 0xb66 <compare_info+0x76>
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	01 c0       	rjmp	.+2      	; 0xb66 <compare_info+0x76>
	}
	while(i<4)
	{
		if ((receved_name[i]==admin_name[i])&&(receved_pass[i]==admin_pass[i]))
		{
			return 1;
     b64:	81 e0       	ldi	r24, 0x01	; 1
			return 0;
			break;
		}
		i++;
	}
}
     b66:	cf 91       	pop	r28
     b68:	08 95       	ret

00000b6a <alarm_check>:

void alarm_check(void)
{
     b6a:	cf 93       	push	r28
	uint8_t check,counter=0;
     b6c:	c0 e0       	ldi	r28, 0x00	; 0
	while(counter < 3)
     b6e:	3c c0       	rjmp	.+120    	; 0xbe8 <alarm_check+0x7e>
		{
			admin_info();
     b70:	0e 94 3b 05 	call	0xa76	; 0xa76 <admin_info>
			check = compare_info();
     b74:	0e 94 78 05 	call	0xaf0	; 0xaf0 <compare_info>
			if (check ==1)
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	b1 f4       	brne	.+44     	; 0xba8 <alarm_check+0x3e>
			{
				UART_sendString(" \r");
     b7c:	81 e5       	ldi	r24, 0x51	; 81
     b7e:	95 e0       	ldi	r25, 0x05	; 5
     b80:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
				UART_sendString("welcome back... :) \r");
     b84:	83 e0       	ldi	r24, 0x03	; 3
     b86:	91 e0       	ldi	r25, 0x01	; 1
     b88:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
				UART_sendString(" \r");
     b8c:	81 e5       	ldi	r24, 0x51	; 81
     b8e:	95 e0       	ldi	r25, 0x05	; 5
     b90:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
     b94:	2f e3       	ldi	r18, 0x3F	; 63
     b96:	8d e0       	ldi	r24, 0x0D	; 13
     b98:	93 e0       	ldi	r25, 0x03	; 3
     b9a:	21 50       	subi	r18, 0x01	; 1
     b9c:	80 40       	sbci	r24, 0x00	; 0
     b9e:	90 40       	sbci	r25, 0x00	; 0
     ba0:	e1 f7       	brne	.-8      	; 0xb9a <alarm_check+0x30>
     ba2:	00 c0       	rjmp	.+0      	; 0xba4 <alarm_check+0x3a>
     ba4:	00 00       	nop
				_delay_ms(1000);
				counter=0;
				break;
     ba6:	22 c0       	rjmp	.+68     	; 0xbec <alarm_check+0x82>
			}
			else
			{
				UART_sendString("false \r");
     ba8:	88 e1       	ldi	r24, 0x18	; 24
     baa:	91 e0       	ldi	r25, 0x01	; 1
     bac:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
				counter++;
     bb0:	cf 5f       	subi	r28, 0xFF	; 255
				if (counter == 3)
     bb2:	c3 30       	cpi	r28, 0x03	; 3
     bb4:	c9 f4       	brne	.+50     	; 0xbe8 <alarm_check+0x7e>
				{
					UART_sendString("security mode... \r");
     bb6:	80 e2       	ldi	r24, 0x20	; 32
     bb8:	91 e0       	ldi	r25, 0x01	; 1
     bba:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
					GPIO_setupPinDirection(PORTA_ID,0,PIN_OUTPUT);
     bbe:	41 e0       	ldi	r20, 0x01	; 1
     bc0:	60 e0       	ldi	r22, 0x00	; 0
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	0e 94 3a 01 	call	0x274	; 0x274 <GPIO_setupPinDirection>
					UART_sendString("error :(");
     bc8:	83 e3       	ldi	r24, 0x33	; 51
     bca:	91 e0       	ldi	r25, 0x01	; 1
     bcc:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
					LCD_clearScreen();
     bd0:	0e 94 b3 04 	call	0x966	; 0x966 <LCD_clearScreen>
					LCD_displayString("security mode...");
     bd4:	8c e3       	ldi	r24, 0x3C	; 60
     bd6:	91 e0       	ldi	r25, 0x01	; 1
     bd8:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_displayString>
					while(1)
					{
						GPIO_writePin(PORTA_ID,0,LOGIC_HIGH);
     bdc:	41 e0       	ldi	r20, 0x01	; 1
     bde:	60 e0       	ldi	r22, 0x00	; 0
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	0e 94 ad 01 	call	0x35a	; 0x35a <GPIO_writePin>
     be6:	fa cf       	rjmp	.-12     	; 0xbdc <alarm_check+0x72>
}

void alarm_check(void)
{
	uint8_t check,counter=0;
	while(counter < 3)
     be8:	c3 30       	cpi	r28, 0x03	; 3
     bea:	10 f2       	brcs	.-124    	; 0xb70 <alarm_check+0x6>
						GPIO_writePin(PORTA_ID,0,LOGIC_HIGH);
					}
				}
			}
	}
}
     bec:	cf 91       	pop	r28
     bee:	08 95       	ret

00000bf0 <user_prog_init>:
		user_main_opt();
	}
}

void user_prog_init(void)
{
     bf0:	0f 93       	push	r16
     bf2:	1f 93       	push	r17
     bf4:	cf 93       	push	r28
	uint8_t i=0,j=0;
	UART_sendString("hello! \r");
     bf6:	8d e4       	ldi	r24, 0x4D	; 77
     bf8:	91 e0       	ldi	r25, 0x01	; 1
     bfa:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString("users now equal ");
     bfe:	86 e5       	ldi	r24, 0x56	; 86
     c00:	91 e0       	ldi	r25, 0x01	; 1
     c02:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendByte(user_count);
     c06:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     c0a:	0e 94 76 0e 	call	0x1cec	; 0x1cec <UART_sendByte>
	UART_sendString("\r");
     c0e:	82 e5       	ldi	r24, 0x52	; 82
     c10:	95 e0       	ldi	r25, 0x05	; 5
     c12:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString("enter user name \r");
     c16:	87 e6       	ldi	r24, 0x67	; 103
     c18:	91 e0       	ldi	r25, 0x01	; 1
     c1a:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString("user name: ");
     c1e:	89 e7       	ldi	r24, 0x79	; 121
     c20:	91 e0       	ldi	r25, 0x01	; 1
     c22:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	}
}

void user_prog_init(void)
{
	uint8_t i=0,j=0;
     c26:	c0 e0       	ldi	r28, 0x00	; 0
	UART_sendString("users now equal ");
	UART_sendByte(user_count);
	UART_sendString("\r");
	UART_sendString("enter user name \r");
	UART_sendString("user name: ");
	while (i<4)
     c28:	0b c0       	rjmp	.+22     	; 0xc40 <user_prog_init+0x50>
	{
		user_receved_name[i]=UART_recieveByte();
     c2a:	0c 2f       	mov	r16, r28
     c2c:	10 e0       	ldi	r17, 0x00	; 0
     c2e:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <UART_recieveByte>
     c32:	f8 01       	movw	r30, r16
     c34:	eb 52       	subi	r30, 0x2B	; 43
     c36:	fa 4f       	sbci	r31, 0xFA	; 250
     c38:	80 83       	st	Z, r24
		UART_sendByte(user_receved_name[i]);
     c3a:	0e 94 76 0e 	call	0x1cec	; 0x1cec <UART_sendByte>
		i++;
     c3e:	cf 5f       	subi	r28, 0xFF	; 255
	UART_sendString("users now equal ");
	UART_sendByte(user_count);
	UART_sendString("\r");
	UART_sendString("enter user name \r");
	UART_sendString("user name: ");
	while (i<4)
     c40:	c4 30       	cpi	r28, 0x04	; 4
     c42:	98 f3       	brcs	.-26     	; 0xc2a <user_prog_init+0x3a>
	{
		user_receved_name[i]=UART_recieveByte();
		UART_sendByte(user_receved_name[i]);
		i++;
	}
	UART_sendString("\r");
     c44:	82 e5       	ldi	r24, 0x52	; 82
     c46:	95 e0       	ldi	r25, 0x05	; 5
     c48:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString("enter user password \r");
     c4c:	85 e8       	ldi	r24, 0x85	; 133
     c4e:	91 e0       	ldi	r25, 0x01	; 1
     c50:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString("user password: ");
     c54:	8b e9       	ldi	r24, 0x9B	; 155
     c56:	91 e0       	ldi	r25, 0x01	; 1
     c58:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	}
}

void user_prog_init(void)
{
	uint8_t i=0,j=0;
     c5c:	c0 e0       	ldi	r28, 0x00	; 0
		i++;
	}
	UART_sendString("\r");
	UART_sendString("enter user password \r");
	UART_sendString("user password: ");
	while (j<4)
     c5e:	0b c0       	rjmp	.+22     	; 0xc76 <user_prog_init+0x86>
	{
		user_receved_pass[j]=UART_recieveByte();
     c60:	0c 2f       	mov	r16, r28
     c62:	10 e0       	ldi	r17, 0x00	; 0
     c64:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <UART_recieveByte>
     c68:	f8 01       	movw	r30, r16
     c6a:	ea 51       	subi	r30, 0x1A	; 26
     c6c:	fa 4f       	sbci	r31, 0xFA	; 250
     c6e:	80 83       	st	Z, r24
		UART_sendByte(user_receved_pass[j]);
     c70:	0e 94 76 0e 	call	0x1cec	; 0x1cec <UART_sendByte>
		j++;
     c74:	cf 5f       	subi	r28, 0xFF	; 255
		i++;
	}
	UART_sendString("\r");
	UART_sendString("enter user password \r");
	UART_sendString("user password: ");
	while (j<4)
     c76:	c4 30       	cpi	r28, 0x04	; 4
     c78:	98 f3       	brcs	.-26     	; 0xc60 <user_prog_init+0x70>
	{
		user_receved_pass[j]=UART_recieveByte();
		UART_sendByte(user_receved_pass[j]);
		j++;
	}
	UART_sendString("\r");
     c7a:	82 e5       	ldi	r24, 0x52	; 82
     c7c:	95 e0       	ldi	r25, 0x05	; 5
     c7e:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
}
     c82:	cf 91       	pop	r28
     c84:	1f 91       	pop	r17
     c86:	0f 91       	pop	r16
     c88:	08 95       	ret

00000c8a <user_info>:

void user_info(void)
{
     c8a:	cf 93       	push	r28
	uint8_t i=0,j=0,k=0;
     c8c:	c0 e0       	ldi	r28, 0x00	; 0
	while(j<4)
     c8e:	16 c0       	rjmp	.+44     	; 0xcbc <user_info+0x32>
	{
		while(!EEPROM_readByte(user_name_address+user_counter+j,user_comp_name+j));
     c90:	80 91 d3 05 	lds	r24, 0x05D3	; 0x8005d3 <user_counter>
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	80 96       	adiw	r24, 0x20	; 32
     c98:	2c 2f       	mov	r18, r28
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	b9 01       	movw	r22, r18
     c9e:	62 52       	subi	r22, 0x22	; 34
     ca0:	7a 4f       	sbci	r23, 0xFA	; 250
     ca2:	82 0f       	add	r24, r18
     ca4:	93 1f       	adc	r25, r19
     ca6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <EEPROM_readByte>
     caa:	88 23       	and	r24, r24
     cac:	89 f3       	breq	.-30     	; 0xc90 <user_info+0x6>
		j++;
     cae:	cf 5f       	subi	r28, 0xFF	; 255
     cb0:	83 ec       	ldi	r24, 0xC3	; 195
     cb2:	99 e0       	ldi	r25, 0x09	; 9
     cb4:	01 97       	sbiw	r24, 0x01	; 1
     cb6:	f1 f7       	brne	.-4      	; 0xcb4 <user_info+0x2a>
     cb8:	00 c0       	rjmp	.+0      	; 0xcba <user_info+0x30>
     cba:	00 00       	nop
}

void user_info(void)
{
	uint8_t i=0,j=0,k=0;
	while(j<4)
     cbc:	c4 30       	cpi	r28, 0x04	; 4
     cbe:	40 f3       	brcs	.-48     	; 0xc90 <user_info+0x6>
     cc0:	c0 e0       	ldi	r28, 0x00	; 0
     cc2:	17 c0       	rjmp	.+46     	; 0xcf2 <user_info+0x68>
		j++;
		_delay_ms(10);
	}
	while (k<4)
	{
		while(!EEPROM_readByte(user_pass_address+user_counter+k,user_comp_pass+k));
     cc4:	80 91 d3 05 	lds	r24, 0x05D3	; 0x8005d3 <user_counter>
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	80 58       	subi	r24, 0x80	; 128
     ccc:	9f 4f       	sbci	r25, 0xFF	; 255
     cce:	2c 2f       	mov	r18, r28
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	b9 01       	movw	r22, r18
     cd4:	6e 51       	subi	r22, 0x1E	; 30
     cd6:	7a 4f       	sbci	r23, 0xFA	; 250
     cd8:	82 0f       	add	r24, r18
     cda:	93 1f       	adc	r25, r19
     cdc:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <EEPROM_readByte>
     ce0:	88 23       	and	r24, r24
     ce2:	81 f3       	breq	.-32     	; 0xcc4 <user_info+0x3a>
		k++;
     ce4:	cf 5f       	subi	r28, 0xFF	; 255
     ce6:	83 ec       	ldi	r24, 0xC3	; 195
     ce8:	99 e0       	ldi	r25, 0x09	; 9
     cea:	01 97       	sbiw	r24, 0x01	; 1
     cec:	f1 f7       	brne	.-4      	; 0xcea <user_info+0x60>
     cee:	00 c0       	rjmp	.+0      	; 0xcf0 <user_info+0x66>
     cf0:	00 00       	nop
	{
		while(!EEPROM_readByte(user_name_address+user_counter+j,user_comp_name+j));
		j++;
		_delay_ms(10);
	}
	while (k<4)
     cf2:	c4 30       	cpi	r28, 0x04	; 4
     cf4:	38 f3       	brcs	.-50     	; 0xcc4 <user_info+0x3a>
		while(!EEPROM_readByte(user_pass_address+user_counter+k,user_comp_pass+k));
		k++;
		_delay_ms(10);
	}
	
}
     cf6:	cf 91       	pop	r28
     cf8:	08 95       	ret

00000cfa <user_compare_info>:
uint8_t user_compare_info(void)
{
	uint8_t i=0;
	while(i<4)
	{
		if ((user_receved_name[i]==user_comp_name[i])&&(user_receved_pass[i]==user_comp_pass[i]))
     cfa:	90 91 d5 05 	lds	r25, 0x05D5	; 0x8005d5 <user_receved_name>
     cfe:	80 91 de 05 	lds	r24, 0x05DE	; 0x8005de <user_comp_name>
     d02:	98 13       	cpse	r25, r24
     d04:	08 c0       	rjmp	.+16     	; 0xd16 <user_compare_info+0x1c>
     d06:	90 91 e6 05 	lds	r25, 0x05E6	; 0x8005e6 <user_receved_pass>
     d0a:	80 91 e2 05 	lds	r24, 0x05E2	; 0x8005e2 <user_comp_pass>
     d0e:	98 17       	cp	r25, r24
     d10:	21 f0       	breq	.+8      	; 0xd1a <user_compare_info+0x20>
		{
			return 1;
		}
		else
		{
			return 0;
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	08 95       	ret
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	08 95       	ret
	uint8_t i=0;
	while(i<4)
	{
		if ((user_receved_name[i]==user_comp_name[i])&&(user_receved_pass[i]==user_comp_pass[i]))
		{
			return 1;
     d1a:	81 e0       	ldi	r24, 0x01	; 1
			return 0;
			break;
		}
		i++;
	}
}
     d1c:	08 95       	ret

00000d1e <user_check>:

uint8_t user_check(void)
{
     d1e:	cf 93       	push	r28
	uint8_t check,i='0',trial=0;
     d20:	c0 e3       	ldi	r28, 0x30	; 48
	while(1)
	{
	user_info();
     d22:	0e 94 45 06 	call	0xc8a	; 0xc8a <user_info>
	check = user_compare_info();
     d26:	0e 94 7d 06 	call	0xcfa	; 0xcfa <user_compare_info>
	if(check == 1)
     d2a:	81 30       	cpi	r24, 0x01	; 1
     d2c:	59 f0       	breq	.+22     	; 0xd44 <user_check+0x26>
		return 1;
		break;
	}
	else
	{
		if (i==user_count)
     d2e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     d32:	c8 17       	cp	r28, r24
     d34:	49 f0       	breq	.+18     	; 0xd48 <user_check+0x2a>
		{
			return 0;
			break;
		}
		
		user_counter+=4;
     d36:	80 91 d3 05 	lds	r24, 0x05D3	; 0x8005d3 <user_counter>
     d3a:	8c 5f       	subi	r24, 0xFC	; 252
     d3c:	80 93 d3 05 	sts	0x05D3, r24	; 0x8005d3 <user_counter>
		i++;
     d40:	cf 5f       	subi	r28, 0xFF	; 255
	}
	}
     d42:	ef cf       	rjmp	.-34     	; 0xd22 <user_check+0x4>
	{
	user_info();
	check = user_compare_info();
	if(check == 1)
	{
		return 1;
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	01 c0       	rjmp	.+2      	; 0xd4a <user_check+0x2c>
	}
	else
	{
		if (i==user_count)
		{
			return 0;
     d48:	80 e0       	ldi	r24, 0x00	; 0
		user_counter+=4;
		i++;
	}
	}
	
}
     d4a:	cf 91       	pop	r28
     d4c:	08 95       	ret

00000d4e <user_alarm_check>:

void user_alarm_check(void)
{
     d4e:	cf 93       	push	r28
	uint8_t counter=0,check;
     d50:	c0 e0       	ldi	r28, 0x00	; 0
	while(counter<3)
     d52:	3c c0       	rjmp	.+120    	; 0xdcc <user_alarm_check+0x7e>
	{
		user_prog_init();
     d54:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <user_prog_init>
		check = user_check();
     d58:	0e 94 8f 06 	call	0xd1e	; 0xd1e <user_check>
		if(check == 1)
     d5c:	81 30       	cpi	r24, 0x01	; 1
     d5e:	b1 f4       	brne	.+44     	; 0xd8c <user_alarm_check+0x3e>
		{
			UART_sendString(" \r");
     d60:	81 e5       	ldi	r24, 0x51	; 81
     d62:	95 e0       	ldi	r25, 0x05	; 5
     d64:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
			UART_sendString("welcome back... :) \r");
     d68:	83 e0       	ldi	r24, 0x03	; 3
     d6a:	91 e0       	ldi	r25, 0x01	; 1
     d6c:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
			UART_sendString(" \r");
     d70:	81 e5       	ldi	r24, 0x51	; 81
     d72:	95 e0       	ldi	r25, 0x05	; 5
     d74:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
     d78:	2f e3       	ldi	r18, 0x3F	; 63
     d7a:	8d e0       	ldi	r24, 0x0D	; 13
     d7c:	93 e0       	ldi	r25, 0x03	; 3
     d7e:	21 50       	subi	r18, 0x01	; 1
     d80:	80 40       	sbci	r24, 0x00	; 0
     d82:	90 40       	sbci	r25, 0x00	; 0
     d84:	e1 f7       	brne	.-8      	; 0xd7e <user_alarm_check+0x30>
     d86:	00 c0       	rjmp	.+0      	; 0xd88 <user_alarm_check+0x3a>
     d88:	00 00       	nop
     d8a:	22 c0       	rjmp	.+68     	; 0xdd0 <user_alarm_check+0x82>
			_delay_ms(1000);
			break;
		}
		else
		{
			UART_sendString("false \r");
     d8c:	88 e1       	ldi	r24, 0x18	; 24
     d8e:	91 e0       	ldi	r25, 0x01	; 1
     d90:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
			counter++;
     d94:	cf 5f       	subi	r28, 0xFF	; 255
			if (counter == 3)
     d96:	c3 30       	cpi	r28, 0x03	; 3
     d98:	c9 f4       	brne	.+50     	; 0xdcc <user_alarm_check+0x7e>
			{
				UART_sendString("security mode... \r");
     d9a:	80 e2       	ldi	r24, 0x20	; 32
     d9c:	91 e0       	ldi	r25, 0x01	; 1
     d9e:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
				GPIO_setupPinDirection(PORTA_ID,0,PIN_OUTPUT);
     da2:	41 e0       	ldi	r20, 0x01	; 1
     da4:	60 e0       	ldi	r22, 0x00	; 0
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	0e 94 3a 01 	call	0x274	; 0x274 <GPIO_setupPinDirection>
				UART_sendString("error :(");
     dac:	83 e3       	ldi	r24, 0x33	; 51
     dae:	91 e0       	ldi	r25, 0x01	; 1
     db0:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
				LCD_clearScreen();
     db4:	0e 94 b3 04 	call	0x966	; 0x966 <LCD_clearScreen>
				LCD_displayString("security mode...");
     db8:	8c e3       	ldi	r24, 0x3C	; 60
     dba:	91 e0       	ldi	r25, 0x01	; 1
     dbc:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_displayString>
				while(1)
				{
					GPIO_writePin(PORTA_ID,0,LOGIC_HIGH);
     dc0:	41 e0       	ldi	r20, 0x01	; 1
     dc2:	60 e0       	ldi	r22, 0x00	; 0
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	0e 94 ad 01 	call	0x35a	; 0x35a <GPIO_writePin>
     dca:	fa cf       	rjmp	.-12     	; 0xdc0 <user_alarm_check+0x72>
}

void user_alarm_check(void)
{
	uint8_t counter=0,check;
	while(counter<3)
     dcc:	c3 30       	cpi	r28, 0x03	; 3
     dce:	10 f2       	brcs	.-124    	; 0xd54 <user_alarm_check+0x6>
					GPIO_writePin(PORTA_ID,0,LOGIC_HIGH);
				}
			}
		}
	}
}
     dd0:	cf 91       	pop	r28
     dd2:	08 95       	ret

00000dd4 <interrupt_init>:
	}
}

void interrupt_init(void)
{
	GPIO_setupPinDirection(PORTD_ID,2,PIN_INPUT);
     dd4:	40 e0       	ldi	r20, 0x00	; 0
     dd6:	62 e0       	ldi	r22, 0x02	; 2
     dd8:	83 e0       	ldi	r24, 0x03	; 3
     dda:	0e 94 3a 01 	call	0x274	; 0x274 <GPIO_setupPinDirection>
	GPIO_writePin(PORTD_ID,2,LOGIC_HIGH);
     dde:	41 e0       	ldi	r20, 0x01	; 1
     de0:	62 e0       	ldi	r22, 0x02	; 2
     de2:	83 e0       	ldi	r24, 0x03	; 3
     de4:	0e 94 ad 01 	call	0x35a	; 0x35a <GPIO_writePin>
	GICR |= (1<<7)|(1<<6)|(1<<5);
     de8:	8b b7       	in	r24, 0x3b	; 59
     dea:	80 6e       	ori	r24, 0xE0	; 224
     dec:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1<<ISC00)|(1<<ISC01);
     dee:	85 b7       	in	r24, 0x35	; 53
     df0:	83 60       	ori	r24, 0x03	; 3
     df2:	85 bf       	out	0x35, r24	; 53
	sei();
     df4:	78 94       	sei
     df6:	08 95       	ret

00000df8 <lcd_program_init>:
	lcd_user_alarm_check();
	lcd_main_opt();
}

void lcd_program_init(void)
{
     df8:	cf 93       	push	r28
     dfa:	df 93       	push	r29
	uint8_t i,j,name,pass;
	LCD_clearScreen();
     dfc:	0e 94 b3 04 	call	0x966	; 0x966 <LCD_clearScreen>
	LCD_displayString("hello...!");
     e00:	8b ea       	ldi	r24, 0xAB	; 171
     e02:	91 e0       	ldi	r25, 0x01	; 1
     e04:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_displayString>
	LCD_moveCursor(1,0);
     e08:	60 e0       	ldi	r22, 0x00	; 0
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	0e 94 9c 04 	call	0x938	; 0x938 <LCD_moveCursor>
	LCD_displayString("users= ");
     e10:	85 eb       	ldi	r24, 0xB5	; 181
     e12:	91 e0       	ldi	r25, 0x01	; 1
     e14:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_displayString>
	LCD_displayCharacter(user_count);
     e18:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     e1c:	0e 94 df 03 	call	0x7be	; 0x7be <LCD_displayCharacter>
     e20:	2f e3       	ldi	r18, 0x3F	; 63
     e22:	8d e0       	ldi	r24, 0x0D	; 13
     e24:	93 e0       	ldi	r25, 0x03	; 3
     e26:	21 50       	subi	r18, 0x01	; 1
     e28:	80 40       	sbci	r24, 0x00	; 0
     e2a:	90 40       	sbci	r25, 0x00	; 0
     e2c:	e1 f7       	brne	.-8      	; 0xe26 <lcd_program_init+0x2e>
     e2e:	00 c0       	rjmp	.+0      	; 0xe30 <lcd_program_init+0x38>
     e30:	00 00       	nop
	_delay_ms(1000);
	LCD_clearScreen();
     e32:	0e 94 b3 04 	call	0x966	; 0x966 <LCD_clearScreen>
	LCD_displayString("enter user name");
     e36:	8d eb       	ldi	r24, 0xBD	; 189
     e38:	91 e0       	ldi	r25, 0x01	; 1
     e3a:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_displayString>
	LCD_moveCursor(1,0);
     e3e:	60 e0       	ldi	r22, 0x00	; 0
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	0e 94 9c 04 	call	0x938	; 0x938 <LCD_moveCursor>
	LCD_displayString("and password");
     e46:	8d ec       	ldi	r24, 0xCD	; 205
     e48:	91 e0       	ldi	r25, 0x01	; 1
     e4a:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_displayString>
     e4e:	2f e3       	ldi	r18, 0x3F	; 63
     e50:	8d e0       	ldi	r24, 0x0D	; 13
     e52:	93 e0       	ldi	r25, 0x03	; 3
     e54:	21 50       	subi	r18, 0x01	; 1
     e56:	80 40       	sbci	r24, 0x00	; 0
     e58:	90 40       	sbci	r25, 0x00	; 0
     e5a:	e1 f7       	brne	.-8      	; 0xe54 <lcd_program_init+0x5c>
     e5c:	00 c0       	rjmp	.+0      	; 0xe5e <lcd_program_init+0x66>
     e5e:	00 00       	nop
	_delay_ms(1000);
	LCD_clearScreen();
     e60:	0e 94 b3 04 	call	0x966	; 0x966 <LCD_clearScreen>
	LCD_displayString("username:");
     e64:	8a ed       	ldi	r24, 0xDA	; 218
     e66:	91 e0       	ldi	r25, 0x01	; 1
     e68:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_displayString>
	for (i=0;i<4;i++)
     e6c:	c0 e0       	ldi	r28, 0x00	; 0
     e6e:	18 c0       	rjmp	.+48     	; 0xea0 <lcd_program_init+0xa8>
	{
		name = KEYPAD_getPressedKey();
     e70:	0e 94 91 02 	call	0x522	; 0x522 <KEYPAD_getPressedKey>
     e74:	d8 2f       	mov	r29, r24
     e76:	8f e4       	ldi	r24, 0x4F	; 79
     e78:	93 ec       	ldi	r25, 0xC3	; 195
     e7a:	01 97       	sbiw	r24, 0x01	; 1
     e7c:	f1 f7       	brne	.-4      	; 0xe7a <lcd_program_init+0x82>
     e7e:	00 c0       	rjmp	.+0      	; 0xe80 <lcd_program_init+0x88>
     e80:	00 00       	nop
		_delay_ms(200);
		LCD_displayCharacter(name);
     e82:	8d 2f       	mov	r24, r29
     e84:	0e 94 df 03 	call	0x7be	; 0x7be <LCD_displayCharacter>
     e88:	8f e4       	ldi	r24, 0x4F	; 79
     e8a:	93 ec       	ldi	r25, 0xC3	; 195
     e8c:	01 97       	sbiw	r24, 0x01	; 1
     e8e:	f1 f7       	brne	.-4      	; 0xe8c <lcd_program_init+0x94>
     e90:	00 c0       	rjmp	.+0      	; 0xe92 <lcd_program_init+0x9a>
     e92:	00 00       	nop
		_delay_ms(200);
		lcd_user_name[i] = name;
     e94:	ec 2f       	mov	r30, r28
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	e6 51       	subi	r30, 0x16	; 22
     e9a:	fa 4f       	sbci	r31, 0xFA	; 250
     e9c:	d0 83       	st	Z, r29
	LCD_moveCursor(1,0);
	LCD_displayString("and password");
	_delay_ms(1000);
	LCD_clearScreen();
	LCD_displayString("username:");
	for (i=0;i<4;i++)
     e9e:	cf 5f       	subi	r28, 0xFF	; 255
     ea0:	c4 30       	cpi	r28, 0x04	; 4
     ea2:	30 f3       	brcs	.-52     	; 0xe70 <lcd_program_init+0x78>
		_delay_ms(200);
		LCD_displayCharacter(name);
		_delay_ms(200);
		lcd_user_name[i] = name;
	}
	LCD_moveCursor(1,0);
     ea4:	60 e0       	ldi	r22, 0x00	; 0
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	0e 94 9c 04 	call	0x938	; 0x938 <LCD_moveCursor>
	LCD_displayString("password:");
     eac:	84 ee       	ldi	r24, 0xE4	; 228
     eae:	91 e0       	ldi	r25, 0x01	; 1
     eb0:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_displayString>
	for (j=0;j<4;j++)
     eb4:	c0 e0       	ldi	r28, 0x00	; 0
     eb6:	18 c0       	rjmp	.+48     	; 0xee8 <lcd_program_init+0xf0>
	{
		pass = KEYPAD_getPressedKey();
     eb8:	0e 94 91 02 	call	0x522	; 0x522 <KEYPAD_getPressedKey>
     ebc:	d8 2f       	mov	r29, r24
     ebe:	8f e4       	ldi	r24, 0x4F	; 79
     ec0:	93 ec       	ldi	r25, 0xC3	; 195
     ec2:	01 97       	sbiw	r24, 0x01	; 1
     ec4:	f1 f7       	brne	.-4      	; 0xec2 <lcd_program_init+0xca>
     ec6:	00 c0       	rjmp	.+0      	; 0xec8 <lcd_program_init+0xd0>
     ec8:	00 00       	nop
		_delay_ms(200);
		LCD_displayCharacter('*');
     eca:	8a e2       	ldi	r24, 0x2A	; 42
     ecc:	0e 94 df 03 	call	0x7be	; 0x7be <LCD_displayCharacter>
     ed0:	8f e4       	ldi	r24, 0x4F	; 79
     ed2:	93 ec       	ldi	r25, 0xC3	; 195
     ed4:	01 97       	sbiw	r24, 0x01	; 1
     ed6:	f1 f7       	brne	.-4      	; 0xed4 <lcd_program_init+0xdc>
     ed8:	00 c0       	rjmp	.+0      	; 0xeda <lcd_program_init+0xe2>
     eda:	00 00       	nop
		_delay_ms(200);
		lcd_user_pass[j] = pass;
     edc:	ec 2f       	mov	r30, r28
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	ea 50       	subi	r30, 0x0A	; 10
     ee2:	fa 4f       	sbci	r31, 0xFA	; 250
     ee4:	d0 83       	st	Z, r29
		_delay_ms(200);
		lcd_user_name[i] = name;
	}
	LCD_moveCursor(1,0);
	LCD_displayString("password:");
	for (j=0;j<4;j++)
     ee6:	cf 5f       	subi	r28, 0xFF	; 255
     ee8:	c4 30       	cpi	r28, 0x04	; 4
     eea:	30 f3       	brcs	.-52     	; 0xeb8 <lcd_program_init+0xc0>
		_delay_ms(200);
		LCD_displayCharacter('*');
		_delay_ms(200);
		lcd_user_pass[j] = pass;
	}
}
     eec:	df 91       	pop	r29
     eee:	cf 91       	pop	r28
     ef0:	08 95       	ret

00000ef2 <lcd_user_info>:

void lcd_user_info(void)
{
     ef2:	cf 93       	push	r28
	uint8_t i=0,j=0,k=0;
     ef4:	c0 e0       	ldi	r28, 0x00	; 0
	while(j<4)
     ef6:	16 c0       	rjmp	.+44     	; 0xf24 <lcd_user_info+0x32>
	{
		while(!EEPROM_readByte(user_name_address+lcd_user_counter+j,lcd_user_comp_name+j));
     ef8:	80 91 d2 05 	lds	r24, 0x05D2	; 0x8005d2 <__data_end>
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	80 96       	adiw	r24, 0x20	; 32
     f00:	2c 2f       	mov	r18, r28
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	b9 01       	movw	r22, r18
     f06:	6e 50       	subi	r22, 0x0E	; 14
     f08:	7a 4f       	sbci	r23, 0xFA	; 250
     f0a:	82 0f       	add	r24, r18
     f0c:	93 1f       	adc	r25, r19
     f0e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <EEPROM_readByte>
     f12:	88 23       	and	r24, r24
     f14:	89 f3       	breq	.-30     	; 0xef8 <lcd_user_info+0x6>
		j++;
     f16:	cf 5f       	subi	r28, 0xFF	; 255
     f18:	83 ec       	ldi	r24, 0xC3	; 195
     f1a:	99 e0       	ldi	r25, 0x09	; 9
     f1c:	01 97       	sbiw	r24, 0x01	; 1
     f1e:	f1 f7       	brne	.-4      	; 0xf1c <lcd_user_info+0x2a>
     f20:	00 c0       	rjmp	.+0      	; 0xf22 <lcd_user_info+0x30>
     f22:	00 00       	nop
}

void lcd_user_info(void)
{
	uint8_t i=0,j=0,k=0;
	while(j<4)
     f24:	c4 30       	cpi	r28, 0x04	; 4
     f26:	40 f3       	brcs	.-48     	; 0xef8 <lcd_user_info+0x6>
     f28:	c0 e0       	ldi	r28, 0x00	; 0
     f2a:	17 c0       	rjmp	.+46     	; 0xf5a <lcd_user_info+0x68>
		j++;
		_delay_ms(10);
	}
	while (k<4)
	{
		while(!EEPROM_readByte(user_pass_address+lcd_user_counter+k,lcd_user_comp_pass+k));
     f2c:	80 91 d2 05 	lds	r24, 0x05D2	; 0x8005d2 <__data_end>
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	80 58       	subi	r24, 0x80	; 128
     f34:	9f 4f       	sbci	r25, 0xFF	; 255
     f36:	2c 2f       	mov	r18, r28
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	b9 01       	movw	r22, r18
     f3c:	62 51       	subi	r22, 0x12	; 18
     f3e:	7a 4f       	sbci	r23, 0xFA	; 250
     f40:	82 0f       	add	r24, r18
     f42:	93 1f       	adc	r25, r19
     f44:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <EEPROM_readByte>
     f48:	88 23       	and	r24, r24
     f4a:	81 f3       	breq	.-32     	; 0xf2c <lcd_user_info+0x3a>
		k++;
     f4c:	cf 5f       	subi	r28, 0xFF	; 255
     f4e:	83 ec       	ldi	r24, 0xC3	; 195
     f50:	99 e0       	ldi	r25, 0x09	; 9
     f52:	01 97       	sbiw	r24, 0x01	; 1
     f54:	f1 f7       	brne	.-4      	; 0xf52 <lcd_user_info+0x60>
     f56:	00 c0       	rjmp	.+0      	; 0xf58 <lcd_user_info+0x66>
     f58:	00 00       	nop
	{
		while(!EEPROM_readByte(user_name_address+lcd_user_counter+j,lcd_user_comp_name+j));
		j++;
		_delay_ms(10);
	}
	while (k<4)
     f5a:	c4 30       	cpi	r28, 0x04	; 4
     f5c:	38 f3       	brcs	.-50     	; 0xf2c <lcd_user_info+0x3a>
	{
		while(!EEPROM_readByte(user_pass_address+lcd_user_counter+k,lcd_user_comp_pass+k));
		k++;
		_delay_ms(10);
	}
}
     f5e:	cf 91       	pop	r28
     f60:	08 95       	ret

00000f62 <lcd_user_compare_info>:
uint8_t lcd_user_compare_info(void)
{
	uint8_t i=0;
	while(i<4)
	{
		if ((lcd_user_name[i]==(lcd_user_comp_name[i]))&&(lcd_user_pass[i]==(lcd_user_comp_pass[i])))
     f62:	90 91 ea 05 	lds	r25, 0x05EA	; 0x8005ea <lcd_user_name>
     f66:	80 91 f2 05 	lds	r24, 0x05F2	; 0x8005f2 <lcd_user_comp_name>
     f6a:	98 13       	cpse	r25, r24
     f6c:	08 c0       	rjmp	.+16     	; 0xf7e <lcd_user_compare_info+0x1c>
     f6e:	90 91 f6 05 	lds	r25, 0x05F6	; 0x8005f6 <lcd_user_pass>
     f72:	80 91 ee 05 	lds	r24, 0x05EE	; 0x8005ee <lcd_user_comp_pass>
     f76:	98 17       	cp	r25, r24
     f78:	21 f0       	breq	.+8      	; 0xf82 <lcd_user_compare_info+0x20>
		{
			return 1;
		}
		else
		{
			return 0;
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	08 95       	ret
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	08 95       	ret
	uint8_t i=0;
	while(i<4)
	{
		if ((lcd_user_name[i]==(lcd_user_comp_name[i]))&&(lcd_user_pass[i]==(lcd_user_comp_pass[i])))
		{
			return 1;
     f82:	81 e0       	ldi	r24, 0x01	; 1
			return 0;
			break;
		}
		i++;
	}
}
     f84:	08 95       	ret

00000f86 <lcd_user_check>:

uint8_t lcd_user_check(void)
{
     f86:	cf 93       	push	r28
	uint8_t check,i='0',trial=0;
     f88:	c0 e3       	ldi	r28, 0x30	; 48
	while(1)
	{
		lcd_user_info();
     f8a:	0e 94 79 07 	call	0xef2	; 0xef2 <lcd_user_info>
		check = lcd_user_compare_info();
     f8e:	0e 94 b1 07 	call	0xf62	; 0xf62 <lcd_user_compare_info>
		if(check == 1)
     f92:	81 30       	cpi	r24, 0x01	; 1
     f94:	61 f0       	breq	.+24     	; 0xfae <lcd_user_check+0x28>
			return 1;
			break;
		}
		else
		{
			lcd_user_counter+=4;
     f96:	80 91 d2 05 	lds	r24, 0x05D2	; 0x8005d2 <__data_end>
     f9a:	8c 5f       	subi	r24, 0xFC	; 252
     f9c:	80 93 d2 05 	sts	0x05D2, r24	; 0x8005d2 <__data_end>
			i++;
     fa0:	cf 5f       	subi	r28, 0xFF	; 255
			if (i==user_count)
     fa2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     fa6:	c8 13       	cpse	r28, r24
     fa8:	f0 cf       	rjmp	.-32     	; 0xf8a <lcd_user_check+0x4>
			{
				return 0;
     faa:	80 e0       	ldi	r24, 0x00	; 0
     fac:	01 c0       	rjmp	.+2      	; 0xfb0 <lcd_user_check+0x2a>
	{
		lcd_user_info();
		check = lcd_user_compare_info();
		if(check == 1)
		{
			return 1;
     fae:	81 e0       	ldi	r24, 0x01	; 1
				break;
			}
		}
	}
	
}
     fb0:	cf 91       	pop	r28
     fb2:	08 95       	ret

00000fb4 <lcd_user_alarm_check>:

void lcd_user_alarm_check(void)
{
     fb4:	cf 93       	push	r28
	uint8_t counter=0,check;
     fb6:	c0 e0       	ldi	r28, 0x00	; 0
	while(counter<3)
     fb8:	46 c0       	rjmp	.+140    	; 0x1046 <lcd_user_alarm_check+0x92>
	{
		lcd_program_init();
     fba:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <lcd_program_init>
		check = lcd_user_check();
     fbe:	0e 94 c3 07 	call	0xf86	; 0xf86 <lcd_user_check>
		if(check == 1)
     fc2:	81 30       	cpi	r24, 0x01	; 1
     fc4:	81 f4       	brne	.+32     	; 0xfe6 <lcd_user_alarm_check+0x32>
		{
			LCD_clearScreen();
     fc6:	0e 94 b3 04 	call	0x966	; 0x966 <LCD_clearScreen>
			LCD_displayString("welcome back :)");
     fca:	8e ee       	ldi	r24, 0xEE	; 238
     fcc:	91 e0       	ldi	r25, 0x01	; 1
     fce:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_displayString>
     fd2:	2f e3       	ldi	r18, 0x3F	; 63
     fd4:	8d e0       	ldi	r24, 0x0D	; 13
     fd6:	93 e0       	ldi	r25, 0x03	; 3
     fd8:	21 50       	subi	r18, 0x01	; 1
     fda:	80 40       	sbci	r24, 0x00	; 0
     fdc:	90 40       	sbci	r25, 0x00	; 0
     fde:	e1 f7       	brne	.-8      	; 0xfd8 <lcd_user_alarm_check+0x24>
     fe0:	00 c0       	rjmp	.+0      	; 0xfe2 <lcd_user_alarm_check+0x2e>
     fe2:	00 00       	nop
     fe4:	33 c0       	rjmp	.+102    	; 0x104c <lcd_user_alarm_check+0x98>
			_delay_ms(1000);
			break;
		}
		else
		{
			LCD_clearScreen();
     fe6:	0e 94 b3 04 	call	0x966	; 0x966 <LCD_clearScreen>
			LCD_moveCursor(0,0);
     fea:	60 e0       	ldi	r22, 0x00	; 0
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	0e 94 9c 04 	call	0x938	; 0x938 <LCD_moveCursor>
			LCD_displayString("false :(");
     ff2:	8e ef       	ldi	r24, 0xFE	; 254
     ff4:	91 e0       	ldi	r25, 0x01	; 1
     ff6:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_displayString>
     ffa:	2f e9       	ldi	r18, 0x9F	; 159
     ffc:	86 e8       	ldi	r24, 0x86	; 134
     ffe:	91 e0       	ldi	r25, 0x01	; 1
    1000:	21 50       	subi	r18, 0x01	; 1
    1002:	80 40       	sbci	r24, 0x00	; 0
    1004:	90 40       	sbci	r25, 0x00	; 0
    1006:	e1 f7       	brne	.-8      	; 0x1000 <lcd_user_alarm_check+0x4c>
    1008:	00 c0       	rjmp	.+0      	; 0x100a <lcd_user_alarm_check+0x56>
    100a:	00 00       	nop
			_delay_ms(500);
			counter++;
    100c:	cf 5f       	subi	r28, 0xFF	; 255
			if (counter == 3)
    100e:	c3 30       	cpi	r28, 0x03	; 3
    1010:	d1 f4       	brne	.+52     	; 0x1046 <lcd_user_alarm_check+0x92>
			{
				LCD_clearScreen();
    1012:	0e 94 b3 04 	call	0x966	; 0x966 <LCD_clearScreen>
				LCD_displayString("security mode...");
    1016:	8c e3       	ldi	r24, 0x3C	; 60
    1018:	91 e0       	ldi	r25, 0x01	; 1
    101a:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_displayString>
    101e:	2f e3       	ldi	r18, 0x3F	; 63
    1020:	8d e0       	ldi	r24, 0x0D	; 13
    1022:	93 e0       	ldi	r25, 0x03	; 3
    1024:	21 50       	subi	r18, 0x01	; 1
    1026:	80 40       	sbci	r24, 0x00	; 0
    1028:	90 40       	sbci	r25, 0x00	; 0
    102a:	e1 f7       	brne	.-8      	; 0x1024 <lcd_user_alarm_check+0x70>
    102c:	00 c0       	rjmp	.+0      	; 0x102e <lcd_user_alarm_check+0x7a>
    102e:	00 00       	nop
				_delay_ms(1000);
				GPIO_setupPinDirection(PORTA_ID,0,PIN_OUTPUT);
    1030:	41 e0       	ldi	r20, 0x01	; 1
    1032:	60 e0       	ldi	r22, 0x00	; 0
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	0e 94 3a 01 	call	0x274	; 0x274 <GPIO_setupPinDirection>
				while(1)
				{
					GPIO_writePin(PORTA_ID,0,LOGIC_HIGH);
    103a:	41 e0       	ldi	r20, 0x01	; 1
    103c:	60 e0       	ldi	r22, 0x00	; 0
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	0e 94 ad 01 	call	0x35a	; 0x35a <GPIO_writePin>
    1044:	fa cf       	rjmp	.-12     	; 0x103a <lcd_user_alarm_check+0x86>
}

void lcd_user_alarm_check(void)
{
	uint8_t counter=0,check;
	while(counter<3)
    1046:	c3 30       	cpi	r28, 0x03	; 3
    1048:	08 f4       	brcc	.+2      	; 0x104c <lcd_user_alarm_check+0x98>
    104a:	b7 cf       	rjmp	.-146    	; 0xfba <lcd_user_alarm_check+0x6>
					GPIO_writePin(PORTA_ID,0,LOGIC_HIGH);
				}
			}
		}
	}
}
    104c:	cf 91       	pop	r28
    104e:	08 95       	ret

00001050 <dimmer_lcd>:
}

void dimmer_lcd(void)
{
	uint8_t percentage;
	LCD_clearScreen();
    1050:	0e 94 b3 04 	call	0x966	; 0x966 <LCD_clearScreen>
	LCD_moveCursor(0,0);
    1054:	60 e0       	ldi	r22, 0x00	; 0
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	0e 94 9c 04 	call	0x938	; 0x938 <LCD_moveCursor>
	LCD_displayString("choose lamp");
    105c:	87 e0       	ldi	r24, 0x07	; 7
    105e:	92 e0       	ldi	r25, 0x02	; 2
    1060:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_displayString>
	LCD_moveCursor(1,0);
    1064:	60 e0       	ldi	r22, 0x00	; 0
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	0e 94 9c 04 	call	0x938	; 0x938 <LCD_moveCursor>
	LCD_displayString("percentage");
    106c:	83 e1       	ldi	r24, 0x13	; 19
    106e:	92 e0       	ldi	r25, 0x02	; 2
    1070:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_displayString>
    1074:	2f e3       	ldi	r18, 0x3F	; 63
    1076:	8d e0       	ldi	r24, 0x0D	; 13
    1078:	93 e0       	ldi	r25, 0x03	; 3
    107a:	21 50       	subi	r18, 0x01	; 1
    107c:	80 40       	sbci	r24, 0x00	; 0
    107e:	90 40       	sbci	r25, 0x00	; 0
    1080:	e1 f7       	brne	.-8      	; 0x107a <dimmer_lcd+0x2a>
    1082:	00 c0       	rjmp	.+0      	; 0x1084 <dimmer_lcd+0x34>
    1084:	00 00       	nop
	_delay_ms(1000);
	LCD_clearScreen();
    1086:	0e 94 b3 04 	call	0x966	; 0x966 <LCD_clearScreen>
	LCD_moveCursor(0,0);
    108a:	60 e0       	ldi	r22, 0x00	; 0
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	0e 94 9c 04 	call	0x938	; 0x938 <LCD_moveCursor>
	LCD_displayString("1:0%");
    1092:	8e e1       	ldi	r24, 0x1E	; 30
    1094:	92 e0       	ldi	r25, 0x02	; 2
    1096:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_displayString>
	LCD_moveCursor(0,5);
    109a:	65 e0       	ldi	r22, 0x05	; 5
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	0e 94 9c 04 	call	0x938	; 0x938 <LCD_moveCursor>
	LCD_displayString("2:25%");
    10a2:	83 e2       	ldi	r24, 0x23	; 35
    10a4:	92 e0       	ldi	r25, 0x02	; 2
    10a6:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_displayString>
	LCD_moveCursor(0,11);
    10aa:	6b e0       	ldi	r22, 0x0B	; 11
    10ac:	80 e0       	ldi	r24, 0x00	; 0
    10ae:	0e 94 9c 04 	call	0x938	; 0x938 <LCD_moveCursor>
	LCD_displayString("3:50%");
    10b2:	89 e2       	ldi	r24, 0x29	; 41
    10b4:	92 e0       	ldi	r25, 0x02	; 2
    10b6:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_displayString>
	LCD_moveCursor(1,2);
    10ba:	62 e0       	ldi	r22, 0x02	; 2
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	0e 94 9c 04 	call	0x938	; 0x938 <LCD_moveCursor>
	LCD_displayString("4:75%");
    10c2:	8f e2       	ldi	r24, 0x2F	; 47
    10c4:	92 e0       	ldi	r25, 0x02	; 2
    10c6:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_displayString>
	LCD_moveCursor(1,8);
    10ca:	68 e0       	ldi	r22, 0x08	; 8
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	0e 94 9c 04 	call	0x938	; 0x938 <LCD_moveCursor>
	LCD_displayString("5:100%");
    10d2:	85 e3       	ldi	r24, 0x35	; 53
    10d4:	92 e0       	ldi	r25, 0x02	; 2
    10d6:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_displayString>
	percentage = KEYPAD_getPressedKey();
    10da:	0e 94 91 02 	call	0x522	; 0x522 <KEYPAD_getPressedKey>
	switch (percentage)
    10de:	83 33       	cpi	r24, 0x33	; 51
    10e0:	99 f0       	breq	.+38     	; 0x1108 <dimmer_lcd+0xb8>
    10e2:	28 f4       	brcc	.+10     	; 0x10ee <dimmer_lcd+0x9e>
    10e4:	81 33       	cpi	r24, 0x31	; 49
    10e6:	41 f0       	breq	.+16     	; 0x10f8 <dimmer_lcd+0xa8>
    10e8:	82 33       	cpi	r24, 0x32	; 50
    10ea:	51 f0       	breq	.+20     	; 0x1100 <dimmer_lcd+0xb0>
    10ec:	18 c0       	rjmp	.+48     	; 0x111e <dimmer_lcd+0xce>
    10ee:	84 33       	cpi	r24, 0x34	; 52
    10f0:	79 f0       	breq	.+30     	; 0x1110 <dimmer_lcd+0xc0>
    10f2:	85 33       	cpi	r24, 0x35	; 53
    10f4:	89 f0       	breq	.+34     	; 0x1118 <dimmer_lcd+0xc8>
    10f6:	13 c0       	rjmp	.+38     	; 0x111e <dimmer_lcd+0xce>
	{
		case '1':TIMER0_INIT(0);break;
    10f8:	80 e0       	ldi	r24, 0x00	; 0
    10fa:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <TIMER0_INIT>
    10fe:	0f c0       	rjmp	.+30     	; 0x111e <dimmer_lcd+0xce>
		case '2':TIMER0_INIT(25);break;
    1100:	89 e1       	ldi	r24, 0x19	; 25
    1102:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <TIMER0_INIT>
    1106:	0b c0       	rjmp	.+22     	; 0x111e <dimmer_lcd+0xce>
		case '3':TIMER0_INIT(50);break;
    1108:	82 e3       	ldi	r24, 0x32	; 50
    110a:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <TIMER0_INIT>
    110e:	07 c0       	rjmp	.+14     	; 0x111e <dimmer_lcd+0xce>
		case '4':TIMER0_INIT(75);break;
    1110:	8b e4       	ldi	r24, 0x4B	; 75
    1112:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <TIMER0_INIT>
    1116:	03 c0       	rjmp	.+6      	; 0x111e <dimmer_lcd+0xce>
		case '5':TIMER0_INIT(100);break;
    1118:	84 e6       	ldi	r24, 0x64	; 100
    111a:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <TIMER0_INIT>
	}
	lcd_main_opt();
    111e:	0e 94 92 08 	call	0x1124	; 0x1124 <lcd_main_opt>
    1122:	08 95       	ret

00001124 <lcd_main_opt>:
}

void lcd_main_opt(void)
{
	uint8_t device_num;
	LCD_clearScreen();
    1124:	0e 94 b3 04 	call	0x966	; 0x966 <LCD_clearScreen>
	LCD_displayString("press the device");
    1128:	8c e3       	ldi	r24, 0x3C	; 60
    112a:	92 e0       	ldi	r25, 0x02	; 2
    112c:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_displayString>
	LCD_moveCursor(1,0);
    1130:	60 e0       	ldi	r22, 0x00	; 0
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	0e 94 9c 04 	call	0x938	; 0x938 <LCD_moveCursor>
	LCD_displayString("number");
    1138:	8d e4       	ldi	r24, 0x4D	; 77
    113a:	92 e0       	ldi	r25, 0x02	; 2
    113c:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_displayString>
    1140:	2f e3       	ldi	r18, 0x3F	; 63
    1142:	8d e0       	ldi	r24, 0x0D	; 13
    1144:	93 e0       	ldi	r25, 0x03	; 3
    1146:	21 50       	subi	r18, 0x01	; 1
    1148:	80 40       	sbci	r24, 0x00	; 0
    114a:	90 40       	sbci	r25, 0x00	; 0
    114c:	e1 f7       	brne	.-8      	; 0x1146 <lcd_main_opt+0x22>
    114e:	00 c0       	rjmp	.+0      	; 0x1150 <lcd_main_opt+0x2c>
    1150:	00 00       	nop
	_delay_ms(1000);
	LCD_clearScreen();
    1152:	0e 94 b3 04 	call	0x966	; 0x966 <LCD_clearScreen>
	LCD_displayString("1:A/c");
    1156:	84 e5       	ldi	r24, 0x54	; 84
    1158:	92 e0       	ldi	r25, 0x02	; 2
    115a:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_displayString>
	LCD_moveCursor(0,8);
    115e:	68 e0       	ldi	r22, 0x08	; 8
    1160:	80 e0       	ldi	r24, 0x00	; 0
    1162:	0e 94 9c 04 	call	0x938	; 0x938 <LCD_moveCursor>
	LCD_displayString("2:leds");
    1166:	8a e5       	ldi	r24, 0x5A	; 90
    1168:	92 e0       	ldi	r25, 0x02	; 2
    116a:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_displayString>
	LCD_moveCursor(1,0);
    116e:	60 e0       	ldi	r22, 0x00	; 0
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	0e 94 9c 04 	call	0x938	; 0x938 <LCD_moveCursor>
	LCD_displayString("3:dimmer");
    1176:	81 e6       	ldi	r24, 0x61	; 97
    1178:	92 e0       	ldi	r25, 0x02	; 2
    117a:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_displayString>
	LCD_moveCursor(1,8);
    117e:	68 e0       	ldi	r22, 0x08	; 8
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	0e 94 9c 04 	call	0x938	; 0x938 <LCD_moveCursor>
	LCD_displayString("4:uart");
    1186:	8a e6       	ldi	r24, 0x6A	; 106
    1188:	92 e0       	ldi	r25, 0x02	; 2
    118a:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_displayString>
	device_num = KEYPAD_getPressedKey();
    118e:	0e 94 91 02 	call	0x522	; 0x522 <KEYPAD_getPressedKey>
	switch (device_num)
    1192:	82 33       	cpi	r24, 0x32	; 50
    1194:	39 f0       	breq	.+14     	; 0x11a4 <lcd_main_opt+0x80>
    1196:	83 33       	cpi	r24, 0x33	; 51
    1198:	41 f0       	breq	.+16     	; 0x11aa <lcd_main_opt+0x86>
    119a:	81 33       	cpi	r24, 0x31	; 49
    119c:	41 f4       	brne	.+16     	; 0x11ae <lcd_main_opt+0x8a>
	{
		case '1':aircond_lcd();break;
    119e:	0e 94 fe 08 	call	0x11fc	; 0x11fc <aircond_lcd>
    11a2:	08 95       	ret
		case '2':choose_led_lcd();break;
    11a4:	0e 94 76 09 	call	0x12ec	; 0x12ec <choose_led_lcd>
    11a8:	08 95       	ret
		case '3':dimmer_lcd();break;
    11aa:	0e 94 28 08 	call	0x1050	; 0x1050 <dimmer_lcd>
    11ae:	08 95       	ret

000011b0 <__vector_1>:
	MCUCR |= (1<<ISC00)|(1<<ISC01);
	sei();
}

ISR (INT0_vect)
{
    11b0:	1f 92       	push	r1
    11b2:	0f 92       	push	r0
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	0f 92       	push	r0
    11b8:	11 24       	eor	r1, r1
    11ba:	2f 93       	push	r18
    11bc:	3f 93       	push	r19
    11be:	4f 93       	push	r20
    11c0:	5f 93       	push	r21
    11c2:	6f 93       	push	r22
    11c4:	7f 93       	push	r23
    11c6:	8f 93       	push	r24
    11c8:	9f 93       	push	r25
    11ca:	af 93       	push	r26
    11cc:	bf 93       	push	r27
    11ce:	ef 93       	push	r30
    11d0:	ff 93       	push	r31
	lcd_user_alarm_check();
    11d2:	0e 94 da 07 	call	0xfb4	; 0xfb4 <lcd_user_alarm_check>
	lcd_main_opt();
    11d6:	0e 94 92 08 	call	0x1124	; 0x1124 <lcd_main_opt>
}
    11da:	ff 91       	pop	r31
    11dc:	ef 91       	pop	r30
    11de:	bf 91       	pop	r27
    11e0:	af 91       	pop	r26
    11e2:	9f 91       	pop	r25
    11e4:	8f 91       	pop	r24
    11e6:	7f 91       	pop	r23
    11e8:	6f 91       	pop	r22
    11ea:	5f 91       	pop	r21
    11ec:	4f 91       	pop	r20
    11ee:	3f 91       	pop	r19
    11f0:	2f 91       	pop	r18
    11f2:	0f 90       	pop	r0
    11f4:	0f be       	out	0x3f, r0	; 63
    11f6:	0f 90       	pop	r0
    11f8:	1f 90       	pop	r1
    11fa:	18 95       	reti

000011fc <aircond_lcd>:
}

void aircond_lcd(void)
{
	uint8_t state;
	LCD_clearScreen();
    11fc:	0e 94 b3 04 	call	0x966	; 0x966 <LCD_clearScreen>
	LCD_displayString("1:onA/C ");
    1200:	81 e7       	ldi	r24, 0x71	; 113
    1202:	92 e0       	ldi	r25, 0x02	; 2
    1204:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_displayString>
	LCD_displayString("2:offA/C");
    1208:	8a e7       	ldi	r24, 0x7A	; 122
    120a:	92 e0       	ldi	r25, 0x02	; 2
    120c:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_displayString>
	LCD_moveCursor(1,0);
    1210:	60 e0       	ldi	r22, 0x00	; 0
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	0e 94 9c 04 	call	0x938	; 0x938 <LCD_moveCursor>
	LCD_displayString("3:Main");
    1218:	83 e8       	ldi	r24, 0x83	; 131
    121a:	92 e0       	ldi	r25, 0x02	; 2
    121c:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_displayString>
	state = KEYPAD_getPressedKey();
    1220:	0e 94 91 02 	call	0x522	; 0x522 <KEYPAD_getPressedKey>
	switch (state)
    1224:	82 33       	cpi	r24, 0x32	; 50
    1226:	39 f0       	breq	.+14     	; 0x1236 <aircond_lcd+0x3a>
    1228:	83 33       	cpi	r24, 0x33	; 51
    122a:	41 f0       	breq	.+16     	; 0x123c <aircond_lcd+0x40>
    122c:	81 33       	cpi	r24, 0x31	; 49
    122e:	41 f4       	brne	.+16     	; 0x1240 <aircond_lcd+0x44>
	{
		case '1':lcd_air_conditioner_on();break;
    1230:	0e 94 21 09 	call	0x1242	; 0x1242 <lcd_air_conditioner_on>
    1234:	08 95       	ret
		case '2': lcd_air_conditioner_off();break;
    1236:	0e 94 54 09 	call	0x12a8	; 0x12a8 <lcd_air_conditioner_off>
    123a:	08 95       	ret
		case '3':lcd_main_opt();break;
    123c:	0e 94 92 08 	call	0x1124	; 0x1124 <lcd_main_opt>
    1240:	08 95       	ret

00001242 <lcd_air_conditioner_on>:
	}
}

lcd_air_conditioner_on(void)
{
    1242:	cf 93       	push	r28
	uint8_t temp,button=1;
	LCD_clearScreen();
    1244:	0e 94 b3 04 	call	0x966	; 0x966 <LCD_clearScreen>
	LCD_moveCursor(0,1);
    1248:	61 e0       	ldi	r22, 0x01	; 1
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	0e 94 9c 04 	call	0x938	; 0x938 <LCD_moveCursor>
	LCD_displayString("air conditioner");
    1250:	8a e8       	ldi	r24, 0x8A	; 138
    1252:	92 e0       	ldi	r25, 0x02	; 2
    1254:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_displayString>
	LCD_moveCursor(1,3);
    1258:	63 e0       	ldi	r22, 0x03	; 3
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	0e 94 9c 04 	call	0x938	; 0x938 <LCD_moveCursor>
	LCD_displayString("RUNING...");
    1260:	8a e9       	ldi	r24, 0x9A	; 154
    1262:	92 e0       	ldi	r25, 0x02	; 2
    1264:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_displayString>
	}
}

lcd_air_conditioner_on(void)
{
	uint8_t temp,button=1;
    1268:	c1 e0       	ldi	r28, 0x01	; 1
	LCD_clearScreen();
	LCD_moveCursor(0,1);
	LCD_displayString("air conditioner");
	LCD_moveCursor(1,3);
	LCD_displayString("RUNING...");
	while (button == 1){
    126a:	14 c0       	rjmp	.+40     	; 0x1294 <lcd_air_conditioner_on+0x52>
		button = GPIO_readPin(PORTB_ID,PIN0_ID);
    126c:	60 e0       	ldi	r22, 0x00	; 0
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	0e 94 20 02 	call	0x440	; 0x440 <GPIO_readPin>
    1274:	c8 2f       	mov	r28, r24
		temp= LM35_getTemperature();
    1276:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <LM35_getTemperature>
		if (temp >= 28)
    127a:	8c 31       	cpi	r24, 0x1C	; 28
    127c:	28 f0       	brcs	.+10     	; 0x1288 <lcd_air_conditioner_on+0x46>
		{
			DcMotor_Rotate(CW,50);
    127e:	62 e3       	ldi	r22, 0x32	; 50
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	0e 94 84 00 	call	0x108	; 0x108 <DcMotor_Rotate>
    1286:	06 c0       	rjmp	.+12     	; 0x1294 <lcd_air_conditioner_on+0x52>
		}
		else if (temp < 28)
    1288:	8c 31       	cpi	r24, 0x1C	; 28
    128a:	20 f4       	brcc	.+8      	; 0x1294 <lcd_air_conditioner_on+0x52>
		{
			DcMotor_Rotate(Stop,0);
    128c:	60 e0       	ldi	r22, 0x00	; 0
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	0e 94 84 00 	call	0x108	; 0x108 <DcMotor_Rotate>
	LCD_clearScreen();
	LCD_moveCursor(0,1);
	LCD_displayString("air conditioner");
	LCD_moveCursor(1,3);
	LCD_displayString("RUNING...");
	while (button == 1){
    1294:	c1 30       	cpi	r28, 0x01	; 1
    1296:	51 f3       	breq	.-44     	; 0x126c <lcd_air_conditioner_on+0x2a>
		else if (temp < 28)
		{
			DcMotor_Rotate(Stop,0);
		}
	}
	DcMotor_Rotate(Stop,0);
    1298:	60 e0       	ldi	r22, 0x00	; 0
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	0e 94 84 00 	call	0x108	; 0x108 <DcMotor_Rotate>
	aircond_lcd();
    12a0:	0e 94 fe 08 	call	0x11fc	; 0x11fc <aircond_lcd>
}
    12a4:	cf 91       	pop	r28
    12a6:	08 95       	ret

000012a8 <lcd_air_conditioner_off>:

lcd_air_conditioner_off(void)
{
	DcMotor_Rotate(Stop,0);
    12a8:	60 e0       	ldi	r22, 0x00	; 0
    12aa:	80 e0       	ldi	r24, 0x00	; 0
    12ac:	0e 94 84 00 	call	0x108	; 0x108 <DcMotor_Rotate>
	LCD_clearScreen();
    12b0:	0e 94 b3 04 	call	0x966	; 0x966 <LCD_clearScreen>
	LCD_moveCursor(0,1);
    12b4:	61 e0       	ldi	r22, 0x01	; 1
    12b6:	80 e0       	ldi	r24, 0x00	; 0
    12b8:	0e 94 9c 04 	call	0x938	; 0x938 <LCD_moveCursor>
	LCD_displayString("air conditioner");
    12bc:	8a e8       	ldi	r24, 0x8A	; 138
    12be:	92 e0       	ldi	r25, 0x02	; 2
    12c0:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_displayString>
	LCD_moveCursor(1,3);
    12c4:	63 e0       	ldi	r22, 0x03	; 3
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	0e 94 9c 04 	call	0x938	; 0x938 <LCD_moveCursor>
	LCD_displayString("closed...");
    12cc:	84 ea       	ldi	r24, 0xA4	; 164
    12ce:	92 e0       	ldi	r25, 0x02	; 2
    12d0:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_displayString>
    12d4:	2f e3       	ldi	r18, 0x3F	; 63
    12d6:	8d e0       	ldi	r24, 0x0D	; 13
    12d8:	93 e0       	ldi	r25, 0x03	; 3
    12da:	21 50       	subi	r18, 0x01	; 1
    12dc:	80 40       	sbci	r24, 0x00	; 0
    12de:	90 40       	sbci	r25, 0x00	; 0
    12e0:	e1 f7       	brne	.-8      	; 0x12da <lcd_air_conditioner_off+0x32>
    12e2:	00 c0       	rjmp	.+0      	; 0x12e4 <lcd_air_conditioner_off+0x3c>
    12e4:	00 00       	nop
	_delay_ms(1000);
	aircond_lcd();
    12e6:	0e 94 fe 08 	call	0x11fc	; 0x11fc <aircond_lcd>
    12ea:	08 95       	ret

000012ec <choose_led_lcd>:
}

choose_led_lcd(void)
{
	uint8_t state,led;
	LCD_clearScreen();
    12ec:	0e 94 b3 04 	call	0x966	; 0x966 <LCD_clearScreen>
	LCD_moveCursor(0,0);
    12f0:	60 e0       	ldi	r22, 0x00	; 0
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	0e 94 9c 04 	call	0x938	; 0x938 <LCD_moveCursor>
	LCD_displayString("1:led_on/2:ledoff");
    12f8:	8e ea       	ldi	r24, 0xAE	; 174
    12fa:	92 e0       	ldi	r25, 0x02	; 2
    12fc:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_displayString>
	LCD_moveCursor(1,0);
    1300:	60 e0       	ldi	r22, 0x00	; 0
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	0e 94 9c 04 	call	0x938	; 0x938 <LCD_moveCursor>
	LCD_displayString("3:main");
    1308:	80 ec       	ldi	r24, 0xC0	; 192
    130a:	92 e0       	ldi	r25, 0x02	; 2
    130c:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_displayString>
	state =  KEYPAD_getPressedKey();
    1310:	0e 94 91 02 	call	0x522	; 0x522 <KEYPAD_getPressedKey>
    1314:	ef e4       	ldi	r30, 0x4F	; 79
    1316:	f3 ec       	ldi	r31, 0xC3	; 195
    1318:	31 97       	sbiw	r30, 0x01	; 1
    131a:	f1 f7       	brne	.-4      	; 0x1318 <choose_led_lcd+0x2c>
    131c:	00 c0       	rjmp	.+0      	; 0x131e <choose_led_lcd+0x32>
    131e:	00 00       	nop
	_delay_ms(200);
	switch(state)
    1320:	82 33       	cpi	r24, 0x32	; 50
    1322:	a9 f0       	breq	.+42     	; 0x134e <choose_led_lcd+0x62>
    1324:	83 33       	cpi	r24, 0x33	; 51
    1326:	21 f1       	breq	.+72     	; 0x1370 <choose_led_lcd+0x84>
    1328:	81 33       	cpi	r24, 0x31	; 49
    132a:	21 f5       	brne	.+72     	; 0x1374 <choose_led_lcd+0x88>
	{
	case '1':
	LCD_clearScreen();
    132c:	0e 94 b3 04 	call	0x966	; 0x966 <LCD_clearScreen>
	LCD_displayString("open led");
    1330:	87 ec       	ldi	r24, 0xC7	; 199
    1332:	92 e0       	ldi	r25, 0x02	; 2
    1334:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_displayString>
    1338:	8f e4       	ldi	r24, 0x4F	; 79
    133a:	93 ec       	ldi	r25, 0xC3	; 195
    133c:	01 97       	sbiw	r24, 0x01	; 1
    133e:	f1 f7       	brne	.-4      	; 0x133c <choose_led_lcd+0x50>
    1340:	00 c0       	rjmp	.+0      	; 0x1342 <choose_led_lcd+0x56>
    1342:	00 00       	nop
	_delay_ms(200);
	led = KEYPAD_getPressedKey();
    1344:	0e 94 91 02 	call	0x522	; 0x522 <KEYPAD_getPressedKey>
	open_led_lcd(led);
    1348:	0e 94 bb 09 	call	0x1376	; 0x1376 <open_led_lcd>
	break;
    134c:	08 95       	ret
	
	case '2':
	LCD_clearScreen();
    134e:	0e 94 b3 04 	call	0x966	; 0x966 <LCD_clearScreen>
	LCD_displayString("close led");
    1352:	80 ed       	ldi	r24, 0xD0	; 208
    1354:	92 e0       	ldi	r25, 0x02	; 2
    1356:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_displayString>
    135a:	ef e4       	ldi	r30, 0x4F	; 79
    135c:	f3 ec       	ldi	r31, 0xC3	; 195
    135e:	31 97       	sbiw	r30, 0x01	; 1
    1360:	f1 f7       	brne	.-4      	; 0x135e <choose_led_lcd+0x72>
    1362:	00 c0       	rjmp	.+0      	; 0x1364 <choose_led_lcd+0x78>
    1364:	00 00       	nop
	_delay_ms(200);
	led = KEYPAD_getPressedKey();
    1366:	0e 94 91 02 	call	0x522	; 0x522 <KEYPAD_getPressedKey>
	close_led_lcd(led);
    136a:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <close_led_lcd>
	break;
    136e:	08 95       	ret
	case '3':lcd_main_opt();break;
    1370:	0e 94 92 08 	call	0x1124	; 0x1124 <lcd_main_opt>
    1374:	08 95       	ret

00001376 <open_led_lcd>:
    1376:	ef e4       	ldi	r30, 0x4F	; 79
    1378:	f3 ec       	ldi	r31, 0xC3	; 195
    137a:	31 97       	sbiw	r30, 0x01	; 1
    137c:	f1 f7       	brne	.-4      	; 0x137a <open_led_lcd+0x4>
    137e:	00 c0       	rjmp	.+0      	; 0x1380 <open_led_lcd+0xa>
    1380:	00 00       	nop
}

void open_led_lcd (uint8_t led_num)
{
	_delay_ms(200);
	switch (led_num)
    1382:	83 33       	cpi	r24, 0x33	; 51
    1384:	a9 f0       	breq	.+42     	; 0x13b0 <open_led_lcd+0x3a>
    1386:	28 f4       	brcc	.+10     	; 0x1392 <open_led_lcd+0x1c>
    1388:	81 33       	cpi	r24, 0x31	; 49
    138a:	41 f0       	breq	.+16     	; 0x139c <open_led_lcd+0x26>
    138c:	82 33       	cpi	r24, 0x32	; 50
    138e:	59 f0       	breq	.+22     	; 0x13a6 <open_led_lcd+0x30>
    1390:	1d c0       	rjmp	.+58     	; 0x13cc <open_led_lcd+0x56>
    1392:	84 33       	cpi	r24, 0x34	; 52
    1394:	91 f0       	breq	.+36     	; 0x13ba <open_led_lcd+0x44>
    1396:	85 33       	cpi	r24, 0x35	; 53
    1398:	a9 f0       	breq	.+42     	; 0x13c4 <open_led_lcd+0x4e>
    139a:	18 c0       	rjmp	.+48     	; 0x13cc <open_led_lcd+0x56>
	{
		case '1':LED_ON(PORTA_ID,LED1);break;
    139c:	62 e0       	ldi	r22, 0x02	; 2
    139e:	80 e0       	ldi	r24, 0x00	; 0
    13a0:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LED_ON>
    13a4:	13 c0       	rjmp	.+38     	; 0x13cc <open_led_lcd+0x56>
		case '2':LED_ON(PORTC_ID,LED2);break;
    13a6:	66 e0       	ldi	r22, 0x06	; 6
    13a8:	82 e0       	ldi	r24, 0x02	; 2
    13aa:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LED_ON>
    13ae:	0e c0       	rjmp	.+28     	; 0x13cc <open_led_lcd+0x56>
		case '3':LED_ON(PORTC_ID,LED3);break;
    13b0:	67 e0       	ldi	r22, 0x07	; 7
    13b2:	82 e0       	ldi	r24, 0x02	; 2
    13b4:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LED_ON>
    13b8:	09 c0       	rjmp	.+18     	; 0x13cc <open_led_lcd+0x56>
		case '4':LED_ON(PORTD_ID,LED4);break;
    13ba:	63 e0       	ldi	r22, 0x03	; 3
    13bc:	83 e0       	ldi	r24, 0x03	; 3
    13be:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LED_ON>
    13c2:	04 c0       	rjmp	.+8      	; 0x13cc <open_led_lcd+0x56>
		case '5':LED_ON(PORTD_ID,LED5);break;
    13c4:	64 e0       	ldi	r22, 0x04	; 4
    13c6:	83 e0       	ldi	r24, 0x03	; 3
    13c8:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LED_ON>

	}
	choose_led_lcd();
    13cc:	0e 94 76 09 	call	0x12ec	; 0x12ec <choose_led_lcd>
    13d0:	08 95       	ret

000013d2 <close_led_lcd>:
    13d2:	ef e4       	ldi	r30, 0x4F	; 79
    13d4:	f3 ec       	ldi	r31, 0xC3	; 195
    13d6:	31 97       	sbiw	r30, 0x01	; 1
    13d8:	f1 f7       	brne	.-4      	; 0x13d6 <close_led_lcd+0x4>
    13da:	00 c0       	rjmp	.+0      	; 0x13dc <close_led_lcd+0xa>
    13dc:	00 00       	nop
}

void close_led_lcd (uint8_t led_num)
{
	_delay_ms(200);
	switch (led_num)
    13de:	83 33       	cpi	r24, 0x33	; 51
    13e0:	a9 f0       	breq	.+42     	; 0x140c <close_led_lcd+0x3a>
    13e2:	28 f4       	brcc	.+10     	; 0x13ee <close_led_lcd+0x1c>
    13e4:	81 33       	cpi	r24, 0x31	; 49
    13e6:	41 f0       	breq	.+16     	; 0x13f8 <close_led_lcd+0x26>
    13e8:	82 33       	cpi	r24, 0x32	; 50
    13ea:	59 f0       	breq	.+22     	; 0x1402 <close_led_lcd+0x30>
    13ec:	1d c0       	rjmp	.+58     	; 0x1428 <close_led_lcd+0x56>
    13ee:	84 33       	cpi	r24, 0x34	; 52
    13f0:	91 f0       	breq	.+36     	; 0x1416 <close_led_lcd+0x44>
    13f2:	85 33       	cpi	r24, 0x35	; 53
    13f4:	a9 f0       	breq	.+42     	; 0x1420 <close_led_lcd+0x4e>
    13f6:	18 c0       	rjmp	.+48     	; 0x1428 <close_led_lcd+0x56>
	{
		case '1':LED_OFF(PORTA_ID,LED1);break;
    13f8:	62 e0       	ldi	r22, 0x02	; 2
    13fa:	80 e0       	ldi	r24, 0x00	; 0
    13fc:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <LED_OFF>
    1400:	13 c0       	rjmp	.+38     	; 0x1428 <close_led_lcd+0x56>
		case '2':LED_OFF(PORTC_ID,LED2);break;
    1402:	66 e0       	ldi	r22, 0x06	; 6
    1404:	82 e0       	ldi	r24, 0x02	; 2
    1406:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <LED_OFF>
    140a:	0e c0       	rjmp	.+28     	; 0x1428 <close_led_lcd+0x56>
		case '3':LED_OFF(PORTC_ID,LED3);break;
    140c:	67 e0       	ldi	r22, 0x07	; 7
    140e:	82 e0       	ldi	r24, 0x02	; 2
    1410:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <LED_OFF>
    1414:	09 c0       	rjmp	.+18     	; 0x1428 <close_led_lcd+0x56>
		case '4':LED_OFF(PORTD_ID,LED4);break;
    1416:	63 e0       	ldi	r22, 0x03	; 3
    1418:	83 e0       	ldi	r24, 0x03	; 3
    141a:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <LED_OFF>
    141e:	04 c0       	rjmp	.+8      	; 0x1428 <close_led_lcd+0x56>
		case '5':LED_OFF(PORTD_ID,LED5);break;
    1420:	64 e0       	ldi	r22, 0x04	; 4
    1422:	83 e0       	ldi	r24, 0x03	; 3
    1424:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <LED_OFF>

	}
	choose_led_lcd();
    1428:	0e 94 76 09 	call	0x12ec	; 0x12ec <choose_led_lcd>
    142c:	08 95       	ret

0000142e <door_control>:
}

void door_control(void)
{
	uint8_t state;
	DDRD |= (1<<PD5);	/* Make OC1A pin as output */
    142e:	81 b3       	in	r24, 0x11	; 17
    1430:	80 62       	ori	r24, 0x20	; 32
    1432:	81 bb       	out	0x11, r24	; 17
	TCNT1 = 0;			/* Set timer1 count zero */
    1434:	1d bc       	out	0x2d, r1	; 45
    1436:	1c bc       	out	0x2c, r1	; 44
	ICR1 = 3124;		/* Set TOP count for timer1 in ICR1 register */
    1438:	84 e3       	ldi	r24, 0x34	; 52
    143a:	9c e0       	ldi	r25, 0x0C	; 12
    143c:	97 bd       	out	0x27, r25	; 39
    143e:	86 bd       	out	0x26, r24	; 38

	/* Set Fast PWM, TOP in ICR1, Clear OC1A on compare match, clk/64 */
	TCCR1A = (1<<WGM11)|(1<<COM1A1);
    1440:	82 e8       	ldi	r24, 0x82	; 130
    1442:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11);
    1444:	8b e1       	ldi	r24, 0x1B	; 27
    1446:	8e bd       	out	0x2e, r24	; 46
	UART_sendString("1:open the door \r");
    1448:	8a ed       	ldi	r24, 0xDA	; 218
    144a:	92 e0       	ldi	r25, 0x02	; 2
    144c:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString("2:close the door \r");
    1450:	8c ee       	ldi	r24, 0xEC	; 236
    1452:	92 e0       	ldi	r25, 0x02	; 2
    1454:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString("3:Main \r");
    1458:	8f ef       	ldi	r24, 0xFF	; 255
    145a:	92 e0       	ldi	r25, 0x02	; 2
    145c:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	LCD_clearScreen();
    1460:	0e 94 b3 04 	call	0x966	; 0x966 <LCD_clearScreen>
	LCD_moveCursor(0,1);
    1464:	61 e0       	ldi	r22, 0x01	; 1
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	0e 94 9c 04 	call	0x938	; 0x938 <LCD_moveCursor>
	LCD_displayString("door control");
    146c:	88 e0       	ldi	r24, 0x08	; 8
    146e:	93 e0       	ldi	r25, 0x03	; 3
    1470:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_displayString>
	while(1)
	{
		state=UART_recieveByte();
    1474:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <UART_recieveByte>
		switch (state)
    1478:	82 33       	cpi	r24, 0x32	; 50
    147a:	29 f1       	breq	.+74     	; 0x14c6 <door_control+0x98>
    147c:	83 33       	cpi	r24, 0x33	; 51
    147e:	09 f4       	brne	.+2      	; 0x1482 <door_control+0x54>
    1480:	42 c0       	rjmp	.+132    	; 0x1506 <door_control+0xd8>
    1482:	81 33       	cpi	r24, 0x31	; 49
    1484:	b9 f7       	brne	.-18     	; 0x1474 <door_control+0x46>
		{
			case '1':
			LCD_clearScreen();
    1486:	0e 94 b3 04 	call	0x966	; 0x966 <LCD_clearScreen>
			LCD_moveCursor(0,6);
    148a:	66 e0       	ldi	r22, 0x06	; 6
    148c:	80 e0       	ldi	r24, 0x00	; 0
    148e:	0e 94 9c 04 	call	0x938	; 0x938 <LCD_moveCursor>
			LCD_displayString("door");
    1492:	85 e1       	ldi	r24, 0x15	; 21
    1494:	93 e0       	ldi	r25, 0x03	; 3
    1496:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_displayString>
			LCD_moveCursor(1,3);
    149a:	63 e0       	ldi	r22, 0x03	; 3
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	0e 94 9c 04 	call	0x938	; 0x938 <LCD_moveCursor>
			LCD_displayString("is opening...");
    14a2:	8a e1       	ldi	r24, 0x1A	; 26
    14a4:	93 e0       	ldi	r25, 0x03	; 3
    14a6:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_displayString>
			OCR1A = 37.5;	/* Set servo at +90° position */
    14aa:	85 e2       	ldi	r24, 0x25	; 37
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	9b bd       	out	0x2b, r25	; 43
    14b0:	8a bd       	out	0x2a, r24	; 42
    14b2:	2f ed       	ldi	r18, 0xDF	; 223
    14b4:	83 e9       	ldi	r24, 0x93	; 147
    14b6:	94 e0       	ldi	r25, 0x04	; 4
    14b8:	21 50       	subi	r18, 0x01	; 1
    14ba:	80 40       	sbci	r24, 0x00	; 0
    14bc:	90 40       	sbci	r25, 0x00	; 0
    14be:	e1 f7       	brne	.-8      	; 0x14b8 <door_control+0x8a>
    14c0:	00 c0       	rjmp	.+0      	; 0x14c2 <door_control+0x94>
    14c2:	00 00       	nop
    14c4:	d7 cf       	rjmp	.-82     	; 0x1474 <door_control+0x46>
			_delay_ms(1500);
			break;
			case '2':
			LCD_clearScreen();
    14c6:	0e 94 b3 04 	call	0x966	; 0x966 <LCD_clearScreen>
			LCD_moveCursor(0,6);
    14ca:	66 e0       	ldi	r22, 0x06	; 6
    14cc:	80 e0       	ldi	r24, 0x00	; 0
    14ce:	0e 94 9c 04 	call	0x938	; 0x938 <LCD_moveCursor>
			LCD_displayString("door");
    14d2:	85 e1       	ldi	r24, 0x15	; 21
    14d4:	93 e0       	ldi	r25, 0x03	; 3
    14d6:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_displayString>
			LCD_moveCursor(1,3);
    14da:	63 e0       	ldi	r22, 0x03	; 3
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	0e 94 9c 04 	call	0x938	; 0x938 <LCD_moveCursor>
			LCD_displayString("is closing...");
    14e2:	88 e2       	ldi	r24, 0x28	; 40
    14e4:	93 e0       	ldi	r25, 0x03	; 3
    14e6:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_displayString>
			OCR1A = 23.4375;	/* Set servo shaft at 0° position */
    14ea:	87 e1       	ldi	r24, 0x17	; 23
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	9b bd       	out	0x2b, r25	; 43
    14f0:	8a bd       	out	0x2a, r24	; 42
    14f2:	2f ed       	ldi	r18, 0xDF	; 223
    14f4:	83 e9       	ldi	r24, 0x93	; 147
    14f6:	94 e0       	ldi	r25, 0x04	; 4
    14f8:	21 50       	subi	r18, 0x01	; 1
    14fa:	80 40       	sbci	r24, 0x00	; 0
    14fc:	90 40       	sbci	r25, 0x00	; 0
    14fe:	e1 f7       	brne	.-8      	; 0x14f8 <door_control+0xca>
    1500:	00 c0       	rjmp	.+0      	; 0x1502 <door_control+0xd4>
    1502:	00 00       	nop
    1504:	b7 cf       	rjmp	.-146    	; 0x1474 <door_control+0x46>
			_delay_ms(1500);
			break;
			case '3':main_opt();break;
    1506:	0e 94 86 0a 	call	0x150c	; 0x150c <main_opt>
    150a:	b4 cf       	rjmp	.-152    	; 0x1474 <door_control+0x46>

0000150c <main_opt>:
}

void main_opt(void)
{
	uint8_t device;
	UART_sendString("**********choose the device********** \r");
    150c:	86 e3       	ldi	r24, 0x36	; 54
    150e:	93 e0       	ldi	r25, 0x03	; 3
    1510:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	LCD_clearScreen();
    1514:	0e 94 b3 04 	call	0x966	; 0x966 <LCD_clearScreen>
	LCD_moveCursor(0,1);
    1518:	61 e0       	ldi	r22, 0x01	; 1
    151a:	80 e0       	ldi	r24, 0x00	; 0
    151c:	0e 94 9c 04 	call	0x938	; 0x938 <LCD_moveCursor>
	LCD_displayString("main options");
    1520:	8e e5       	ldi	r24, 0x5E	; 94
    1522:	93 e0       	ldi	r25, 0x03	; 3
    1524:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_displayString>
	UART_sendString("1:air conditioner \r");
    1528:	8b e6       	ldi	r24, 0x6B	; 107
    152a:	93 e0       	ldi	r25, 0x03	; 3
    152c:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString("2:leds control\r");
    1530:	8f e7       	ldi	r24, 0x7F	; 127
    1532:	93 e0       	ldi	r25, 0x03	; 3
    1534:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString("3:dimmer circuit \r");
    1538:	8f e8       	ldi	r24, 0x8F	; 143
    153a:	93 e0       	ldi	r25, 0x03	; 3
    153c:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString("4:door control\r");
    1540:	82 ea       	ldi	r24, 0xA2	; 162
    1542:	93 e0       	ldi	r25, 0x03	; 3
    1544:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString("5:adding or removing users \r");
    1548:	82 eb       	ldi	r24, 0xB2	; 178
    154a:	93 e0       	ldi	r25, 0x03	; 3
    154c:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString("6:return to the first page \r");
    1550:	8f ec       	ldi	r24, 0xCF	; 207
    1552:	93 e0       	ldi	r25, 0x03	; 3
    1554:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString("************************************* \r");
    1558:	8e e6       	ldi	r24, 0x6E	; 110
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString(" \r");
    1560:	81 e5       	ldi	r24, 0x51	; 81
    1562:	95 e0       	ldi	r25, 0x05	; 5
    1564:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	device = UART_recieveByte();
    1568:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <UART_recieveByte>
	switch (device)
    156c:	83 33       	cpi	r24, 0x33	; 51
    156e:	91 f0       	breq	.+36     	; 0x1594 <main_opt+0x88>
    1570:	28 f4       	brcc	.+10     	; 0x157c <main_opt+0x70>
    1572:	81 33       	cpi	r24, 0x31	; 49
    1574:	49 f0       	breq	.+18     	; 0x1588 <main_opt+0x7c>
    1576:	82 33       	cpi	r24, 0x32	; 50
    1578:	51 f0       	breq	.+20     	; 0x158e <main_opt+0x82>
    157a:	08 95       	ret
    157c:	85 33       	cpi	r24, 0x35	; 53
    157e:	79 f0       	breq	.+30     	; 0x159e <main_opt+0x92>
    1580:	60 f0       	brcs	.+24     	; 0x159a <main_opt+0x8e>
    1582:	86 33       	cpi	r24, 0x36	; 54
    1584:	79 f0       	breq	.+30     	; 0x15a4 <main_opt+0x98>
    1586:	08 95       	ret
	{
		case '1':aircond_uart();break;
    1588:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <aircond_uart>
    158c:	08 95       	ret
		case '2':choose_led_uart();break;
    158e:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <choose_led_uart>
    1592:	08 95       	ret
		case '3':dimmer_uart();break;
    1594:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <dimmer_uart>
    1598:	08 95       	ret
		case '4':door_control();break;
    159a:	0e 94 17 0a 	call	0x142e	; 0x142e <door_control>
		case '5':user_control();break;
    159e:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <user_control>
    15a2:	08 95       	ret
		case '6':smart_home();break;
    15a4:	0e 94 b4 0b 	call	0x1768	; 0x1768 <smart_home>
    15a8:	08 95       	ret

000015aa <choose_led_uart>:
}

void choose_led_uart(void)
{
	uint8_t state,led;
	UART_sendString("***************led menu************** \r");
    15aa:	8c ee       	ldi	r24, 0xEC	; 236
    15ac:	93 e0       	ldi	r25, 0x03	; 3
    15ae:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString("1:open led \r");
    15b2:	84 e1       	ldi	r24, 0x14	; 20
    15b4:	94 e0       	ldi	r25, 0x04	; 4
    15b6:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString("2:close led \r");
    15ba:	81 e2       	ldi	r24, 0x21	; 33
    15bc:	94 e0       	ldi	r25, 0x04	; 4
    15be:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString("3:Main \r");
    15c2:	8f ef       	ldi	r24, 0xFF	; 255
    15c4:	92 e0       	ldi	r25, 0x02	; 2
    15c6:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	LCD_clearScreen();
    15ca:	0e 94 b3 04 	call	0x966	; 0x966 <LCD_clearScreen>
	LCD_moveCursor(4,1);
    15ce:	61 e0       	ldi	r22, 0x01	; 1
    15d0:	84 e0       	ldi	r24, 0x04	; 4
    15d2:	0e 94 9c 04 	call	0x938	; 0x938 <LCD_moveCursor>
	LCD_displayString("led");
    15d6:	86 ed       	ldi	r24, 0xD6	; 214
    15d8:	92 e0       	ldi	r25, 0x02	; 2
    15da:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_displayString>
	LCD_moveCursor(1,3);
    15de:	63 e0       	ldi	r22, 0x03	; 3
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	0e 94 9c 04 	call	0x938	; 0x938 <LCD_moveCursor>
	LCD_displayString("RUNING...");
    15e6:	8a e9       	ldi	r24, 0x9A	; 154
    15e8:	92 e0       	ldi	r25, 0x02	; 2
    15ea:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_displayString>
	state = UART_recieveByte();
    15ee:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <UART_recieveByte>
	switch (state)
    15f2:	82 33       	cpi	r24, 0x32	; 50
    15f4:	69 f0       	breq	.+26     	; 0x1610 <choose_led_uart+0x66>
    15f6:	83 33       	cpi	r24, 0x33	; 51
    15f8:	a1 f0       	breq	.+40     	; 0x1622 <choose_led_uart+0x78>
    15fa:	81 33       	cpi	r24, 0x31	; 49
    15fc:	e9 f4       	brne	.+58     	; 0x1638 <choose_led_uart+0x8e>
	{
		case '1':
		UART_sendString("press the led number \r");
    15fe:	8f e2       	ldi	r24, 0x2F	; 47
    1600:	94 e0       	ldi	r25, 0x04	; 4
    1602:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
		led = UART_recieveByte();
    1606:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <UART_recieveByte>
		open_led(led);
    160a:	0e 94 88 0c 	call	0x1910	; 0x1910 <open_led>
		break;
    160e:	08 95       	ret
		
		case'2':
		UART_sendString("press the led number \r");
    1610:	8f e2       	ldi	r24, 0x2F	; 47
    1612:	94 e0       	ldi	r25, 0x04	; 4
    1614:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
		led = UART_recieveByte();
    1618:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <UART_recieveByte>
		close_led(led);
    161c:	0e 94 b0 0c 	call	0x1960	; 0x1960 <close_led>
		break;
    1620:	08 95       	ret
		
		case '3':
		if (type == '1')
    1622:	80 91 d9 05 	lds	r24, 0x05D9	; 0x8005d9 <type>
    1626:	81 33       	cpi	r24, 0x31	; 49
    1628:	19 f4       	brne	.+6      	; 0x1630 <choose_led_uart+0x86>
		{
			main_opt();break;
    162a:	0e 94 86 0a 	call	0x150c	; 0x150c <main_opt>
    162e:	08 95       	ret
		}
		if (type == '2')
    1630:	82 33       	cpi	r24, 0x32	; 50
    1632:	11 f4       	brne	.+4      	; 0x1638 <choose_led_uart+0x8e>
		{
			user_main_opt();break;
    1634:	0e 94 1d 0b 	call	0x163a	; 0x163a <user_main_opt>
    1638:	08 95       	ret

0000163a <user_main_opt>:
}

void user_main_opt(void)
{
	uint8_t device;
	UART_sendString("**********choose the device********** \r");
    163a:	86 e3       	ldi	r24, 0x36	; 54
    163c:	93 e0       	ldi	r25, 0x03	; 3
    163e:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString("1:air conditioner \r");
    1642:	8b e6       	ldi	r24, 0x6B	; 107
    1644:	93 e0       	ldi	r25, 0x03	; 3
    1646:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString("2:leds control\r");
    164a:	8f e7       	ldi	r24, 0x7F	; 127
    164c:	93 e0       	ldi	r25, 0x03	; 3
    164e:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString("3:dimmer circuit \r");
    1652:	8f e8       	ldi	r24, 0x8F	; 143
    1654:	93 e0       	ldi	r25, 0x03	; 3
    1656:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString("4:return to the first page \r");
    165a:	86 e4       	ldi	r24, 0x46	; 70
    165c:	94 e0       	ldi	r25, 0x04	; 4
    165e:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString("************************************* \r");
    1662:	8e e6       	ldi	r24, 0x6E	; 110
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString(" \r");
    166a:	81 e5       	ldi	r24, 0x51	; 81
    166c:	95 e0       	ldi	r25, 0x05	; 5
    166e:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	device = UART_recieveByte();
    1672:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <UART_recieveByte>
	switch (device)
    1676:	82 33       	cpi	r24, 0x32	; 50
    1678:	61 f0       	breq	.+24     	; 0x1692 <user_main_opt+0x58>
    167a:	18 f4       	brcc	.+6      	; 0x1682 <user_main_opt+0x48>
    167c:	81 33       	cpi	r24, 0x31	; 49
    167e:	31 f0       	breq	.+12     	; 0x168c <user_main_opt+0x52>
    1680:	08 95       	ret
    1682:	83 33       	cpi	r24, 0x33	; 51
    1684:	49 f0       	breq	.+18     	; 0x1698 <user_main_opt+0x5e>
    1686:	84 33       	cpi	r24, 0x34	; 52
    1688:	51 f0       	breq	.+20     	; 0x169e <user_main_opt+0x64>
    168a:	08 95       	ret
	{
		case '1':aircond_uart();break;
    168c:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <aircond_uart>
    1690:	08 95       	ret
		case '2':choose_led_uart();break;
    1692:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <choose_led_uart>
    1696:	08 95       	ret
		case '3':dimmer_uart();break;
    1698:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <dimmer_uart>
    169c:	08 95       	ret
		case '4':smart_home();break;
    169e:	0e 94 b4 0b 	call	0x1768	; 0x1768 <smart_home>
    16a2:	08 95       	ret

000016a4 <dimmer_uart>:
}

void dimmer_uart(void)
{
	uint8_t percentage;
	UART_sendString("choose lamp percentage \r");
    16a4:	83 e6       	ldi	r24, 0x63	; 99
    16a6:	94 e0       	ldi	r25, 0x04	; 4
    16a8:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
    16ac:	2f e3       	ldi	r18, 0x3F	; 63
    16ae:	8d e0       	ldi	r24, 0x0D	; 13
    16b0:	93 e0       	ldi	r25, 0x03	; 3
    16b2:	21 50       	subi	r18, 0x01	; 1
    16b4:	80 40       	sbci	r24, 0x00	; 0
    16b6:	90 40       	sbci	r25, 0x00	; 0
    16b8:	e1 f7       	brne	.-8      	; 0x16b2 <dimmer_uart+0xe>
    16ba:	00 c0       	rjmp	.+0      	; 0x16bc <dimmer_uart+0x18>
    16bc:	00 00       	nop
	_delay_ms(1000);
	UART_sendString("1: 0% \r");
    16be:	8c e7       	ldi	r24, 0x7C	; 124
    16c0:	94 e0       	ldi	r25, 0x04	; 4
    16c2:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString("2: 25% \r");
    16c6:	84 e8       	ldi	r24, 0x84	; 132
    16c8:	94 e0       	ldi	r25, 0x04	; 4
    16ca:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString("3: 50% \r");
    16ce:	8d e8       	ldi	r24, 0x8D	; 141
    16d0:	94 e0       	ldi	r25, 0x04	; 4
    16d2:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString("4: 75% \r");
    16d6:	86 e9       	ldi	r24, 0x96	; 150
    16d8:	94 e0       	ldi	r25, 0x04	; 4
    16da:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString("5: 100% \r");
    16de:	8f e9       	ldi	r24, 0x9F	; 159
    16e0:	94 e0       	ldi	r25, 0x04	; 4
    16e2:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	LCD_clearScreen();
    16e6:	0e 94 b3 04 	call	0x966	; 0x966 <LCD_clearScreen>
	LCD_moveCursor(0,1);
    16ea:	61 e0       	ldi	r22, 0x01	; 1
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    16ee:	0e 94 9c 04 	call	0x938	; 0x938 <LCD_moveCursor>
	LCD_displayString("dimmer lamp");
    16f2:	89 ea       	ldi	r24, 0xA9	; 169
    16f4:	94 e0       	ldi	r25, 0x04	; 4
    16f6:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_displayString>
	LCD_moveCursor(1,3);
    16fa:	63 e0       	ldi	r22, 0x03	; 3
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	0e 94 9c 04 	call	0x938	; 0x938 <LCD_moveCursor>
	LCD_displayString("RUNING...");
    1702:	8a e9       	ldi	r24, 0x9A	; 154
    1704:	92 e0       	ldi	r25, 0x02	; 2
    1706:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_displayString>
	percentage = UART_recieveByte();
    170a:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <UART_recieveByte>
	switch (percentage)
    170e:	83 33       	cpi	r24, 0x33	; 51
    1710:	99 f0       	breq	.+38     	; 0x1738 <dimmer_uart+0x94>
    1712:	28 f4       	brcc	.+10     	; 0x171e <dimmer_uart+0x7a>
    1714:	81 33       	cpi	r24, 0x31	; 49
    1716:	41 f0       	breq	.+16     	; 0x1728 <dimmer_uart+0x84>
    1718:	82 33       	cpi	r24, 0x32	; 50
    171a:	51 f0       	breq	.+20     	; 0x1730 <dimmer_uart+0x8c>
    171c:	18 c0       	rjmp	.+48     	; 0x174e <dimmer_uart+0xaa>
    171e:	84 33       	cpi	r24, 0x34	; 52
    1720:	79 f0       	breq	.+30     	; 0x1740 <dimmer_uart+0x9c>
    1722:	85 33       	cpi	r24, 0x35	; 53
    1724:	89 f0       	breq	.+34     	; 0x1748 <dimmer_uart+0xa4>
    1726:	13 c0       	rjmp	.+38     	; 0x174e <dimmer_uart+0xaa>
	{
		case '1':TIMER0_INIT(0);break;
    1728:	80 e0       	ldi	r24, 0x00	; 0
    172a:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <TIMER0_INIT>
    172e:	0f c0       	rjmp	.+30     	; 0x174e <dimmer_uart+0xaa>
		case '2':TIMER0_INIT(25);break;
    1730:	89 e1       	ldi	r24, 0x19	; 25
    1732:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <TIMER0_INIT>
    1736:	0b c0       	rjmp	.+22     	; 0x174e <dimmer_uart+0xaa>
		case '3':TIMER0_INIT(50);break;
    1738:	82 e3       	ldi	r24, 0x32	; 50
    173a:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <TIMER0_INIT>
    173e:	07 c0       	rjmp	.+14     	; 0x174e <dimmer_uart+0xaa>
		case '4':TIMER0_INIT(75);break;
    1740:	8b e4       	ldi	r24, 0x4B	; 75
    1742:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <TIMER0_INIT>
    1746:	03 c0       	rjmp	.+6      	; 0x174e <dimmer_uart+0xaa>
		case '5':TIMER0_INIT(100);break;
    1748:	84 e6       	ldi	r24, 0x64	; 100
    174a:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <TIMER0_INIT>
	}
	if (type == '1')
    174e:	80 91 d9 05 	lds	r24, 0x05D9	; 0x8005d9 <type>
    1752:	81 33       	cpi	r24, 0x31	; 49
    1754:	11 f4       	brne	.+4      	; 0x175a <dimmer_uart+0xb6>
	{
		main_opt();
    1756:	0e 94 86 0a 	call	0x150c	; 0x150c <main_opt>
	}
	if (type == '2')
    175a:	80 91 d9 05 	lds	r24, 0x05D9	; 0x8005d9 <type>
    175e:	82 33       	cpi	r24, 0x32	; 50
    1760:	11 f4       	brne	.+4      	; 0x1766 <dimmer_uart+0xc2>
	{
		user_main_opt();
    1762:	0e 94 1d 0b 	call	0x163a	; 0x163a <user_main_opt>
    1766:	08 95       	ret

00001768 <smart_home>:
}

void smart_home(void)
{
	uint8_t state;
	state = program_init();
    1768:	0e 94 ed 04 	call	0x9da	; 0x9da <program_init>
	switch (state)
    176c:	81 33       	cpi	r24, 0x31	; 49
    176e:	19 f0       	breq	.+6      	; 0x1776 <smart_home+0xe>
    1770:	82 33       	cpi	r24, 0x32	; 50
    1772:	41 f0       	breq	.+16     	; 0x1784 <smart_home+0x1c>
    1774:	08 95       	ret
	{
		case '1':
		admin_prog_init();
    1776:	0e 94 0f 05 	call	0xa1e	; 0xa1e <admin_prog_init>
		alarm_check();
    177a:	0e 94 b5 05 	call	0xb6a	; 0xb6a <alarm_check>
		main_opt();
    177e:	0e 94 86 0a 	call	0x150c	; 0x150c <main_opt>
		break;
    1782:	08 95       	ret
		case '2':
		user_alarm_check();
    1784:	0e 94 a7 06 	call	0xd4e	; 0xd4e <user_alarm_check>
		user_main_opt();
    1788:	0e 94 1d 0b 	call	0x163a	; 0x163a <user_main_opt>
    178c:	08 95       	ret

0000178e <main>:
void close_led_lcd (uint8_t led_num);
void dimmer_lcd(void);


int main(void)
{
    178e:	cf 93       	push	r28
    1790:	df 93       	push	r29
    1792:	00 d0       	rcall	.+0      	; 0x1794 <main+0x6>
    1794:	cd b7       	in	r28, 0x3d	; 61
    1796:	de b7       	in	r29, 0x3e	; 62
	uint8_t device_num;
	TWI_ConfigType twi_conf={address,bit_rate};
    1798:	85 e0       	ldi	r24, 0x05	; 5
    179a:	89 83       	std	Y+1, r24	; 0x01
    179c:	82 e0       	ldi	r24, 0x02	; 2
    179e:	8a 83       	std	Y+2, r24	; 0x02
	TWI_init(&twi_conf);
    17a0:	ce 01       	movw	r24, r28
    17a2:	01 96       	adiw	r24, 0x01	; 1
    17a4:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <TWI_init>
	UART_init(9600);
    17a8:	60 e8       	ldi	r22, 0x80	; 128
    17aa:	75 e2       	ldi	r23, 0x25	; 37
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	0e 94 55 0e 	call	0x1caa	; 0x1caa <UART_init>
	ADC_init();
    17b4:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_init>
	DcMotor_Init();
    17b8:	0e 94 6f 00 	call	0xde	; 0xde <DcMotor_Init>
	LCD_init();
    17bc:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_init>
	DcMotor_Init();
    17c0:	0e 94 6f 00 	call	0xde	; 0xde <DcMotor_Init>
	ADC_init();
    17c4:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_init>
	LED_init();
    17c8:	0e 94 b7 04 	call	0x96e	; 0x96e <LED_init>
	interrupt_init();
    17cc:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <interrupt_init>
	smart_home();
    17d0:	0e 94 b4 0b 	call	0x1768	; 0x1768 <smart_home>
}
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	0f 90       	pop	r0
    17da:	0f 90       	pop	r0
    17dc:	df 91       	pop	r29
    17de:	cf 91       	pop	r28
    17e0:	08 95       	ret

000017e2 <aircond_uart>:
}

void aircond_uart(void)
{
	uint8_t state;
	UART_sendString("********air conditioner menu****** \r");
    17e2:	85 eb       	ldi	r24, 0xB5	; 181
    17e4:	94 e0       	ldi	r25, 0x04	; 4
    17e6:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
    17ea:	2f e3       	ldi	r18, 0x3F	; 63
    17ec:	8d e0       	ldi	r24, 0x0D	; 13
    17ee:	93 e0       	ldi	r25, 0x03	; 3
    17f0:	21 50       	subi	r18, 0x01	; 1
    17f2:	80 40       	sbci	r24, 0x00	; 0
    17f4:	90 40       	sbci	r25, 0x00	; 0
    17f6:	e1 f7       	brne	.-8      	; 0x17f0 <aircond_uart+0xe>
    17f8:	00 c0       	rjmp	.+0      	; 0x17fa <aircond_uart+0x18>
    17fa:	00 00       	nop
	_delay_ms(1000);
	UART_sendString("1:air conditioner on \r");
    17fc:	8a ed       	ldi	r24, 0xDA	; 218
    17fe:	94 e0       	ldi	r25, 0x04	; 4
    1800:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString("2:air conditioner off \r");
    1804:	81 ef       	ldi	r24, 0xF1	; 241
    1806:	94 e0       	ldi	r25, 0x04	; 4
    1808:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString("3:Main \r");
    180c:	8f ef       	ldi	r24, 0xFF	; 255
    180e:	92 e0       	ldi	r25, 0x02	; 2
    1810:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString("************************************* \r");
    1814:	8e e6       	ldi	r24, 0x6E	; 110
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString(" \r");
    181c:	81 e5       	ldi	r24, 0x51	; 81
    181e:	95 e0       	ldi	r25, 0x05	; 5
    1820:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	LCD_clearScreen();
    1824:	0e 94 b3 04 	call	0x966	; 0x966 <LCD_clearScreen>
	LCD_moveCursor(0,1);
    1828:	61 e0       	ldi	r22, 0x01	; 1
    182a:	80 e0       	ldi	r24, 0x00	; 0
    182c:	0e 94 9c 04 	call	0x938	; 0x938 <LCD_moveCursor>
	LCD_displayString("air conditioner");
    1830:	8a e8       	ldi	r24, 0x8A	; 138
    1832:	92 e0       	ldi	r25, 0x02	; 2
    1834:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_displayString>
	LCD_moveCursor(1,3);
    1838:	63 e0       	ldi	r22, 0x03	; 3
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	0e 94 9c 04 	call	0x938	; 0x938 <LCD_moveCursor>
	LCD_displayString("RUNING...");
    1840:	8a e9       	ldi	r24, 0x9A	; 154
    1842:	92 e0       	ldi	r25, 0x02	; 2
    1844:	0e 94 8f 04 	call	0x91e	; 0x91e <LCD_displayString>
	state = UART_recieveByte();
    1848:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <UART_recieveByte>
	switch (state)
    184c:	82 33       	cpi	r24, 0x32	; 50
    184e:	39 f0       	breq	.+14     	; 0x185e <aircond_uart+0x7c>
    1850:	83 33       	cpi	r24, 0x33	; 51
    1852:	41 f0       	breq	.+16     	; 0x1864 <aircond_uart+0x82>
    1854:	81 33       	cpi	r24, 0x31	; 49
    1856:	89 f4       	brne	.+34     	; 0x187a <aircond_uart+0x98>
	{
		case '1':air_conditioner_on();break;
    1858:	0e 94 3e 0c 	call	0x187c	; 0x187c <air_conditioner_on>
    185c:	08 95       	ret
		case '2':air_conditioner_off();break;
    185e:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <air_conditioner_off>
    1862:	08 95       	ret
		case '3':
		if (type == '1')
    1864:	80 91 d9 05 	lds	r24, 0x05D9	; 0x8005d9 <type>
    1868:	81 33       	cpi	r24, 0x31	; 49
    186a:	19 f4       	brne	.+6      	; 0x1872 <aircond_uart+0x90>
		{
		    main_opt();break;	
    186c:	0e 94 86 0a 	call	0x150c	; 0x150c <main_opt>
    1870:	08 95       	ret
		}
		if (type == '2')
    1872:	82 33       	cpi	r24, 0x32	; 50
    1874:	11 f4       	brne	.+4      	; 0x187a <aircond_uart+0x98>
		{
			user_main_opt();break;
    1876:	0e 94 1d 0b 	call	0x163a	; 0x163a <user_main_opt>
    187a:	08 95       	ret

0000187c <air_conditioner_on>:
		}
	}
}

void air_conditioner_on(void)
{
    187c:	cf 93       	push	r28
	uint8_t temp,button=1;
	UART_sendString("      air conditioner runinng...    \r");
    187e:	89 e0       	ldi	r24, 0x09	; 9
    1880:	95 e0       	ldi	r25, 0x05	; 5
    1882:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString(" \r");
    1886:	81 e5       	ldi	r24, 0x51	; 81
    1888:	95 e0       	ldi	r25, 0x05	; 5
    188a:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
    188e:	2f e3       	ldi	r18, 0x3F	; 63
    1890:	8d e0       	ldi	r24, 0x0D	; 13
    1892:	93 e0       	ldi	r25, 0x03	; 3
    1894:	21 50       	subi	r18, 0x01	; 1
    1896:	80 40       	sbci	r24, 0x00	; 0
    1898:	90 40       	sbci	r25, 0x00	; 0
    189a:	e1 f7       	brne	.-8      	; 0x1894 <air_conditioner_on+0x18>
    189c:	00 c0       	rjmp	.+0      	; 0x189e <air_conditioner_on+0x22>
    189e:	00 00       	nop
	}
}

void air_conditioner_on(void)
{
	uint8_t temp,button=1;
    18a0:	c1 e0       	ldi	r28, 0x01	; 1
    18a2:	14 c0       	rjmp	.+40     	; 0x18cc <air_conditioner_on+0x50>
	UART_sendString("      air conditioner runinng...    \r");
	UART_sendString(" \r");
	_delay_ms(1000);
	while (button == 1){
		button = GPIO_readPin(PORTB_ID,PIN0_ID);
    18a4:	60 e0       	ldi	r22, 0x00	; 0
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	0e 94 20 02 	call	0x440	; 0x440 <GPIO_readPin>
    18ac:	c8 2f       	mov	r28, r24
		temp= LM35_getTemperature();
    18ae:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <LM35_getTemperature>
		if (temp >= 28)
    18b2:	8c 31       	cpi	r24, 0x1C	; 28
    18b4:	28 f0       	brcs	.+10     	; 0x18c0 <air_conditioner_on+0x44>
		{
			DcMotor_Rotate(CW,50);
    18b6:	62 e3       	ldi	r22, 0x32	; 50
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	0e 94 84 00 	call	0x108	; 0x108 <DcMotor_Rotate>
    18be:	06 c0       	rjmp	.+12     	; 0x18cc <air_conditioner_on+0x50>
		}
		else if (temp < 28)
    18c0:	8c 31       	cpi	r24, 0x1C	; 28
    18c2:	20 f4       	brcc	.+8      	; 0x18cc <air_conditioner_on+0x50>
		{
			DcMotor_Rotate(Stop,0);
    18c4:	60 e0       	ldi	r22, 0x00	; 0
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	0e 94 84 00 	call	0x108	; 0x108 <DcMotor_Rotate>
{
	uint8_t temp,button=1;
	UART_sendString("      air conditioner runinng...    \r");
	UART_sendString(" \r");
	_delay_ms(1000);
	while (button == 1){
    18cc:	c1 30       	cpi	r28, 0x01	; 1
    18ce:	51 f3       	breq	.-44     	; 0x18a4 <air_conditioner_on+0x28>
		else if (temp < 28)
		{
			DcMotor_Rotate(Stop,0);
		}
	}
	DcMotor_Rotate(Stop,0);
    18d0:	60 e0       	ldi	r22, 0x00	; 0
    18d2:	80 e0       	ldi	r24, 0x00	; 0
    18d4:	0e 94 84 00 	call	0x108	; 0x108 <DcMotor_Rotate>
	aircond_uart();
    18d8:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <aircond_uart>
}
    18dc:	cf 91       	pop	r28
    18de:	08 95       	ret

000018e0 <air_conditioner_off>:

void air_conditioner_off(void)
{
	DcMotor_Rotate(Stop,0);
    18e0:	60 e0       	ldi	r22, 0x00	; 0
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	0e 94 84 00 	call	0x108	; 0x108 <DcMotor_Rotate>
	UART_sendString("      air conditioner closed...    \r");
    18e8:	8f e2       	ldi	r24, 0x2F	; 47
    18ea:	95 e0       	ldi	r25, 0x05	; 5
    18ec:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString(" \r");
    18f0:	81 e5       	ldi	r24, 0x51	; 81
    18f2:	95 e0       	ldi	r25, 0x05	; 5
    18f4:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
    18f8:	2f e3       	ldi	r18, 0x3F	; 63
    18fa:	8d e0       	ldi	r24, 0x0D	; 13
    18fc:	93 e0       	ldi	r25, 0x03	; 3
    18fe:	21 50       	subi	r18, 0x01	; 1
    1900:	80 40       	sbci	r24, 0x00	; 0
    1902:	90 40       	sbci	r25, 0x00	; 0
    1904:	e1 f7       	brne	.-8      	; 0x18fe <air_conditioner_off+0x1e>
    1906:	00 c0       	rjmp	.+0      	; 0x1908 <air_conditioner_off+0x28>
    1908:	00 00       	nop
	_delay_ms(1000);
	aircond_uart();
    190a:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <aircond_uart>
    190e:	08 95       	ret

00001910 <open_led>:
	}
}

void open_led (uint8_t led_num)
{
	switch (led_num)
    1910:	83 33       	cpi	r24, 0x33	; 51
    1912:	a9 f0       	breq	.+42     	; 0x193e <open_led+0x2e>
    1914:	28 f4       	brcc	.+10     	; 0x1920 <open_led+0x10>
    1916:	81 33       	cpi	r24, 0x31	; 49
    1918:	41 f0       	breq	.+16     	; 0x192a <open_led+0x1a>
    191a:	82 33       	cpi	r24, 0x32	; 50
    191c:	59 f0       	breq	.+22     	; 0x1934 <open_led+0x24>
    191e:	1d c0       	rjmp	.+58     	; 0x195a <open_led+0x4a>
    1920:	84 33       	cpi	r24, 0x34	; 52
    1922:	91 f0       	breq	.+36     	; 0x1948 <open_led+0x38>
    1924:	85 33       	cpi	r24, 0x35	; 53
    1926:	a9 f0       	breq	.+42     	; 0x1952 <open_led+0x42>
    1928:	18 c0       	rjmp	.+48     	; 0x195a <open_led+0x4a>
	{
		case '1':LED_ON(PORTA_ID,LED1);break;
    192a:	62 e0       	ldi	r22, 0x02	; 2
    192c:	80 e0       	ldi	r24, 0x00	; 0
    192e:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LED_ON>
    1932:	13 c0       	rjmp	.+38     	; 0x195a <open_led+0x4a>
		case '2':LED_ON(PORTC_ID,LED2);break;
    1934:	66 e0       	ldi	r22, 0x06	; 6
    1936:	82 e0       	ldi	r24, 0x02	; 2
    1938:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LED_ON>
    193c:	0e c0       	rjmp	.+28     	; 0x195a <open_led+0x4a>
		case '3':LED_ON(PORTC_ID,LED3);break;
    193e:	67 e0       	ldi	r22, 0x07	; 7
    1940:	82 e0       	ldi	r24, 0x02	; 2
    1942:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LED_ON>
    1946:	09 c0       	rjmp	.+18     	; 0x195a <open_led+0x4a>
		case '4':LED_ON(PORTD_ID,LED4);break;
    1948:	63 e0       	ldi	r22, 0x03	; 3
    194a:	83 e0       	ldi	r24, 0x03	; 3
    194c:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LED_ON>
    1950:	04 c0       	rjmp	.+8      	; 0x195a <open_led+0x4a>
		case '5':LED_ON(PORTD_ID,LED5);break;
    1952:	64 e0       	ldi	r22, 0x04	; 4
    1954:	83 e0       	ldi	r24, 0x03	; 3
    1956:	0e 94 d5 04 	call	0x9aa	; 0x9aa <LED_ON>

	}
	choose_led_uart();
    195a:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <choose_led_uart>
    195e:	08 95       	ret

00001960 <close_led>:
}

void close_led (uint8_t led_num)
{
	switch (led_num)
    1960:	83 33       	cpi	r24, 0x33	; 51
    1962:	a9 f0       	breq	.+42     	; 0x198e <close_led+0x2e>
    1964:	28 f4       	brcc	.+10     	; 0x1970 <close_led+0x10>
    1966:	81 33       	cpi	r24, 0x31	; 49
    1968:	41 f0       	breq	.+16     	; 0x197a <close_led+0x1a>
    196a:	82 33       	cpi	r24, 0x32	; 50
    196c:	59 f0       	breq	.+22     	; 0x1984 <close_led+0x24>
    196e:	1d c0       	rjmp	.+58     	; 0x19aa <close_led+0x4a>
    1970:	84 33       	cpi	r24, 0x34	; 52
    1972:	91 f0       	breq	.+36     	; 0x1998 <close_led+0x38>
    1974:	85 33       	cpi	r24, 0x35	; 53
    1976:	a9 f0       	breq	.+42     	; 0x19a2 <close_led+0x42>
    1978:	18 c0       	rjmp	.+48     	; 0x19aa <close_led+0x4a>
	{
		case '1':LED_OFF(PORTA_ID,LED1);break;
    197a:	62 e0       	ldi	r22, 0x02	; 2
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <LED_OFF>
    1982:	13 c0       	rjmp	.+38     	; 0x19aa <close_led+0x4a>
		case '2':LED_OFF(PORTC_ID,LED2);break;
    1984:	66 e0       	ldi	r22, 0x06	; 6
    1986:	82 e0       	ldi	r24, 0x02	; 2
    1988:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <LED_OFF>
    198c:	0e c0       	rjmp	.+28     	; 0x19aa <close_led+0x4a>
		case '3':LED_OFF(PORTC_ID,LED3);break;
    198e:	67 e0       	ldi	r22, 0x07	; 7
    1990:	82 e0       	ldi	r24, 0x02	; 2
    1992:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <LED_OFF>
    1996:	09 c0       	rjmp	.+18     	; 0x19aa <close_led+0x4a>
		case '4':LED_OFF(PORTD_ID,LED4);break;
    1998:	63 e0       	ldi	r22, 0x03	; 3
    199a:	83 e0       	ldi	r24, 0x03	; 3
    199c:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <LED_OFF>
    19a0:	04 c0       	rjmp	.+8      	; 0x19aa <close_led+0x4a>
		case '5':LED_OFF(PORTD_ID,LED5);break;
    19a2:	64 e0       	ldi	r22, 0x04	; 4
    19a4:	83 e0       	ldi	r24, 0x03	; 3
    19a6:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <LED_OFF>

	}
	choose_led_uart();
    19aa:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <choose_led_uart>
    19ae:	08 95       	ret

000019b0 <add_user>:
		}
	}
}

void add_user(void)
{
    19b0:	0f 93       	push	r16
    19b2:	1f 93       	push	r17
    19b4:	cf 93       	push	r28
	uint8_t i=0,j=0,k=0,s=0;
	UART_sendString("enter user name \r");
    19b6:	87 e6       	ldi	r24, 0x67	; 103
    19b8:	91 e0       	ldi	r25, 0x01	; 1
    19ba:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString("user name: ");
    19be:	89 e7       	ldi	r24, 0x79	; 121
    19c0:	91 e0       	ldi	r25, 0x01	; 1
    19c2:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	}
}

void add_user(void)
{
	uint8_t i=0,j=0,k=0,s=0;
    19c6:	c0 e0       	ldi	r28, 0x00	; 0
	UART_sendString("enter user name \r");
	UART_sendString("user name: ");
	while (i<4)
    19c8:	0b c0       	rjmp	.+22     	; 0x19e0 <add_user+0x30>
	{
		user_name[i]=UART_recieveByte();
    19ca:	0c 2f       	mov	r16, r28
    19cc:	10 e0       	ldi	r17, 0x00	; 0
    19ce:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <UART_recieveByte>
    19d2:	f8 01       	movw	r30, r16
    19d4:	e6 52       	subi	r30, 0x26	; 38
    19d6:	fa 4f       	sbci	r31, 0xFA	; 250
    19d8:	80 83       	st	Z, r24
		UART_sendByte(user_name[i]);
    19da:	0e 94 76 0e 	call	0x1cec	; 0x1cec <UART_sendByte>
		i++;
    19de:	cf 5f       	subi	r28, 0xFF	; 255
void add_user(void)
{
	uint8_t i=0,j=0,k=0,s=0;
	UART_sendString("enter user name \r");
	UART_sendString("user name: ");
	while (i<4)
    19e0:	c4 30       	cpi	r28, 0x04	; 4
    19e2:	98 f3       	brcs	.-26     	; 0x19ca <add_user+0x1a>
	{
		user_name[i]=UART_recieveByte();
		UART_sendByte(user_name[i]);
		i++;
	}
	UART_sendString("\r");
    19e4:	82 e5       	ldi	r24, 0x52	; 82
    19e6:	95 e0       	ldi	r25, 0x05	; 5
    19e8:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString("enter user password \r");
    19ec:	85 e8       	ldi	r24, 0x85	; 133
    19ee:	91 e0       	ldi	r25, 0x01	; 1
    19f0:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString("password: ");
    19f4:	80 ea       	ldi	r24, 0xA0	; 160
    19f6:	91 e0       	ldi	r25, 0x01	; 1
    19f8:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	}
}

void add_user(void)
{
	uint8_t i=0,j=0,k=0,s=0;
    19fc:	c0 e0       	ldi	r28, 0x00	; 0
		i++;
	}
	UART_sendString("\r");
	UART_sendString("enter user password \r");
	UART_sendString("password: ");
	while (j<4)
    19fe:	0b c0       	rjmp	.+22     	; 0x1a16 <add_user+0x66>
	{
		user_pass[j]=UART_recieveByte();
    1a00:	0c 2f       	mov	r16, r28
    1a02:	10 e0       	ldi	r17, 0x00	; 0
    1a04:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <UART_recieveByte>
    1a08:	f8 01       	movw	r30, r16
    1a0a:	ea 5f       	subi	r30, 0xFA	; 250
    1a0c:	f9 4f       	sbci	r31, 0xF9	; 249
    1a0e:	80 83       	st	Z, r24
		UART_sendByte(user_pass[j]);
    1a10:	0e 94 76 0e 	call	0x1cec	; 0x1cec <UART_sendByte>
		j++;
    1a14:	cf 5f       	subi	r28, 0xFF	; 255
		i++;
	}
	UART_sendString("\r");
	UART_sendString("enter user password \r");
	UART_sendString("password: ");
	while (j<4)
    1a16:	c4 30       	cpi	r28, 0x04	; 4
    1a18:	98 f3       	brcs	.-26     	; 0x1a00 <add_user+0x50>
	{
		user_pass[j]=UART_recieveByte();
		UART_sendByte(user_pass[j]);
		j++;
	}
	UART_sendString("\r");
    1a1a:	82 e5       	ldi	r24, 0x52	; 82
    1a1c:	95 e0       	ldi	r25, 0x05	; 5
    1a1e:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	}
}

void add_user(void)
{
	uint8_t i=0,j=0,k=0,s=0;
    1a22:	c0 e0       	ldi	r28, 0x00	; 0
		user_pass[j]=UART_recieveByte();
		UART_sendByte(user_pass[j]);
		j++;
	}
	UART_sendString("\r");
	while (k<4)
    1a24:	18 c0       	rjmp	.+48     	; 0x1a56 <add_user+0xa6>
	{
		while(!EEPROM_writeByte(user_name_address+user_number+k,user_name[k]));
    1a26:	2c 2f       	mov	r18, r28
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	f9 01       	movw	r30, r18
    1a2c:	e6 52       	subi	r30, 0x26	; 38
    1a2e:	fa 4f       	sbci	r31, 0xFA	; 250
    1a30:	60 81       	ld	r22, Z
    1a32:	90 91 d4 05 	lds	r25, 0x05D4	; 0x8005d4 <user_number>
    1a36:	89 2f       	mov	r24, r25
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	80 96       	adiw	r24, 0x20	; 32
    1a3c:	82 0f       	add	r24, r18
    1a3e:	93 1f       	adc	r25, r19
    1a40:	0e 94 b1 00 	call	0x162	; 0x162 <EEPROM_writeByte>
    1a44:	88 23       	and	r24, r24
    1a46:	79 f3       	breq	.-34     	; 0x1a26 <add_user+0x76>
		k++;
    1a48:	cf 5f       	subi	r28, 0xFF	; 255
    1a4a:	83 ec       	ldi	r24, 0xC3	; 195
    1a4c:	99 e0       	ldi	r25, 0x09	; 9
    1a4e:	01 97       	sbiw	r24, 0x01	; 1
    1a50:	f1 f7       	brne	.-4      	; 0x1a4e <add_user+0x9e>
    1a52:	00 c0       	rjmp	.+0      	; 0x1a54 <add_user+0xa4>
    1a54:	00 00       	nop
		user_pass[j]=UART_recieveByte();
		UART_sendByte(user_pass[j]);
		j++;
	}
	UART_sendString("\r");
	while (k<4)
    1a56:	c4 30       	cpi	r28, 0x04	; 4
    1a58:	30 f3       	brcs	.-52     	; 0x1a26 <add_user+0x76>
    1a5a:	c0 e0       	ldi	r28, 0x00	; 0
    1a5c:	19 c0       	rjmp	.+50     	; 0x1a90 <add_user+0xe0>
		k++;
		_delay_ms(10);
	}
	while (s<4)
	{
		while(!EEPROM_writeByte(user_pass_address+user_number+s,user_pass[s]));
    1a5e:	2c 2f       	mov	r18, r28
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	f9 01       	movw	r30, r18
    1a64:	ea 5f       	subi	r30, 0xFA	; 250
    1a66:	f9 4f       	sbci	r31, 0xF9	; 249
    1a68:	60 81       	ld	r22, Z
    1a6a:	90 91 d4 05 	lds	r25, 0x05D4	; 0x8005d4 <user_number>
    1a6e:	89 2f       	mov	r24, r25
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	80 58       	subi	r24, 0x80	; 128
    1a74:	9f 4f       	sbci	r25, 0xFF	; 255
    1a76:	82 0f       	add	r24, r18
    1a78:	93 1f       	adc	r25, r19
    1a7a:	0e 94 b1 00 	call	0x162	; 0x162 <EEPROM_writeByte>
    1a7e:	88 23       	and	r24, r24
    1a80:	71 f3       	breq	.-36     	; 0x1a5e <add_user+0xae>
		s++;
    1a82:	cf 5f       	subi	r28, 0xFF	; 255
    1a84:	83 ec       	ldi	r24, 0xC3	; 195
    1a86:	99 e0       	ldi	r25, 0x09	; 9
    1a88:	01 97       	sbiw	r24, 0x01	; 1
    1a8a:	f1 f7       	brne	.-4      	; 0x1a88 <add_user+0xd8>
    1a8c:	00 c0       	rjmp	.+0      	; 0x1a8e <add_user+0xde>
    1a8e:	00 00       	nop
	{
		while(!EEPROM_writeByte(user_name_address+user_number+k,user_name[k]));
		k++;
		_delay_ms(10);
	}
	while (s<4)
    1a90:	c4 30       	cpi	r28, 0x04	; 4
    1a92:	28 f3       	brcs	.-54     	; 0x1a5e <add_user+0xae>
	{
		while(!EEPROM_writeByte(user_pass_address+user_number+s,user_pass[s]));
		s++;
		_delay_ms(10);
	}
	user_number+=4;
    1a94:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <user_number>
    1a98:	8c 5f       	subi	r24, 0xFC	; 252
    1a9a:	80 93 d4 05 	sts	0x05D4, r24	; 0x8005d4 <user_number>
	user_count++;
    1a9e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
    1aa2:	8f 5f       	subi	r24, 0xFF	; 255
    1aa4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	if (type == '1')
    1aa8:	80 91 d9 05 	lds	r24, 0x05D9	; 0x8005d9 <type>
    1aac:	81 33       	cpi	r24, 0x31	; 49
    1aae:	11 f4       	brne	.+4      	; 0x1ab4 <add_user+0x104>
	{
		main_opt();
    1ab0:	0e 94 86 0a 	call	0x150c	; 0x150c <main_opt>
	}
	if (type == '2')
    1ab4:	80 91 d9 05 	lds	r24, 0x05D9	; 0x8005d9 <type>
    1ab8:	82 33       	cpi	r24, 0x32	; 50
    1aba:	11 f4       	brne	.+4      	; 0x1ac0 <add_user+0x110>
	{
		user_main_opt();
    1abc:	0e 94 1d 0b 	call	0x163a	; 0x163a <user_main_opt>
	}
}
    1ac0:	cf 91       	pop	r28
    1ac2:	1f 91       	pop	r17
    1ac4:	0f 91       	pop	r16
    1ac6:	08 95       	ret

00001ac8 <remove_user>:

void remove_user(void)
{
    1ac8:	cf 93       	push	r28
    1aca:	df 93       	push	r29
	uint8_t i=0,k=0,x;
	UART_sendString("write the user number \r");
    1acc:	84 e5       	ldi	r24, 0x54	; 84
    1ace:	95 e0       	ldi	r25, 0x05	; 5
    1ad0:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString("the number should be greater than ");                      
    1ad4:	8c e6       	ldi	r24, 0x6C	; 108
    1ad6:	95 e0       	ldi	r25, 0x05	; 5
    1ad8:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendByte(user_count);
    1adc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
    1ae0:	0e 94 76 0e 	call	0x1cec	; 0x1cec <UART_sendByte>
	UART_sendString("\r");
    1ae4:	82 e5       	ldi	r24, 0x52	; 82
    1ae6:	95 e0       	ldi	r25, 0x05	; 5
    1ae8:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	x = UART_recieveByte();
    1aec:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <UART_recieveByte>
    1af0:	c8 2f       	mov	r28, r24
	UART_sendByte(x);
    1af2:	0e 94 76 0e 	call	0x1cec	; 0x1cec <UART_sendByte>
	UART_sendString("\r");
    1af6:	82 e5       	ldi	r24, 0x52	; 82
    1af8:	95 e0       	ldi	r25, 0x05	; 5
    1afa:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	}
}

void remove_user(void)
{
	uint8_t i=0,k=0,x;
    1afe:	d0 e0       	ldi	r29, 0x00	; 0
	UART_sendString("\r");
	x = UART_recieveByte();
	UART_sendByte(x);
	UART_sendString("\r");
	
	while (k<4)
    1b00:	15 c0       	rjmp	.+42     	; 0x1b2c <remove_user+0x64>
	{
		while(!EEPROM_writeByte(user_name_address+((x-'0')-1)*4+k,'0'));
    1b02:	8c 2f       	mov	r24, r28
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	89 97       	sbiw	r24, 0x29	; 41
    1b08:	88 0f       	add	r24, r24
    1b0a:	99 1f       	adc	r25, r25
    1b0c:	88 0f       	add	r24, r24
    1b0e:	99 1f       	adc	r25, r25
    1b10:	60 e3       	ldi	r22, 0x30	; 48
    1b12:	8d 0f       	add	r24, r29
    1b14:	91 1d       	adc	r25, r1
    1b16:	0e 94 b1 00 	call	0x162	; 0x162 <EEPROM_writeByte>
    1b1a:	88 23       	and	r24, r24
    1b1c:	91 f3       	breq	.-28     	; 0x1b02 <remove_user+0x3a>
		k++;
    1b1e:	df 5f       	subi	r29, 0xFF	; 255
    1b20:	83 ec       	ldi	r24, 0xC3	; 195
    1b22:	99 e0       	ldi	r25, 0x09	; 9
    1b24:	01 97       	sbiw	r24, 0x01	; 1
    1b26:	f1 f7       	brne	.-4      	; 0x1b24 <remove_user+0x5c>
    1b28:	00 c0       	rjmp	.+0      	; 0x1b2a <remove_user+0x62>
    1b2a:	00 00       	nop
	UART_sendString("\r");
	x = UART_recieveByte();
	UART_sendByte(x);
	UART_sendString("\r");
	
	while (k<4)
    1b2c:	d4 30       	cpi	r29, 0x04	; 4
    1b2e:	48 f3       	brcs	.-46     	; 0x1b02 <remove_user+0x3a>
    1b30:	d0 e0       	ldi	r29, 0x00	; 0
    1b32:	15 c0       	rjmp	.+42     	; 0x1b5e <remove_user+0x96>
		k++;
		_delay_ms(10);
	}
	while (i<4)
	{
		while(!EEPROM_writeByte(user_pass_address+((x-'0')-1)*4+i,'0'));
    1b34:	8c 2f       	mov	r24, r28
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	41 97       	sbiw	r24, 0x11	; 17
    1b3a:	88 0f       	add	r24, r24
    1b3c:	99 1f       	adc	r25, r25
    1b3e:	88 0f       	add	r24, r24
    1b40:	99 1f       	adc	r25, r25
    1b42:	60 e3       	ldi	r22, 0x30	; 48
    1b44:	8d 0f       	add	r24, r29
    1b46:	91 1d       	adc	r25, r1
    1b48:	0e 94 b1 00 	call	0x162	; 0x162 <EEPROM_writeByte>
    1b4c:	88 23       	and	r24, r24
    1b4e:	91 f3       	breq	.-28     	; 0x1b34 <remove_user+0x6c>
		i++;
    1b50:	df 5f       	subi	r29, 0xFF	; 255
    1b52:	83 ec       	ldi	r24, 0xC3	; 195
    1b54:	99 e0       	ldi	r25, 0x09	; 9
    1b56:	01 97       	sbiw	r24, 0x01	; 1
    1b58:	f1 f7       	brne	.-4      	; 0x1b56 <remove_user+0x8e>
    1b5a:	00 c0       	rjmp	.+0      	; 0x1b5c <remove_user+0x94>
    1b5c:	00 00       	nop
	{
		while(!EEPROM_writeByte(user_name_address+((x-'0')-1)*4+k,'0'));
		k++;
		_delay_ms(10);
	}
	while (i<4)
    1b5e:	d4 30       	cpi	r29, 0x04	; 4
    1b60:	48 f3       	brcs	.-46     	; 0x1b34 <remove_user+0x6c>
	{
		while(!EEPROM_writeByte(user_pass_address+((x-'0')-1)*4+i,'0'));
		i++;
		_delay_ms(10);
	}
	user_number-=4;
    1b62:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <user_number>
    1b66:	84 50       	subi	r24, 0x04	; 4
    1b68:	80 93 d4 05 	sts	0x05D4, r24	; 0x8005d4 <user_number>
	user_count--;
    1b6c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
    1b70:	81 50       	subi	r24, 0x01	; 1
    1b72:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	UART_sendString("done... \r");
    1b76:	8f e8       	ldi	r24, 0x8F	; 143
    1b78:	95 e0       	ldi	r25, 0x05	; 5
    1b7a:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
    1b7e:	9f e9       	ldi	r25, 0x9F	; 159
    1b80:	26 e8       	ldi	r18, 0x86	; 134
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	91 50       	subi	r25, 0x01	; 1
    1b86:	20 40       	sbci	r18, 0x00	; 0
    1b88:	80 40       	sbci	r24, 0x00	; 0
    1b8a:	e1 f7       	brne	.-8      	; 0x1b84 <remove_user+0xbc>
    1b8c:	00 c0       	rjmp	.+0      	; 0x1b8e <remove_user+0xc6>
    1b8e:	00 00       	nop
	_delay_ms(500);
	if (type == '1')
    1b90:	80 91 d9 05 	lds	r24, 0x05D9	; 0x8005d9 <type>
    1b94:	81 33       	cpi	r24, 0x31	; 49
    1b96:	11 f4       	brne	.+4      	; 0x1b9c <remove_user+0xd4>
	{
		main_opt();
    1b98:	0e 94 86 0a 	call	0x150c	; 0x150c <main_opt>
	}
	if (type == '2')
    1b9c:	80 91 d9 05 	lds	r24, 0x05D9	; 0x8005d9 <type>
    1ba0:	82 33       	cpi	r24, 0x32	; 50
    1ba2:	11 f4       	brne	.+4      	; 0x1ba8 <remove_user+0xe0>
	{
		user_main_opt();
    1ba4:	0e 94 1d 0b 	call	0x163a	; 0x163a <user_main_opt>
	}
}
    1ba8:	df 91       	pop	r29
    1baa:	cf 91       	pop	r28
    1bac:	08 95       	ret

00001bae <user_control>:
}

void user_control(void)
{
    uint8_t state;
	UART_sendString("choose add or remove user \r");
    1bae:	89 e9       	ldi	r24, 0x99	; 153
    1bb0:	95 e0       	ldi	r25, 0x05	; 5
    1bb2:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString("users now equal ");
    1bb6:	86 e5       	ldi	r24, 0x56	; 86
    1bb8:	91 e0       	ldi	r25, 0x01	; 1
    1bba:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendByte(user_count);
    1bbe:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
    1bc2:	0e 94 76 0e 	call	0x1cec	; 0x1cec <UART_sendByte>
	UART_sendString("\r");
    1bc6:	82 e5       	ldi	r24, 0x52	; 82
    1bc8:	95 e0       	ldi	r25, 0x05	; 5
    1bca:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
    1bce:	2f e3       	ldi	r18, 0x3F	; 63
    1bd0:	8d e0       	ldi	r24, 0x0D	; 13
    1bd2:	93 e0       	ldi	r25, 0x03	; 3
    1bd4:	21 50       	subi	r18, 0x01	; 1
    1bd6:	80 40       	sbci	r24, 0x00	; 0
    1bd8:	90 40       	sbci	r25, 0x00	; 0
    1bda:	e1 f7       	brne	.-8      	; 0x1bd4 <user_control+0x26>
    1bdc:	00 c0       	rjmp	.+0      	; 0x1bde <user_control+0x30>
    1bde:	00 00       	nop
	_delay_ms(1000);
	UART_sendString("1:add user \r");
    1be0:	85 eb       	ldi	r24, 0xB5	; 181
    1be2:	95 e0       	ldi	r25, 0x05	; 5
    1be4:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString("2:remove user \r");
    1be8:	82 ec       	ldi	r24, 0xC2	; 194
    1bea:	95 e0       	ldi	r25, 0x05	; 5
    1bec:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	UART_sendString("3:Main \r");
    1bf0:	8f ef       	ldi	r24, 0xFF	; 255
    1bf2:	92 e0       	ldi	r25, 0x02	; 2
    1bf4:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <UART_sendString>
	state = UART_recieveByte();
    1bf8:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <UART_recieveByte>
	switch (state)
    1bfc:	82 33       	cpi	r24, 0x32	; 50
    1bfe:	39 f0       	breq	.+14     	; 0x1c0e <user_control+0x60>
    1c00:	83 33       	cpi	r24, 0x33	; 51
    1c02:	41 f0       	breq	.+16     	; 0x1c14 <user_control+0x66>
    1c04:	81 33       	cpi	r24, 0x31	; 49
    1c06:	89 f4       	brne	.+34     	; 0x1c2a <user_control+0x7c>
	{
		case '1':add_user();break;
    1c08:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <add_user>
    1c0c:	08 95       	ret
		case '2':remove_user();break;
    1c0e:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <remove_user>
    1c12:	08 95       	ret
		case '3':
		if (type == '1')
    1c14:	80 91 d9 05 	lds	r24, 0x05D9	; 0x8005d9 <type>
    1c18:	81 33       	cpi	r24, 0x31	; 49
    1c1a:	19 f4       	brne	.+6      	; 0x1c22 <user_control+0x74>
		{
			main_opt();break;
    1c1c:	0e 94 86 0a 	call	0x150c	; 0x150c <main_opt>
    1c20:	08 95       	ret
		}
		if (type == '2')
    1c22:	82 33       	cpi	r24, 0x32	; 50
    1c24:	11 f4       	brne	.+4      	; 0x1c2a <user_control+0x7c>
		{
			user_main_opt();break;
    1c26:	0e 94 1d 0b 	call	0x163a	; 0x163a <user_main_opt>
    1c2a:	08 95       	ret

00001c2c <TIMER0_INIT>:
#include <avr/io.h>
#include <stdint.h>
void TIMER0_INIT(uint8_t speed)
{
   
	TCCR0=(1<<WGM01)|(1<<WGM00)|(1<<CS01)|(1<<COM01);
    1c2c:	9a e6       	ldi	r25, 0x6A	; 106
    1c2e:	93 bf       	out	0x33, r25	; 51
	TCNT0=0;
    1c30:	12 be       	out	0x32, r1	; 50
	OCR0=((float)speed/100)*255;
    1c32:	68 2f       	mov	r22, r24
    1c34:	70 e0       	ldi	r23, 0x00	; 0
    1c36:	80 e0       	ldi	r24, 0x00	; 0
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <__floatunsisf>
    1c3e:	20 e0       	ldi	r18, 0x00	; 0
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	48 ec       	ldi	r20, 0xC8	; 200
    1c44:	52 e4       	ldi	r21, 0x42	; 66
    1c46:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__divsf3>
    1c4a:	20 e0       	ldi	r18, 0x00	; 0
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	4f e7       	ldi	r20, 0x7F	; 127
    1c50:	53 e4       	ldi	r21, 0x43	; 67
    1c52:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__mulsf3>
    1c56:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <__fixunssfsi>
    1c5a:	6c bf       	out	0x3c, r22	; 60
	DDRB|=(1<<PB3);
    1c5c:	87 b3       	in	r24, 0x17	; 23
    1c5e:	88 60       	ori	r24, 0x08	; 8
    1c60:	87 bb       	out	0x17, r24	; 23
    1c62:	08 95       	ret

00001c64 <TWI_init>:
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    /* Read Data */
    return TWDR;
}
    1c64:	fc 01       	movw	r30, r24
    1c66:	21 81       	ldd	r18, Z+1	; 0x01
    1c68:	20 b9       	out	0x00, r18	; 0
    1c6a:	11 b8       	out	0x01, r1	; 1
    1c6c:	80 81       	ld	r24, Z
    1c6e:	82 b9       	out	0x02, r24	; 2
    1c70:	84 e0       	ldi	r24, 0x04	; 4
    1c72:	86 bf       	out	0x36, r24	; 54
    1c74:	08 95       	ret

00001c76 <TWI_start>:
    1c76:	84 ea       	ldi	r24, 0xA4	; 164
    1c78:	86 bf       	out	0x36, r24	; 54
    1c7a:	06 b6       	in	r0, 0x36	; 54
    1c7c:	07 fe       	sbrs	r0, 7
    1c7e:	fd cf       	rjmp	.-6      	; 0x1c7a <TWI_start+0x4>
    1c80:	08 95       	ret

00001c82 <TWI_stop>:
    1c82:	84 e9       	ldi	r24, 0x94	; 148
    1c84:	86 bf       	out	0x36, r24	; 54
    1c86:	08 95       	ret

00001c88 <TWI_writeByte>:
    1c88:	83 b9       	out	0x03, r24	; 3
    1c8a:	84 e8       	ldi	r24, 0x84	; 132
    1c8c:	86 bf       	out	0x36, r24	; 54
    1c8e:	06 b6       	in	r0, 0x36	; 54
    1c90:	07 fe       	sbrs	r0, 7
    1c92:	fd cf       	rjmp	.-6      	; 0x1c8e <TWI_writeByte+0x6>
    1c94:	08 95       	ret

00001c96 <TWI_readByteWithNACK>:
{
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1c96:	84 e8       	ldi	r24, 0x84	; 132
    1c98:	86 bf       	out	0x36, r24	; 54
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1c9a:	06 b6       	in	r0, 0x36	; 54
    1c9c:	07 fe       	sbrs	r0, 7
    1c9e:	fd cf       	rjmp	.-6      	; 0x1c9a <TWI_readByteWithNACK+0x4>
    /* Read Data */
    return TWDR;
    1ca0:	83 b1       	in	r24, 0x03	; 3
}
    1ca2:	08 95       	ret

00001ca4 <TWI_getStatus>:

uint8_t TWI_getStatus(void)
{
    uint8_t status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1ca4:	81 b1       	in	r24, 0x01	; 1
    return status;
}
    1ca6:	88 7f       	andi	r24, 0xF8	; 248
    1ca8:	08 95       	ret

00001caa <UART_init>:
void UART_init(uint32_t baud_rate)
{
	uint16_t ubrr_value = 0;

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    1caa:	22 e0       	ldi	r18, 0x02	; 2
    1cac:	2b b9       	out	0x0b, r18	; 11
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    1cae:	28 e1       	ldi	r18, 0x18	; 24
    1cb0:	2a b9       	out	0x0a, r18	; 10
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    1cb2:	26 e8       	ldi	r18, 0x86	; 134
    1cb4:	20 bd       	out	0x20, r18	; 32
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16_t)(((F_CPU / (baud_rate * 8UL))) - 1);
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	88 0f       	add	r24, r24
    1cbc:	99 1f       	adc	r25, r25
    1cbe:	aa 1f       	adc	r26, r26
    1cc0:	bb 1f       	adc	r27, r27
    1cc2:	88 0f       	add	r24, r24
    1cc4:	99 1f       	adc	r25, r25
    1cc6:	aa 1f       	adc	r26, r26
    1cc8:	bb 1f       	adc	r27, r27
    1cca:	9c 01       	movw	r18, r24
    1ccc:	ad 01       	movw	r20, r26
    1cce:	22 0f       	add	r18, r18
    1cd0:	33 1f       	adc	r19, r19
    1cd2:	44 1f       	adc	r20, r20
    1cd4:	55 1f       	adc	r21, r21
    1cd6:	60 e4       	ldi	r22, 0x40	; 64
    1cd8:	72 e4       	ldi	r23, 0x42	; 66
    1cda:	8f e0       	ldi	r24, 0x0F	; 15
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	0e 94 2d 10 	call	0x205a	; 0x205a <__udivmodsi4>
    1ce2:	21 50       	subi	r18, 0x01	; 1
    1ce4:	31 09       	sbc	r19, r1

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    1ce6:	30 bd       	out	0x20, r19	; 32
	UBRRL = ubrr_value;
    1ce8:	29 b9       	out	0x09, r18	; 9
    1cea:	08 95       	ret

00001cec <UART_sendByte>:
{
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1cec:	5d 9b       	sbis	0x0b, 5	; 11
    1cee:	fe cf       	rjmp	.-4      	; 0x1cec <UART_sendByte>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    1cf0:	8c b9       	out	0x0c, r24	; 12
    1cf2:	08 95       	ret

00001cf4 <UART_recieveByte>:
 * Functional responsible for receive byte from another UART device.
 */
uint8_t UART_recieveByte(void)
{
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1cf4:	5f 9b       	sbis	0x0b, 7	; 11
    1cf6:	fe cf       	rjmp	.-4      	; 0x1cf4 <UART_recieveByte>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    1cf8:	8c b1       	in	r24, 0x0c	; 12
}
    1cfa:	08 95       	ret

00001cfc <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8_t *Str)
{
    1cfc:	0f 93       	push	r16
    1cfe:	1f 93       	push	r17
    1d00:	cf 93       	push	r28
    1d02:	8c 01       	movw	r16, r24
	uint8_t i = 0;
    1d04:	c0 e0       	ldi	r28, 0x00	; 0

	/* Send the whole string */
	while(Str[i] != '\0')
    1d06:	03 c0       	rjmp	.+6      	; 0x1d0e <UART_sendString+0x12>
	{
		UART_sendByte(Str[i]);
    1d08:	0e 94 76 0e 	call	0x1cec	; 0x1cec <UART_sendByte>
		i++;
    1d0c:	cf 5f       	subi	r28, 0xFF	; 255
void UART_sendString(const uint8_t *Str)
{
	uint8_t i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    1d0e:	f8 01       	movw	r30, r16
    1d10:	ec 0f       	add	r30, r28
    1d12:	f1 1d       	adc	r31, r1
    1d14:	80 81       	ld	r24, Z
    1d16:	81 11       	cpse	r24, r1
    1d18:	f7 cf       	rjmp	.-18     	; 0x1d08 <UART_sendString+0xc>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    1d1a:	cf 91       	pop	r28
    1d1c:	1f 91       	pop	r17
    1d1e:	0f 91       	pop	r16
    1d20:	08 95       	ret

00001d22 <__divsf3>:
    1d22:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <__divsf3x>
    1d26:	0c 94 86 0f 	jmp	0x1f0c	; 0x1f0c <__fp_round>
    1d2a:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <__fp_pscB>
    1d2e:	58 f0       	brcs	.+22     	; 0x1d46 <__divsf3+0x24>
    1d30:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <__fp_pscA>
    1d34:	40 f0       	brcs	.+16     	; 0x1d46 <__divsf3+0x24>
    1d36:	29 f4       	brne	.+10     	; 0x1d42 <__divsf3+0x20>
    1d38:	5f 3f       	cpi	r21, 0xFF	; 255
    1d3a:	29 f0       	breq	.+10     	; 0x1d46 <__divsf3+0x24>
    1d3c:	0c 94 6f 0f 	jmp	0x1ede	; 0x1ede <__fp_inf>
    1d40:	51 11       	cpse	r21, r1
    1d42:	0c 94 ba 0f 	jmp	0x1f74	; 0x1f74 <__fp_szero>
    1d46:	0c 94 75 0f 	jmp	0x1eea	; 0x1eea <__fp_nan>

00001d4a <__divsf3x>:
    1d4a:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <__fp_split3>
    1d4e:	68 f3       	brcs	.-38     	; 0x1d2a <__divsf3+0x8>

00001d50 <__divsf3_pse>:
    1d50:	99 23       	and	r25, r25
    1d52:	b1 f3       	breq	.-20     	; 0x1d40 <__divsf3+0x1e>
    1d54:	55 23       	and	r21, r21
    1d56:	91 f3       	breq	.-28     	; 0x1d3c <__divsf3+0x1a>
    1d58:	95 1b       	sub	r25, r21
    1d5a:	55 0b       	sbc	r21, r21
    1d5c:	bb 27       	eor	r27, r27
    1d5e:	aa 27       	eor	r26, r26
    1d60:	62 17       	cp	r22, r18
    1d62:	73 07       	cpc	r23, r19
    1d64:	84 07       	cpc	r24, r20
    1d66:	38 f0       	brcs	.+14     	; 0x1d76 <__divsf3_pse+0x26>
    1d68:	9f 5f       	subi	r25, 0xFF	; 255
    1d6a:	5f 4f       	sbci	r21, 0xFF	; 255
    1d6c:	22 0f       	add	r18, r18
    1d6e:	33 1f       	adc	r19, r19
    1d70:	44 1f       	adc	r20, r20
    1d72:	aa 1f       	adc	r26, r26
    1d74:	a9 f3       	breq	.-22     	; 0x1d60 <__divsf3_pse+0x10>
    1d76:	35 d0       	rcall	.+106    	; 0x1de2 <__divsf3_pse+0x92>
    1d78:	0e 2e       	mov	r0, r30
    1d7a:	3a f0       	brmi	.+14     	; 0x1d8a <__divsf3_pse+0x3a>
    1d7c:	e0 e8       	ldi	r30, 0x80	; 128
    1d7e:	32 d0       	rcall	.+100    	; 0x1de4 <__divsf3_pse+0x94>
    1d80:	91 50       	subi	r25, 0x01	; 1
    1d82:	50 40       	sbci	r21, 0x00	; 0
    1d84:	e6 95       	lsr	r30
    1d86:	00 1c       	adc	r0, r0
    1d88:	ca f7       	brpl	.-14     	; 0x1d7c <__divsf3_pse+0x2c>
    1d8a:	2b d0       	rcall	.+86     	; 0x1de2 <__divsf3_pse+0x92>
    1d8c:	fe 2f       	mov	r31, r30
    1d8e:	29 d0       	rcall	.+82     	; 0x1de2 <__divsf3_pse+0x92>
    1d90:	66 0f       	add	r22, r22
    1d92:	77 1f       	adc	r23, r23
    1d94:	88 1f       	adc	r24, r24
    1d96:	bb 1f       	adc	r27, r27
    1d98:	26 17       	cp	r18, r22
    1d9a:	37 07       	cpc	r19, r23
    1d9c:	48 07       	cpc	r20, r24
    1d9e:	ab 07       	cpc	r26, r27
    1da0:	b0 e8       	ldi	r27, 0x80	; 128
    1da2:	09 f0       	breq	.+2      	; 0x1da6 <__divsf3_pse+0x56>
    1da4:	bb 0b       	sbc	r27, r27
    1da6:	80 2d       	mov	r24, r0
    1da8:	bf 01       	movw	r22, r30
    1daa:	ff 27       	eor	r31, r31
    1dac:	93 58       	subi	r25, 0x83	; 131
    1dae:	5f 4f       	sbci	r21, 0xFF	; 255
    1db0:	3a f0       	brmi	.+14     	; 0x1dc0 <__divsf3_pse+0x70>
    1db2:	9e 3f       	cpi	r25, 0xFE	; 254
    1db4:	51 05       	cpc	r21, r1
    1db6:	78 f0       	brcs	.+30     	; 0x1dd6 <__divsf3_pse+0x86>
    1db8:	0c 94 6f 0f 	jmp	0x1ede	; 0x1ede <__fp_inf>
    1dbc:	0c 94 ba 0f 	jmp	0x1f74	; 0x1f74 <__fp_szero>
    1dc0:	5f 3f       	cpi	r21, 0xFF	; 255
    1dc2:	e4 f3       	brlt	.-8      	; 0x1dbc <__divsf3_pse+0x6c>
    1dc4:	98 3e       	cpi	r25, 0xE8	; 232
    1dc6:	d4 f3       	brlt	.-12     	; 0x1dbc <__divsf3_pse+0x6c>
    1dc8:	86 95       	lsr	r24
    1dca:	77 95       	ror	r23
    1dcc:	67 95       	ror	r22
    1dce:	b7 95       	ror	r27
    1dd0:	f7 95       	ror	r31
    1dd2:	9f 5f       	subi	r25, 0xFF	; 255
    1dd4:	c9 f7       	brne	.-14     	; 0x1dc8 <__divsf3_pse+0x78>
    1dd6:	88 0f       	add	r24, r24
    1dd8:	91 1d       	adc	r25, r1
    1dda:	96 95       	lsr	r25
    1ddc:	87 95       	ror	r24
    1dde:	97 f9       	bld	r25, 7
    1de0:	08 95       	ret
    1de2:	e1 e0       	ldi	r30, 0x01	; 1
    1de4:	66 0f       	add	r22, r22
    1de6:	77 1f       	adc	r23, r23
    1de8:	88 1f       	adc	r24, r24
    1dea:	bb 1f       	adc	r27, r27
    1dec:	62 17       	cp	r22, r18
    1dee:	73 07       	cpc	r23, r19
    1df0:	84 07       	cpc	r24, r20
    1df2:	ba 07       	cpc	r27, r26
    1df4:	20 f0       	brcs	.+8      	; 0x1dfe <__divsf3_pse+0xae>
    1df6:	62 1b       	sub	r22, r18
    1df8:	73 0b       	sbc	r23, r19
    1dfa:	84 0b       	sbc	r24, r20
    1dfc:	ba 0b       	sbc	r27, r26
    1dfe:	ee 1f       	adc	r30, r30
    1e00:	88 f7       	brcc	.-30     	; 0x1de4 <__divsf3_pse+0x94>
    1e02:	e0 95       	com	r30
    1e04:	08 95       	ret

00001e06 <__fixunssfsi>:
    1e06:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <__fp_splitA>
    1e0a:	88 f0       	brcs	.+34     	; 0x1e2e <__fixunssfsi+0x28>
    1e0c:	9f 57       	subi	r25, 0x7F	; 127
    1e0e:	98 f0       	brcs	.+38     	; 0x1e36 <__fixunssfsi+0x30>
    1e10:	b9 2f       	mov	r27, r25
    1e12:	99 27       	eor	r25, r25
    1e14:	b7 51       	subi	r27, 0x17	; 23
    1e16:	b0 f0       	brcs	.+44     	; 0x1e44 <__fixunssfsi+0x3e>
    1e18:	e1 f0       	breq	.+56     	; 0x1e52 <__fixunssfsi+0x4c>
    1e1a:	66 0f       	add	r22, r22
    1e1c:	77 1f       	adc	r23, r23
    1e1e:	88 1f       	adc	r24, r24
    1e20:	99 1f       	adc	r25, r25
    1e22:	1a f0       	brmi	.+6      	; 0x1e2a <__fixunssfsi+0x24>
    1e24:	ba 95       	dec	r27
    1e26:	c9 f7       	brne	.-14     	; 0x1e1a <__fixunssfsi+0x14>
    1e28:	14 c0       	rjmp	.+40     	; 0x1e52 <__fixunssfsi+0x4c>
    1e2a:	b1 30       	cpi	r27, 0x01	; 1
    1e2c:	91 f0       	breq	.+36     	; 0x1e52 <__fixunssfsi+0x4c>
    1e2e:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__fp_zero>
    1e32:	b1 e0       	ldi	r27, 0x01	; 1
    1e34:	08 95       	ret
    1e36:	0c 94 b9 0f 	jmp	0x1f72	; 0x1f72 <__fp_zero>
    1e3a:	67 2f       	mov	r22, r23
    1e3c:	78 2f       	mov	r23, r24
    1e3e:	88 27       	eor	r24, r24
    1e40:	b8 5f       	subi	r27, 0xF8	; 248
    1e42:	39 f0       	breq	.+14     	; 0x1e52 <__fixunssfsi+0x4c>
    1e44:	b9 3f       	cpi	r27, 0xF9	; 249
    1e46:	cc f3       	brlt	.-14     	; 0x1e3a <__fixunssfsi+0x34>
    1e48:	86 95       	lsr	r24
    1e4a:	77 95       	ror	r23
    1e4c:	67 95       	ror	r22
    1e4e:	b3 95       	inc	r27
    1e50:	d9 f7       	brne	.-10     	; 0x1e48 <__fixunssfsi+0x42>
    1e52:	3e f4       	brtc	.+14     	; 0x1e62 <__fixunssfsi+0x5c>
    1e54:	90 95       	com	r25
    1e56:	80 95       	com	r24
    1e58:	70 95       	com	r23
    1e5a:	61 95       	neg	r22
    1e5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e5e:	8f 4f       	sbci	r24, 0xFF	; 255
    1e60:	9f 4f       	sbci	r25, 0xFF	; 255
    1e62:	08 95       	ret

00001e64 <__floatunsisf>:
    1e64:	e8 94       	clt
    1e66:	09 c0       	rjmp	.+18     	; 0x1e7a <__floatsisf+0x12>

00001e68 <__floatsisf>:
    1e68:	97 fb       	bst	r25, 7
    1e6a:	3e f4       	brtc	.+14     	; 0x1e7a <__floatsisf+0x12>
    1e6c:	90 95       	com	r25
    1e6e:	80 95       	com	r24
    1e70:	70 95       	com	r23
    1e72:	61 95       	neg	r22
    1e74:	7f 4f       	sbci	r23, 0xFF	; 255
    1e76:	8f 4f       	sbci	r24, 0xFF	; 255
    1e78:	9f 4f       	sbci	r25, 0xFF	; 255
    1e7a:	99 23       	and	r25, r25
    1e7c:	a9 f0       	breq	.+42     	; 0x1ea8 <__floatsisf+0x40>
    1e7e:	f9 2f       	mov	r31, r25
    1e80:	96 e9       	ldi	r25, 0x96	; 150
    1e82:	bb 27       	eor	r27, r27
    1e84:	93 95       	inc	r25
    1e86:	f6 95       	lsr	r31
    1e88:	87 95       	ror	r24
    1e8a:	77 95       	ror	r23
    1e8c:	67 95       	ror	r22
    1e8e:	b7 95       	ror	r27
    1e90:	f1 11       	cpse	r31, r1
    1e92:	f8 cf       	rjmp	.-16     	; 0x1e84 <__floatsisf+0x1c>
    1e94:	fa f4       	brpl	.+62     	; 0x1ed4 <__floatsisf+0x6c>
    1e96:	bb 0f       	add	r27, r27
    1e98:	11 f4       	brne	.+4      	; 0x1e9e <__floatsisf+0x36>
    1e9a:	60 ff       	sbrs	r22, 0
    1e9c:	1b c0       	rjmp	.+54     	; 0x1ed4 <__floatsisf+0x6c>
    1e9e:	6f 5f       	subi	r22, 0xFF	; 255
    1ea0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ea2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ea4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ea6:	16 c0       	rjmp	.+44     	; 0x1ed4 <__floatsisf+0x6c>
    1ea8:	88 23       	and	r24, r24
    1eaa:	11 f0       	breq	.+4      	; 0x1eb0 <__floatsisf+0x48>
    1eac:	96 e9       	ldi	r25, 0x96	; 150
    1eae:	11 c0       	rjmp	.+34     	; 0x1ed2 <__floatsisf+0x6a>
    1eb0:	77 23       	and	r23, r23
    1eb2:	21 f0       	breq	.+8      	; 0x1ebc <__floatsisf+0x54>
    1eb4:	9e e8       	ldi	r25, 0x8E	; 142
    1eb6:	87 2f       	mov	r24, r23
    1eb8:	76 2f       	mov	r23, r22
    1eba:	05 c0       	rjmp	.+10     	; 0x1ec6 <__floatsisf+0x5e>
    1ebc:	66 23       	and	r22, r22
    1ebe:	71 f0       	breq	.+28     	; 0x1edc <__floatsisf+0x74>
    1ec0:	96 e8       	ldi	r25, 0x86	; 134
    1ec2:	86 2f       	mov	r24, r22
    1ec4:	70 e0       	ldi	r23, 0x00	; 0
    1ec6:	60 e0       	ldi	r22, 0x00	; 0
    1ec8:	2a f0       	brmi	.+10     	; 0x1ed4 <__floatsisf+0x6c>
    1eca:	9a 95       	dec	r25
    1ecc:	66 0f       	add	r22, r22
    1ece:	77 1f       	adc	r23, r23
    1ed0:	88 1f       	adc	r24, r24
    1ed2:	da f7       	brpl	.-10     	; 0x1eca <__floatsisf+0x62>
    1ed4:	88 0f       	add	r24, r24
    1ed6:	96 95       	lsr	r25
    1ed8:	87 95       	ror	r24
    1eda:	97 f9       	bld	r25, 7
    1edc:	08 95       	ret

00001ede <__fp_inf>:
    1ede:	97 f9       	bld	r25, 7
    1ee0:	9f 67       	ori	r25, 0x7F	; 127
    1ee2:	80 e8       	ldi	r24, 0x80	; 128
    1ee4:	70 e0       	ldi	r23, 0x00	; 0
    1ee6:	60 e0       	ldi	r22, 0x00	; 0
    1ee8:	08 95       	ret

00001eea <__fp_nan>:
    1eea:	9f ef       	ldi	r25, 0xFF	; 255
    1eec:	80 ec       	ldi	r24, 0xC0	; 192
    1eee:	08 95       	ret

00001ef0 <__fp_pscA>:
    1ef0:	00 24       	eor	r0, r0
    1ef2:	0a 94       	dec	r0
    1ef4:	16 16       	cp	r1, r22
    1ef6:	17 06       	cpc	r1, r23
    1ef8:	18 06       	cpc	r1, r24
    1efa:	09 06       	cpc	r0, r25
    1efc:	08 95       	ret

00001efe <__fp_pscB>:
    1efe:	00 24       	eor	r0, r0
    1f00:	0a 94       	dec	r0
    1f02:	12 16       	cp	r1, r18
    1f04:	13 06       	cpc	r1, r19
    1f06:	14 06       	cpc	r1, r20
    1f08:	05 06       	cpc	r0, r21
    1f0a:	08 95       	ret

00001f0c <__fp_round>:
    1f0c:	09 2e       	mov	r0, r25
    1f0e:	03 94       	inc	r0
    1f10:	00 0c       	add	r0, r0
    1f12:	11 f4       	brne	.+4      	; 0x1f18 <__fp_round+0xc>
    1f14:	88 23       	and	r24, r24
    1f16:	52 f0       	brmi	.+20     	; 0x1f2c <__fp_round+0x20>
    1f18:	bb 0f       	add	r27, r27
    1f1a:	40 f4       	brcc	.+16     	; 0x1f2c <__fp_round+0x20>
    1f1c:	bf 2b       	or	r27, r31
    1f1e:	11 f4       	brne	.+4      	; 0x1f24 <__fp_round+0x18>
    1f20:	60 ff       	sbrs	r22, 0
    1f22:	04 c0       	rjmp	.+8      	; 0x1f2c <__fp_round+0x20>
    1f24:	6f 5f       	subi	r22, 0xFF	; 255
    1f26:	7f 4f       	sbci	r23, 0xFF	; 255
    1f28:	8f 4f       	sbci	r24, 0xFF	; 255
    1f2a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f2c:	08 95       	ret

00001f2e <__fp_split3>:
    1f2e:	57 fd       	sbrc	r21, 7
    1f30:	90 58       	subi	r25, 0x80	; 128
    1f32:	44 0f       	add	r20, r20
    1f34:	55 1f       	adc	r21, r21
    1f36:	59 f0       	breq	.+22     	; 0x1f4e <__fp_splitA+0x10>
    1f38:	5f 3f       	cpi	r21, 0xFF	; 255
    1f3a:	71 f0       	breq	.+28     	; 0x1f58 <__fp_splitA+0x1a>
    1f3c:	47 95       	ror	r20

00001f3e <__fp_splitA>:
    1f3e:	88 0f       	add	r24, r24
    1f40:	97 fb       	bst	r25, 7
    1f42:	99 1f       	adc	r25, r25
    1f44:	61 f0       	breq	.+24     	; 0x1f5e <__fp_splitA+0x20>
    1f46:	9f 3f       	cpi	r25, 0xFF	; 255
    1f48:	79 f0       	breq	.+30     	; 0x1f68 <__fp_splitA+0x2a>
    1f4a:	87 95       	ror	r24
    1f4c:	08 95       	ret
    1f4e:	12 16       	cp	r1, r18
    1f50:	13 06       	cpc	r1, r19
    1f52:	14 06       	cpc	r1, r20
    1f54:	55 1f       	adc	r21, r21
    1f56:	f2 cf       	rjmp	.-28     	; 0x1f3c <__fp_split3+0xe>
    1f58:	46 95       	lsr	r20
    1f5a:	f1 df       	rcall	.-30     	; 0x1f3e <__fp_splitA>
    1f5c:	08 c0       	rjmp	.+16     	; 0x1f6e <__fp_splitA+0x30>
    1f5e:	16 16       	cp	r1, r22
    1f60:	17 06       	cpc	r1, r23
    1f62:	18 06       	cpc	r1, r24
    1f64:	99 1f       	adc	r25, r25
    1f66:	f1 cf       	rjmp	.-30     	; 0x1f4a <__fp_splitA+0xc>
    1f68:	86 95       	lsr	r24
    1f6a:	71 05       	cpc	r23, r1
    1f6c:	61 05       	cpc	r22, r1
    1f6e:	08 94       	sec
    1f70:	08 95       	ret

00001f72 <__fp_zero>:
    1f72:	e8 94       	clt

00001f74 <__fp_szero>:
    1f74:	bb 27       	eor	r27, r27
    1f76:	66 27       	eor	r22, r22
    1f78:	77 27       	eor	r23, r23
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	97 f9       	bld	r25, 7
    1f7e:	08 95       	ret

00001f80 <__mulsf3>:
    1f80:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <__mulsf3x>
    1f84:	0c 94 86 0f 	jmp	0x1f0c	; 0x1f0c <__fp_round>
    1f88:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <__fp_pscA>
    1f8c:	38 f0       	brcs	.+14     	; 0x1f9c <__mulsf3+0x1c>
    1f8e:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <__fp_pscB>
    1f92:	20 f0       	brcs	.+8      	; 0x1f9c <__mulsf3+0x1c>
    1f94:	95 23       	and	r25, r21
    1f96:	11 f0       	breq	.+4      	; 0x1f9c <__mulsf3+0x1c>
    1f98:	0c 94 6f 0f 	jmp	0x1ede	; 0x1ede <__fp_inf>
    1f9c:	0c 94 75 0f 	jmp	0x1eea	; 0x1eea <__fp_nan>
    1fa0:	11 24       	eor	r1, r1
    1fa2:	0c 94 ba 0f 	jmp	0x1f74	; 0x1f74 <__fp_szero>

00001fa6 <__mulsf3x>:
    1fa6:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <__fp_split3>
    1faa:	70 f3       	brcs	.-36     	; 0x1f88 <__mulsf3+0x8>

00001fac <__mulsf3_pse>:
    1fac:	95 9f       	mul	r25, r21
    1fae:	c1 f3       	breq	.-16     	; 0x1fa0 <__mulsf3+0x20>
    1fb0:	95 0f       	add	r25, r21
    1fb2:	50 e0       	ldi	r21, 0x00	; 0
    1fb4:	55 1f       	adc	r21, r21
    1fb6:	62 9f       	mul	r22, r18
    1fb8:	f0 01       	movw	r30, r0
    1fba:	72 9f       	mul	r23, r18
    1fbc:	bb 27       	eor	r27, r27
    1fbe:	f0 0d       	add	r31, r0
    1fc0:	b1 1d       	adc	r27, r1
    1fc2:	63 9f       	mul	r22, r19
    1fc4:	aa 27       	eor	r26, r26
    1fc6:	f0 0d       	add	r31, r0
    1fc8:	b1 1d       	adc	r27, r1
    1fca:	aa 1f       	adc	r26, r26
    1fcc:	64 9f       	mul	r22, r20
    1fce:	66 27       	eor	r22, r22
    1fd0:	b0 0d       	add	r27, r0
    1fd2:	a1 1d       	adc	r26, r1
    1fd4:	66 1f       	adc	r22, r22
    1fd6:	82 9f       	mul	r24, r18
    1fd8:	22 27       	eor	r18, r18
    1fda:	b0 0d       	add	r27, r0
    1fdc:	a1 1d       	adc	r26, r1
    1fde:	62 1f       	adc	r22, r18
    1fe0:	73 9f       	mul	r23, r19
    1fe2:	b0 0d       	add	r27, r0
    1fe4:	a1 1d       	adc	r26, r1
    1fe6:	62 1f       	adc	r22, r18
    1fe8:	83 9f       	mul	r24, r19
    1fea:	a0 0d       	add	r26, r0
    1fec:	61 1d       	adc	r22, r1
    1fee:	22 1f       	adc	r18, r18
    1ff0:	74 9f       	mul	r23, r20
    1ff2:	33 27       	eor	r19, r19
    1ff4:	a0 0d       	add	r26, r0
    1ff6:	61 1d       	adc	r22, r1
    1ff8:	23 1f       	adc	r18, r19
    1ffa:	84 9f       	mul	r24, r20
    1ffc:	60 0d       	add	r22, r0
    1ffe:	21 1d       	adc	r18, r1
    2000:	82 2f       	mov	r24, r18
    2002:	76 2f       	mov	r23, r22
    2004:	6a 2f       	mov	r22, r26
    2006:	11 24       	eor	r1, r1
    2008:	9f 57       	subi	r25, 0x7F	; 127
    200a:	50 40       	sbci	r21, 0x00	; 0
    200c:	9a f0       	brmi	.+38     	; 0x2034 <__mulsf3_pse+0x88>
    200e:	f1 f0       	breq	.+60     	; 0x204c <__mulsf3_pse+0xa0>
    2010:	88 23       	and	r24, r24
    2012:	4a f0       	brmi	.+18     	; 0x2026 <__mulsf3_pse+0x7a>
    2014:	ee 0f       	add	r30, r30
    2016:	ff 1f       	adc	r31, r31
    2018:	bb 1f       	adc	r27, r27
    201a:	66 1f       	adc	r22, r22
    201c:	77 1f       	adc	r23, r23
    201e:	88 1f       	adc	r24, r24
    2020:	91 50       	subi	r25, 0x01	; 1
    2022:	50 40       	sbci	r21, 0x00	; 0
    2024:	a9 f7       	brne	.-22     	; 0x2010 <__mulsf3_pse+0x64>
    2026:	9e 3f       	cpi	r25, 0xFE	; 254
    2028:	51 05       	cpc	r21, r1
    202a:	80 f0       	brcs	.+32     	; 0x204c <__mulsf3_pse+0xa0>
    202c:	0c 94 6f 0f 	jmp	0x1ede	; 0x1ede <__fp_inf>
    2030:	0c 94 ba 0f 	jmp	0x1f74	; 0x1f74 <__fp_szero>
    2034:	5f 3f       	cpi	r21, 0xFF	; 255
    2036:	e4 f3       	brlt	.-8      	; 0x2030 <__mulsf3_pse+0x84>
    2038:	98 3e       	cpi	r25, 0xE8	; 232
    203a:	d4 f3       	brlt	.-12     	; 0x2030 <__mulsf3_pse+0x84>
    203c:	86 95       	lsr	r24
    203e:	77 95       	ror	r23
    2040:	67 95       	ror	r22
    2042:	b7 95       	ror	r27
    2044:	f7 95       	ror	r31
    2046:	e7 95       	ror	r30
    2048:	9f 5f       	subi	r25, 0xFF	; 255
    204a:	c1 f7       	brne	.-16     	; 0x203c <__mulsf3_pse+0x90>
    204c:	fe 2b       	or	r31, r30
    204e:	88 0f       	add	r24, r24
    2050:	91 1d       	adc	r25, r1
    2052:	96 95       	lsr	r25
    2054:	87 95       	ror	r24
    2056:	97 f9       	bld	r25, 7
    2058:	08 95       	ret

0000205a <__udivmodsi4>:
    205a:	a1 e2       	ldi	r26, 0x21	; 33
    205c:	1a 2e       	mov	r1, r26
    205e:	aa 1b       	sub	r26, r26
    2060:	bb 1b       	sub	r27, r27
    2062:	fd 01       	movw	r30, r26
    2064:	0d c0       	rjmp	.+26     	; 0x2080 <__udivmodsi4_ep>

00002066 <__udivmodsi4_loop>:
    2066:	aa 1f       	adc	r26, r26
    2068:	bb 1f       	adc	r27, r27
    206a:	ee 1f       	adc	r30, r30
    206c:	ff 1f       	adc	r31, r31
    206e:	a2 17       	cp	r26, r18
    2070:	b3 07       	cpc	r27, r19
    2072:	e4 07       	cpc	r30, r20
    2074:	f5 07       	cpc	r31, r21
    2076:	20 f0       	brcs	.+8      	; 0x2080 <__udivmodsi4_ep>
    2078:	a2 1b       	sub	r26, r18
    207a:	b3 0b       	sbc	r27, r19
    207c:	e4 0b       	sbc	r30, r20
    207e:	f5 0b       	sbc	r31, r21

00002080 <__udivmodsi4_ep>:
    2080:	66 1f       	adc	r22, r22
    2082:	77 1f       	adc	r23, r23
    2084:	88 1f       	adc	r24, r24
    2086:	99 1f       	adc	r25, r25
    2088:	1a 94       	dec	r1
    208a:	69 f7       	brne	.-38     	; 0x2066 <__udivmodsi4_loop>
    208c:	60 95       	com	r22
    208e:	70 95       	com	r23
    2090:	80 95       	com	r24
    2092:	90 95       	com	r25
    2094:	9b 01       	movw	r18, r22
    2096:	ac 01       	movw	r20, r24
    2098:	bd 01       	movw	r22, r26
    209a:	cf 01       	movw	r24, r30
    209c:	08 95       	ret

0000209e <__tablejump2__>:
    209e:	ee 0f       	add	r30, r30
    20a0:	ff 1f       	adc	r31, r31
    20a2:	05 90       	lpm	r0, Z+
    20a4:	f4 91       	lpm	r31, Z
    20a6:	e0 2d       	mov	r30, r0
    20a8:	09 94       	ijmp

000020aa <__umulhisi3>:
    20aa:	a2 9f       	mul	r26, r18
    20ac:	b0 01       	movw	r22, r0
    20ae:	b3 9f       	mul	r27, r19
    20b0:	c0 01       	movw	r24, r0
    20b2:	a3 9f       	mul	r26, r19
    20b4:	70 0d       	add	r23, r0
    20b6:	81 1d       	adc	r24, r1
    20b8:	11 24       	eor	r1, r1
    20ba:	91 1d       	adc	r25, r1
    20bc:	b2 9f       	mul	r27, r18
    20be:	70 0d       	add	r23, r0
    20c0:	81 1d       	adc	r24, r1
    20c2:	11 24       	eor	r1, r1
    20c4:	91 1d       	adc	r25, r1
    20c6:	08 95       	ret

000020c8 <_exit>:
    20c8:	f8 94       	cli

000020ca <__stop_program>:
    20ca:	ff cf       	rjmp	.-2      	; 0x20ca <__stop_program>
